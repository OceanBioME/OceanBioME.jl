var documenterSearchIndex = {"docs":
[{"location":"appendix/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Documenting the user interface.","category":"page"},{"location":"appendix/library/","page":"Library","title":"Library","text":"This page is currently broken and won't show most of the functions for some reason, any suggestions would be appreciated!","category":"page"},{"location":"appendix/library/#OceanBioME.jl","page":"Library","title":"OceanBioME.jl","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.error_on_neg!-Tuple{Any}","page":"Library","title":"OceanBioME.error_on_neg!","text":"error_on_neg(sim; params = (exclude=(), ))\n\nThrows an error if any tracers in sim.model are negative. Use like:\n\nsimulation.callbacks[:neg] = Callback(error_on_neg!)\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.remove_NaN_tendencies!-Tuple{Any}","page":"Library","title":"OceanBioME.remove_NaN_tendencies!","text":"remove_NaN_tendencies!(model)\n\nZeros any NaN value tendencies as a final protection against negative tracer run away.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.warn_on_neg!-Tuple{Any}","page":"Library","title":"OceanBioME.warn_on_neg!","text":"warn_on_neg(sim; params = (exclude=(), ))\n\nRaises a warning if any tracers in sim.model are negative. Use like:\n\nsimulation.callbacks[:neg] = Callback(warn_on_neg!)\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.zero_negative_tracers!-Tuple{Any}","page":"Library","title":"OceanBioME.zero_negative_tracers!","text":"zero_negative_tracers!(sim; params = (exclude=(), ))\n\nSets any tracers in sim.model which are negative to zero. Use like:\n\nsimulation.callbacks[:neg] = Callback(zero_negative_tracers!)\n\nThis is NOT a reccomended method to preserve positivity as it strongly does not conserve tracers.\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Biogeochemical-Models","page":"Library","title":"Biogeochemical Models","text":"","category":"section"},{"location":"appendix/library/#Nutrient-Phytoplankton-Zooplankton-Detritus","page":"Library","title":"Nutrient Phytoplankton Zooplankton Detritus","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.NPZDModel]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.NPZDModel","page":"Library","title":"OceanBioME.NPZDModel","text":"Nutrient-Phytoplankton-Zooplankton-Detritus model of Angela M. Kuhn, Katja Fennel, Jann Paul Mattern (2015)\n\nTracers\n\nNutrients: N (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nDetritus: D (mmol N/m³)\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#The-Lodyc-DAMTP-Ocean-Biogeochemical-Simulation-Tools-for-Ecosystem-and-Resources-(LOBSTER)","page":"Library","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.LOBSTERModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.LOBSTERModel","page":"Library","title":"OceanBioME.LOBSTERModel","text":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model\n\nTracers\n\nNitrates: NO₃ (mmol N/m³)\nAmmonia: NH₄ (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nSmall (slow sinking) particulate organic matter: sPOM (mmol N/m³)\nLarge (fast sinking) particulate organic matter: bPOM (mmol N/m³)\nDisolved organic matter: DOM (mmol N/m³)\n\nOptional tracers\n\nCarbonate chemistry\n\nDisolved inorganic carbon: DIC (mmol C/m³)\nAlkalinity: Alk (meq/m³)\n\nOxygen chemistry\n\nOxygen: O₂ (mmol O₂/m³)\n\nVariable redfield\n\nSmall (slow sinking) particulate organic matter carbon content: sPOC (mmol C/m³)\nLarge (fast sinking) particulate organic matter carbon content: bPOC (mmol C/m³)\nDisolved organic matter carbon content: DOC (mmol C/m³)\nWhen this option is enabled then the usual sPOM and bPOM change to sPON and bPON as they explicitly represent the nitrogen contained in the particulate matter\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\nFor optional tracers:\n\nTemperature: T (ᵒC)\nSalinity: S (‰)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.LOBSTERModel.LOBSTER","page":"Library","title":"OceanBioME.LOBSTERModel.LOBSTER","text":"LOBSTER(; grid,\n          phytoplankton_preference::FT = 0.5,\n          maximum_grazing_rate::FT = 9.26e-6, # 1/s\n          grazing_half_saturation::FT = 1.0, # mmol N/m³\n          light_half_saturation::FT = 33.0, # W/m² (?)\n          nitrate_ammonia_inhibition::FT = 3.0,\n          nitrate_half_saturation::FT = 0.7, # mmol N/m³\n          ammonia_half_saturation::FT = 0.001, # mmol N/m³\n          maximum_phytoplankton_growthrate::FT = 1.21e-5, # 1/s\n          zooplankton_assimilation_fraction::FT = 0.7,\n          zooplankton_mortality::FT = 2.31e-6, # 1/s/mmol N/m³\n          zooplankton_excretion_rate::FT = 5.8e-7, # 1/s\n          phytoplankton_mortality::FT = 5.8e-7, # 1/s\n          small_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          large_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          phytoplankton_exudation_fraction::FT = 0.05,\n          nitrifcaiton_rate::FT = 5.8e-7, # 1/s\n          ammonia_fraction_of_exudate::FT = 0.75, \n          ammonia_fraction_of_excriment::FT = 0.5,\n          ammonia_fraction_of_detritus::FT = 0.0,\n          phytoplankton_redfield::FT = 6.56, # mol C/mol N\n          organic_redfield::FT = 6.56, # mol C/mol N\n          phytoplankton_chlorophyll_ratio::FT = 1.31, # g Chl/mol N\n          organic_carbon_calcate_ratio::FT = 0.1, # mol CaCO₃/mol C\n          respiraiton_oxygen_nitrogen_ratio::FT = 10.75, # mol O/molN\n          nitrifcation_oxygen_nitrogen_ratio::FT = 2.0, # mol O/molN\n          slow_sinking_mortality_fraction::FT = 0.5, \n          fast_sinking_mortality_fraction::FT = 0.5,\n          disolved_organic_breakdown_rate::FT = 3.86e-7, # 1/s\n          zooplankton_calcite_dissolution::FT = 0.3,\n\n          surface_phytosynthetically_active_radiation::SPAR = (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))),\n\n          light_attenuation_model = TwoBandPhotosyntheticallyActiveRatiation(; grid),\n          sediment_model::S = nothing,\n\n          carbonates::Bool = false,\n          oxygen::Bool = false,\n          variable_redfield = false,\n\n          sinking_speed = (sPOM = 3.47e-5, bPOM = 200/day),\n          open_bottom::Bool = true,\n          advection_schemes::A = NamedTuple{keys(sinking_velocities)}(repeat([CenteredSecondOrder()], \n                                                                      length(sinking_velocities))),\n          particles::P = nothing)\n\nConstruct an instance of the LOBSTER (LOBSTER) biogeochemical model.\n\nKeywork Arguments\n\n- `grid`: (required) the geometry to build the model on, required to calculate sinking\n- `phytoplankton_preference`, ..., `disolved_organic_breakdown_rate`: LOBSTER parameter values\n- `surface_phytosynthetically_active_radiation`: funciton (or array in the future) for the photosynthetically available radiaiton at the surface, should be shape `f(x, y, t)`\n- `light_attenuation_model`: light attenuation model which integrated the attenuation of available light\n- `sediment_model`: slot for `AbstractSediment`\n- `carbonates`, `oxygen`, and `variable_redfield`: include models for carbonate chemistry and/or oxygen chemistry and/or variable redfield ratio disolved and particulate organic matter\n- `sinking_speed`: named tuple of constant sinking, of fields (i.e. `ZFaceField(...)`) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\n- `open_bottom`: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\n- `advection_schemes`: named tuple of advection scheme to use for sinking\n- `particles`: slot for `BiogeochemicalParticles`\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Sugar-kelp-(Saccharina-latissima)","page":"Library","title":"Sugar kelp (Saccharina latissima)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.SLatissimaModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.SLatissimaModel","page":"Library","title":"OceanBioME.SLatissimaModel","text":"Sugar kelp model of Ole Jacob Broch, Dag Slagstad (2012) and updated by Ole Jacob Broch, Ingrid Helene Ellingsen, Silje Forbord, Xinxin Wang, Zsolt Volent, Morten Omholt Alver, Aleksander Handå, Kjersti Andresen, Dag Slagstad, Kjell Inge Reitan, Yngvar Olsen, Jorunn Skjermo (2013), Julia Fossberg, Silje Forbord, Ole Jacob Broch, Arne M. Malzahn, Henrice Jansen, Aleksander Handå, Henny Førde, Maria Bergvik, Anne Lise Fleddum, Jorunn Skjermo, Yngvar Olsen (2018), and Ole Jacob Broch, Morten Omholt Alver, Trine Bekkby, Hege Gundersen, Silje Forbord, Aleksander Handå, Jorunn Skjermo, Kasper Hancke (2019).\n\nPrognostic properties\n\nArea: A (dm²)\nNitrogen reserve: N (gN/gSW)\nCarbon reserve: C (gC/gSW)\n\nTracer dependencies\n\nNitrates: NO₃ (mmol N/m³)\nPhotosynthetically available radiation: PAR (einstein/m²/day)\n\nOptionally:\n\nAmmonia: NH₄ (mmol N/m³)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.SLatissimaModel.SLatissima","page":"Library","title":"OceanBioME.SLatissimaModel.SLatissima","text":"SLatissima(; architecture :: AR = CPU()\n             growth_rate_adjustement :: FT = 4.5\n             photosynthetic_efficiency :: FT = 4.15e-5 * 24 * 10^6 / (24 * 60 * 60)\n             minimum_carbon_reserve :: FT = 0.01\n             structural_carbon :: FT = 0.2\n             exudation :: FT = 0.5\n             erosion :: FT = 0.22\n             saturation_irradiance :: FT = 90 * day/ (10 ^ 6)\n             structural_dry_weight_per_area :: FT = 0.5\n             structural_dry_to_wet_weight :: FT = 0.0785\n             carbon_reserve_per_carbon :: FT = 2.1213\n             nitrogen_reserve_per_nitrogen :: FT = 2.72\n             minimum_nitrogen_reserve :: FT = 0.0126\n             maximum_nitrogen_reserve :: FT = 0.0216\n             growth_adjustement_2 :: FT = 0.039 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve))\n             growth_adjustement_1 :: FT = 0.18 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve)) - growth_adjustement_2\n             maximum_specific_growth_rate :: FT = 0.18\n             structural_nitrogen :: FT = 0.0146\n             photosynthesis_at_ref_temp_1 :: FT = 1.22e-3 * 24\n             photosynthesis_at_ref_temp_2 :: FT = 1.3e-3 * 24\n             photosynthesis_ref_temp_1 :: FT = 285.0\n             photosynthesis_ref_temp_2 :: FT = 288.0\n             photoperiod_1 :: FT = 0.85\n             photoperiod_2 :: FT = 0.3\n             respiration_at_ref_temp_1 :: FT = 2.785e-4 * 24\n             respiration_at_ref_temp_2 :: FT = 5.429e-4 * 24\n             respiration_ref_temp_1 :: FT = 285.0\n             respiration_ref_temp_2 :: FT = 290.0\n             photosynthesis_arrhenius_temp :: FT = (1 / photosynthesis_ref_temp_1 - 1 / photosynthesis_ref_temp_2) ^ -1 * log(photosynthesis_at_ref_temp_2 / photosynthesis_at_ref_temp_1)\n             photosynthesis_low_temp :: FT = 271.0\n             photosynthesis_high_temp :: FT = 296.0\n             photosynthesis_high_arrhenius_temp :: FT = 1414.87\n             photosynthesis_low_arrhenius_temp :: FT = 4547.89\n             respiration_arrhenius_temp :: FT = (1 / respiration_ref_temp_1 - 1 / respiration_ref_temp_2) ^ -1 * log(respiration_at_ref_temp_2 / respiration_at_ref_temp_1)\n             current_speed_for_0p65_uptake :: FT = 0.03\n             nitrate_half_saturation :: FT = 4.0\n             ammonia_half_saturation :: FT = 1.3\n             maximum_nitrate_uptake :: FT = 10 * structural_dry_weight_per_area * 24 * 14 / (10^6)\n             maximum_ammonia_uptake :: FT = 12 * structural_dry_weight_per_area * 24 * 14 / (10^6)\n             current_1 :: FT = 0.72\n             current_2 :: FT = 0.28\n             current_3 :: FT = 0.045\n             respiration_reference_A :: FT = 1.11e-4 * 24\n             respiration_reference_B :: FT = 5.57e-5 * 24\n             exudation_redfield_ratio :: FT = Inf\n\n             pescribed_velocity :: U = 0.1\n             pescribed_temperature :: T = nothing\n             pescribed_salinity :: S = nothing\n\n             #position\n             x :: P = arch_array(architecture, [0.0])\n             y :: P = arch_array(architecture, zeros(Float64, length(x)))\n             z :: P = arch_array(architecture, zeros(Float64, length(x)))\n\n             #properties\n             A :: P = arch_array(architecture, ones(Float64, length(x)) * 30)\n             N :: P = arch_array(architecture, ones(Float64, length(x)) * 0.01)\n             C :: P = arch_array(architecture, ones(Float64, length(x)) * 0.1)\n\n             #feedback\n             nitrate_uptake :: P = arch_array(architecture, zeros(Float64, length(x)))\n             ammonia_uptake :: P = arch_array(architecture, zeros(Float64, length(x)))\n             primary_production :: P = arch_array(architecture, zeros(Float64, length(x)))\n             frond_exudation :: P = arch_array(architecture, zeros(Float64, length(x)))\n             nitrogen_erosion :: P = arch_array(architecture, zeros(Float64, length(x)))\n             carbon_erosion :: P = arch_array(architecture, zeros(Float64, length(x)))\n\n             custom_dynamics :: F = no_dynamics\n\n             scalefactor :: FT = 1.0\n             latitude :: FT = 57.5)\n\nKeywork Arguments\n\n- `architecture`: the architecture to adapt arrays to\n- `growth_rate_adjustement`, ..., `exudation_redfield_ratio`: parameter values\n- `pescribed_velocity`, `pescribed_temperature` and `pescribed_salinity`: funcitons for the relative velocity, temperature and salinity in the form `f(x, y, z, t)`\n- `x`,`y` and `z`: positions of the particles\n- `A`, `N`, and `C`: area, nitrogen, and carbon reserves\n- `nitrate_uptake` ... `carbon_erosion`: diagnostic values coupled to tracer fields\n- `custom_dynamics`: place to add any function of form `f!(particles, model, bgc, Δt)`\n- `scalefactor`: scalar scaling for tracer coupling\n- `latitude`: model latitude for seasonal growth modulation\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Light-Attenuation-Models","page":"Library","title":"Light Attenuation Models","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Light]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Light","page":"Library","title":"OceanBioME.Light","text":"Light attenuation by chlorophyll as described by P. Karleskind, M. Lévy, L. Memery (2011) (implimented as twoBand) and André Morel (1988).\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Light.TwoBandPhotosyntheticallyActiveRatiation-Union{Tuple{}, Tuple{SPAR}, Tuple{FT}} where {FT, SPAR}","page":"Library","title":"OceanBioME.Light.TwoBandPhotosyntheticallyActiveRatiation","text":"TwoBandPhotosyntheticallyActiveRatiation(; grid, \n                                           water_red_attenuation::FT = 0.225, # 1/m\n                                           water_blue_attenuation::FT = 0.0232, # 1/m\n                                           chlorophyll_red_attenuation::FT = 0.037, # 1/(m * (mgChl/m³) ^ eʳ)\n                                           chlorophyll_blue_attenuation::FT = 0.074, # 1/(m * (mgChl/m³) ^ eᵇ)\n                                           chlorophyll_red_exponent::FT = 0.629,\n                                           chlorophyll_blue_exponent::FT = 0.674,\n                                           pigment_ratio::FT = 0.7,\n                                           phytoplankton_chlorophyll_ratio::FT = 1.31,\n                                           surface_PAR::SPAR = (x, y, t) -> 100 * max(0.0, cos(t * π / (12hours))))\n\nKeywork Arguments\n\n- `grid`: grid for building the model on\n- `water_red_attenuation`, ..., `phytoplankton_chlorophyll_ratio`: parameter values\n- `surface_PAR`: funciton (or array in the future) for the photosynthetically available radiaiton at the surface, should be shape `f(x, y, t)`\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Boundary-Conditions","page":"Library","title":"Boundary Conditions","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries","page":"Library","title":"OceanBioME.Boundaries","text":"Boundary conditions for air/sea and sediment flux. \n\nCurrently implimented:\n\ngasexchange (R. Wanninkhof (1992))\nGeneric air sea flux  model describted by Wanninkhof, 1992 but only setup for CO₂ and O₂\nForces the DIC and ocygen fields, and requires temp (in centigrade) and salinity, plus current DIC and ALK concentration\nSediments\nSoetaert (Karline Soetaert, Jack J Middelburg, Peter M J Herman, Kerst Buis (2000))\nsimple (integrated) sediment model described by Soetaert, Middelburg, Herman and Buis, 2000 \nwhere organic matter (D and DD) that sinks to the bottom is stored and decays into NO₃ and NH₄,    and takes up O₂ in the process. \nExtended to attribute the corresponding release of DIC\nForced by O₂, NO₃, NH₄ and particle concentration in bottom cell\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries.Sediments]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.SimpleMultiG-Union{Tuple{Any}, Tuple{P4}, Tuple{P3}, Tuple{P2}, Tuple{P1}, Tuple{FT}} where {FT, P1, P2, P3, P4}","page":"Library","title":"OceanBioME.Boundaries.Sediments.SimpleMultiG","text":"SimpleMultiG(grid; \n             fast_decay_rate::FT = 2/day,\n             slow_decay_rate::FT = 0.2/day,\n             fast_redfield::FT = 0.1509,\n             slow_redfield::FT = 0.13,\n             fast_fraction::FT = 0.74,\n             slow_fraction::FT = 0.26,\n             refactory_fraction::FT = 0.1,\n             nitrate_oxidation_params::P1 = (A = - 1.9785, B = 0.2261, C = -0.0615, D = -0.0289, E = - 0.36109, F = - 0.0232),\n             denitrifcaiton_params::P2 = (A = - 3.0790, B = 1.7509, C = 0.0593, D = - 0.1923, E = 0.0604, F = 0.0662),\n             anoxic_params::P3 = (A = - 3.9476, B = 2.6269, C = - 0.2426, D = -1.3349, E = 0.1826, F = - 0.0143),\n             depth = abs(znode(1, grid, Face())),\n             solid_dep_params::P4 = (A = 0.233, B = 0.336, C = 982, D = - 1.548, depth = depth))\n\nReturns a single layer \"multi G\" sediment model (SimpleMultiG) on grid where parameters can be optionally specified.\n\nThe model is a single layer (i.e. does not include porous diffusion) model with three classes of sediment organic matter which decay at three different rates (fast, slow, refactory). The nitrifcation/denitrifcation/anoxic mineralisation fractions default to the parameterisation of Soetaert et al. 2000 (https://doi.org/10.1016/S0012-8252(00)00004-0).\n\nThis model has not yet been validated or compared to observational data. The variety of degridation processes is likely  to be strongly dependent on oxygen availability (https://bg.copernicus.org/articles/6/1273/2009/bg-6-1273-2009.pdf) so it will therefore be important to also thoghroy validate the oxygen model (also currently limited).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Box-Model","page":"Library","title":"Box Model","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.BoxModels]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.BoxModels","page":"Library","title":"OceanBioME.BoxModels","text":"Integrate biogeochemical models on a single point\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.BoxModels.SaveBoxModel","page":"Library","title":"OceanBioME.BoxModels.SaveBoxModel","text":"SaveBoxModel(filepath::FP)\n\nConstruct object to save box model outputs at filepath.\n\nArguments: filepath - path to save results to\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Oceananigans.Fields.set!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Fields.set!","text":"set!(model::BoxModel; kwargs...)\n\nSet the values for a BoxModel\n\nArguments: model - the model to set the arguments for Keyword Arguments: variable and value pairs to set\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.Simulations.run!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Simulations.run!","text":"run!(model::BoxModel; feedback_interval = 1000, save_interval = Inf, save = nothing)\n\nRun a box model\n\nArguments: model - the BoxModel to solve\n\nKeyword Arguments\n\nfeedback_interval: how often (number of iterations) to display progress\nsave_interval: how often (number of iterations) to save output\nsave: SaveBoxModel object to specify how to save output\n\nTODO: should abstract out to simulation like Oceananians to add e.g. callbacks\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"appendix/params/#Parameters","page":"Overview","title":"Parameters","text":"","category":"section"},{"location":"appendix/params/","page":"Overview","title":"Overview","text":"These pages contain most of the parameters used in the models included in OceanBioME.jl for ease of reference.","category":"page"},{"location":"appendix/params/","page":"Overview","title":"Overview","text":"At some point I will write a script that presents them in a better way.","category":"page"},{"location":"model_components/individuals/#individuals","page":"Overview","title":"Individuals","text":"","category":"section"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"The effects of individuals can be modelled in OceanBioME. We have implemented this through custom dynamics in the Lagrangian Particle tracking feature of Oceananigans. We have extended these functionalities to make it easier to implement \"active\" particles which interact with the tracers. We have then implemented a model of sugar kelp which can be followed as an example of using this functionality.","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"To setup particles first create a particle struct with the desired properties, e.g.:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"DocTestSetup = quote\n    using OceanBioME.Particles: BiogeochemicalParticles, get_node\n    using Oceananigans.Fields: interpolate\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"struct GrowingParticles{FT, VT} <: BiogeochemicalParticles \n    nutrients_half_saturation :: FT\n\n    size :: VT\n    nitrate_uptake :: VT\n\n    x :: VT\n    y :: VT\n    z :: VT\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"You then need to overload particular functions to integrate the growth, so they need to first be imported:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"import Oceananigans.Biogeochemistry: update_tendencies!\nimport Oceananigans.LagrangianParticleTracking: update_particle_properties!, _advect_particles!","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"First, to integrate the particles properties we overload update_particle_properties, in this fictitious case we will have a Mondo-quota nutrient uptake and growth:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"\nfunction update_particle_properties!(particles::GrowingParticles, model, bgc, Δt)\n    @inbounds for p in 1:length(particles)\n        nutrients = @inbounds interpolate(model.tracers.NO₃, particle.x[p], particle.y[p], particle.z[p])\n\n        uptake = nutrients / (particle.nutrients_half_saturation + nutrients)\n\n        particles.size[p] += uptake * Δt\n        particles.nitrate_uptake[p] = uptake\n    end\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"In this example the particles will not move around, and are only integrated on a single thread. For a more comprehensive example see the Sugar Kelp implementation. We then need to update the tracer tendencies to match the nutrients' uptake:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"\nfunction update_tendencies!(bgc, particles::GrowingParticles, model)\n    @inbounds for p in 1:length(particles)\n        # here we use an OceanBioME utility to find the nearest nodes to apply the tendency to\n        nodes, normfactor = @inbounds get_nearest_nodes(particles.x[p], particles.y[p], particles.z[p], model.grid, (Center(), Center(), Center()))\n\n        for (i, j, k, d) in nodes \n            # Reflect back on Bounded boundaries or wrap around for Periodic boundaries\n            i, j, k = (get_node(TX(), i, grid.Nx), get_node(TY(), j, grid.Ny), get_node(TZ(), k, grid.Nz))\n\n            node_volume = volume(i, j, k, grid, LX(), LY(), LZ())\n            @inbounds model.timestepper.Gⁿ.NO₃[i, j, k] += particles.nitrate_uptake[p] / (d * node_volume)\n        end\n    end\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"Now we can just plug this into any biogeochemical model setup to have particles (currently NPZD and LOBSTER):","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"# Start the particles randomly distributed, floating on the surface\nLx, Ly, Lz = 1000, 1000, 100\n\ngrid = RectilinearGrid(; size = (64, 64, 16), extent = (Lx, Ly, Lz))\n\nparticles = GrowingParticles(0.5, zeros(3), zeros(3), rand(3) * Lx, rand(3) * Ly, zeros(3))\n\nbiogeochemistry = LOBSTER(; grid, particles)","category":"page"},{"location":"model_components/individuals/slatissima/#SLatissima","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar kelp (Saccharina latissima) individuals","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"We have implemented a model of sugar kelp growth within this spatially infinitesimal Lagrangian particles framework originally based on the model of Ole Jacob Broch, Dag Slagstad (2012) and updated by Ole Jacob Broch, Ingrid Helene Ellingsen, Silje Forbord, Xinxin Wang, Zsolt Volent, Morten Omholt Alver, Aleksander Handå, Kjersti Andresen, Dag Slagstad, Kjell Inge Reitan, Yngvar Olsen, Jorunn Skjermo (2013), Julia Fossberg, Silje Forbord, Ole Jacob Broch, Arne M. Malzahn, Henrice Jansen, Aleksander Handå, Henny Førde, Maria Bergvik, Anne Lise Fleddum, Jorunn Skjermo, Yngvar Olsen (2018), and Ole Jacob Broch, Morten Omholt Alver, Trine Bekkby, Hege Gundersen, Silje Forbord, Aleksander Handå, Jorunn Skjermo, Kasper Hancke (2019). This is the same model we passively forced in J. Strong-Wright, J.R. Taylor (2022). ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The model tracks three variables, the frond area, A (dm²), carbon reserve, C (gC / gSW), and nitrate reserve, N (gN / gSW). The growth depends on the nitrate (and optionally ammonia) availability in the water, the temperature, and light availability. The minimum required coupling is with nitrates so the model can be coupled with an NPZD model, but can optionally uptake ammonia, DIC (CO₂), oxygen, and release dissolved organic matter (from exudation) and large detritus.  ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Results could look something like this (from J. Strong-Wright, J.R. Taylor (2022)): (Image: Example A, N, and C profiles from [StrongWright2022](@cite))","category":"page"},{"location":"appendix/params/LOBSTER/#LOBSTER","page":"LOBSTER","title":"LOBSTER","text":"","category":"section"},{"location":"appendix/params/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Comming soon","category":"page"},{"location":"model_components/biogeochemical/NPZ/#NPZD","page":"NPZD","title":"Nutrient Phytoplankton Zooplankton Detritus (NPZD) model","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"The provided NPZD model is the low complexity model of Angela M. Kuhn, Katja Fennel, Jann Paul Mattern (2015).","category":"page"},{"location":"appendix/function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"appendix/function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"model_components/light/#light","page":"Light attenuation models","title":"Light attenuation models","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Nearly all BGC models require some model of the attenuation of PAR through the water. Usually this depends on the concentration of chlorophyll in the water (in phytoplankton), and may depend on the concentration of coloured dissolved organic matter or particulates.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"We currently have two models of light attenuation, a two band model by P. Karleskind, M. Lévy, L. Memery (2011) and the more widely used three band model by André Morel (1988). As the light level is diagnostic of the phytoplankton concentration these models are implemented with the light level as various auxiliary fields which are updated with callbacks within the biogeochemical model.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Models requiring light attenuation models will set these up automatically, for example LOBSTER sets light_attenuation_model = TwoBandPhotosyntheticallyActiveRatiation(). You may choose others. Additionally, you can pass the surface PAR as a function of horizontal position and time. The default for LOBSTER is (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))).","category":"page"},{"location":"appendix/params/PISCES/#PISCES","page":"PISCES","title":"PISCES","text":"","category":"section"},{"location":"appendix/params/PISCES/","page":"PISCES","title":"PISCES","text":"f = open(\"../../../../src/Models/Biogeochemistry/PISCES/parameters.jl\")\nprintln(read(f, String))","category":"page"},{"location":"model_components/air-sea-gas/#air-sea-gas","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"We currently have one air-sea gas exchange model implemented. The model, proposed by R. Wanninkhof (1992), calculates the solubility of the gas in the water dependent on the temperature and salinity, and calculates the flux depending on the solubility and mixing from the wind.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Currently, the parameters for CO₂ and oxygen are included, but it would be very straightforward to add the parameters given in the original publication for other gases (e.g. inert tracers of other nutrients such as N₂). We also currently have a very simple formulation of the gas transfer velocity which depends on an average wind speed, but it would straightforwardly be expanded to permit variable wind speed (e.g. to simulate enhanced exchange from storms).","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"It is straightforward to set up a boundary as an air-sea gas exchange:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"CO₂_flux = GasExchange(; gas = :CO₂)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Where the symbol specifies the exchanged gas (currently :CO₂ or :O₂). This can then be passed in the setup of a BGC model, for example:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry = LOBSTER(; grid,\n                                                          carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"If the temperature and salinity are not included in the model they can be passed as functions:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = t_function, salinity = s_function)","category":"page"},{"location":"model_components/biogeochemical/#bgc_models","page":"Overview","title":"Biogeochemical Models","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Biogeochemical (BGC) models can be used within the Oceananigans biogeochemistry framework or as stand alone box models. All BGC models should be setup in the same way so that they can easily be substituted for each other.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"For details of the BGC models currently implemented please see the following pages.","category":"page"},{"location":"model_components/biogeochemical/#Oceananigans-setup","page":"Overview","title":"Oceananigans setup","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"At the simplest level all that is required to setup a BGC model is to pass it to the Oceananigans model setup:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"model = NonhydrostaticModel(; grid,\n                              ...\n                              biogeochemistry = MODEL_NAME(; grid))","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Where MODEL_NAME is the name of the model, you may also need to pass other parameters like:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"MODEL_NAME(; grid, growth_rate = 10.0)","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"This will set up the required tracers and auxiliary fields, and you may also set boundary conditions or additional forcing through the normal Oceananigans setup. ","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Models usually have a default light attenuation model specified, these may be substituted easily by passing different models as parameters as above.","category":"page"},{"location":"quick_start/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides biogeochemical models to plug into Oceananigans, for example this code will run one month of a single column, 7 variable (P, Z, sPOM, bPOM, DOM, NO₃, NH₄) biogeochemical situation with constant forcing.","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"DocTestSetup = quote\n    using OceanBioME, Oceananigans, CairoMakie\n    using Oceananigans.Units\nend","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"grid = RectilinearGrid(size=(10, ), extent=(200, ), topology=(Flat, Flat, Bounded))\n\nPAR = CenterField(grid)\n\nmodel = NonhydrostaticModel(\n    grid = grid,\n    biogeochemistry = LOBSTER(; grid),\n    auxiliary_fields = (; PAR)\n)\n\nset!(model, P = 0.001, Z = 0.001, NO₃ = 1, NH₄ = 0.01)\n\nsimulation = Simulation(model; Δt=1minute, stop_time=30days)\n\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, model.tracers, filename = \"quickstart.jld2\", schedule = TimeInterval(0.5days), overwrite_existing = true)\n\nrun!(simulation)\n\n# output\n[ Info: Initializing simulation...\n[ Info:     ... simulation initialization complete (5.353 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (2.098 minutes).\n[ Info: Simulation is stopping. Model time 30 days has hit or exceeded simulation stop time 30 days.\n","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"This isn't quite as simple as it could be as it records the output so that we can visualize it:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"\nphytoplankton = FieldTimeSeries(\"quickstart.jld2\", \"P\")\nnitrates = FieldTimeSeries(\"quickstart.jld2\", \"NO₃\")\n\nfig = Figure()\nax1 = Axis(fig[1, 1], xlabel=\"Day\", ylabel=\"Depth (m)\", title=\"Phytoplankton (mmol N/m³)\")\nax2 = Axis(fig[1, 2], xlabel=\"Day\", ylabel=\"Depth (m)\", title=\"Nitrate (mmol N/m³)\")\n\nhm1 = heatmap!(ax1, phytoplankton.times/days, grid.zᵃᵃᶜ[1:10], phytoplankton[1, 1, 1:end, 1:end])\nhm2 = heatmap!(ax2, nitrates.times/days, grid.zᵃᵃᶜ[1:10], nitrates[1, 1, 1:end, 1:end])\n\nsave(\"quickstart.png\", fig);\n# output","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"(Image: Heatmaps of phytoplankton and nitrate concentration showing phytoplankton growth and nitrate consumption)","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides the tools to add to this, for example adding a carbonate chemistry model, or sediment at the bottom of the model. Please have a look at the rest of the examples to explore these options.","category":"page"},{"location":"model_components/utils/#utils","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We provide some utilities that may be useful.","category":"page"},{"location":"model_components/utils/#Time-step-adaptation","page":"Utilities","title":"Time step adaptation","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We have added a few additional utilities which extend the capabilities of Oceananigans' time step wizard. For column models where there is no water velocity we have added functions to calculate the advection timescale from the biogeochemical model defined sinking velocities. This could be used by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Additionally, in a column model you may have a functional definition for the viscosity, so we define an additional diffusion timescale function:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_diffusion_timescale = column_diffusion_timescale, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Finally, sinking may be more limiting than the normal advective CFL conditions so, we have an additional cell advection timescale defined for 3D models:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.6, diffusive_cfl = 0.5, max_change = 1.5, min_change = 0., cell_advection_timescale = sinking_adveciton_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/#Negative-tracer-detection","page":"Utilities","title":"Negative tracer detection","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"As a temporary measure we have implemented a callback to either detect negative tracers and either scale a conserved group, force them back to zero, or throw an error. Please see the numerical implementations' page for details. This can be set up by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection! = ScaleNegativeTracers(tracers = (:P, :Z, :N))\nsimulation.callbacks[:neg] = Callback(negativity_protection!; callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"You may also pass a scale factor for each component (e.g. in case they have different redfield raitos):","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection! = ScaleNegativeTracers(tracers = (:P, :Z, :D), scalefactors = (P = 1, Z = 1, D = 2))\nsimulation.callbacks[:neg] = Callback(negativity_protection!; callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Here you should carefully consider which tracers form a conserved group (if at all). Alternatively, force to zero by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"simulation.callbacks[:neg] = Callback(OceanBioME.no_negative_tracers!, callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"or throw an error:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"simulation.callbacks[:neg] = Callback(OceanBioME.error_on_neg!, callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"The latter two both optionally take a named tuple of parameters which may include exclude which can be a tuple of tracer names (Symbols) which are allowed to be negative.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/data_forced.jl\"","category":"page"},{"location":"generated/data_forced/#One-dimensional-column-forced-by-external-data-with-carbonate-chemistry","page":"Data forced column model","title":"One dimensional column forced by external data with carbonate chemistry","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This demonstrates:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"How to setup OceanBioME's biogeochemical models\nHow to load external forcing data\nHow to run with optional tracer sets such as carbonate chemistry\nHow to setup a non-uniform grid for better near surface resolution\nHow to visualise results","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This is forced by mixing layer depth and surface photosynthetically available radiation (PAR) data from the Mercator Ocean model and NASA VIIRS observations","category":"page"},{"location":"generated/data_forced/#Install-dependencies","page":"Data forced column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, Printf, Plots, GLMakie, NetCDF, JLD2, DataDeps, Interpolations\"","category":"page"},{"location":"generated/data_forced/#Model-setup","page":"Data forced column model","title":"Model setup","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First load the required packages","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using Oceananigans, Random, Printf, NetCDF, Interpolations, DataDeps\nusing Oceananigans.Units: second, minute, minutes, hour, hours, day, days, year, years\nusing Oceananigans.Operators: ∂zᶜᶜᶜ\nusing OceanBioME","category":"page"},{"location":"generated/data_forced/#Load-external-forcing-data","page":"Data forced column model","title":"Load external forcing data","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Loading the forcing data from our online copy","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"dd = DataDep(\n    \"example_data\",\n    \"example data from subpolar re analysis and observational products\",\n    \"https://github.com/OceanBioME/OceanBioME_example_data/raw/main/subpolar.nc\"\n)\nregister(dd)\nfilename = datadep\"example_data/subpolar.nc\"\ntimes = ncread(filename, \"time\")\ntemp = ncread(filename, \"temp\")\nsalinity = ncread(filename, \"so\")\nmld = ncread(filename, \"mld\")\npar = ncread(filename, \"par\")\n\ntemperature_itp = LinearInterpolation(times, temp)\nsalinity_itp = LinearInterpolation(times, salinity)\nmld_itp = LinearInterpolation(times, mld)\nPAR_itp = LinearInterpolation(times, par)\n\nt_function(x, y, z, t) = temperature_itp(mod(t, 364days))\ns_function(x, y, z, t) = salinity_itp(mod(t, 364days))\nsurface_PAR(x, y, t) = PAR_itp(mod(t, 364days))\nκₜ(x, y, z, t) = 2e-2*max(1-(z+mld_itp(mod(t,364days))/2)^2/(mld_itp(mod(t,364days))/2)^2,0)+1e-4","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"κₜ (generic function with 1 method)","category":"page"},{"location":"generated/data_forced/#Grid-and-PAR-field","page":"Data forced column model","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Define the grid (in this case a non uniform grid for better resolution near the surface) and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Nz = 33\nLz = 600\nrefinement = 10\nstretching = 5.754\nh(k) = (k - 1) / Nz\nζ₀(k) = 1 + (h(k) - 1) / refinement\nΣ(k) = (1 - exp(-stretching * h(k))) / (1 - exp(-stretching))\nz_faces(k) = Lz * (ζ₀(k) * Σ(k) - 1)\n\ngrid = RectilinearGrid(size = (1, 1, Nz), x = (0, 20), y = (0, 20), z = z_faces)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"1×1×33 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-600.0, 0.0] variably spaced with min(Δz)=2.18055, max(Δz)=86.9713","category":"page"},{"location":"generated/data_forced/#Biogeochemical-and-Oceananigans-model","page":"Data forced column model","title":"Biogeochemical and Oceananigans model","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Here we instantiate the LOBSTER model with carbonate chemistry and a surface flux of DIC (CO₂)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = t_function, salinity = s_function)\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν=κₜ, κ=κₜ),\n                              biogeochemistry = LOBSTER(; grid,\n                                                          surface_phytosynthetically_active_radiation = surface_PAR,\n                                                          carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              advection = nothing,)\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 11.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2400.0)","category":"page"},{"location":"generated/data_forced/#Simulation","page":"Data forced column model","title":"Simulation","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Show the progress of the simulation\nStore the output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implimentation page)\nAdapt the timestep length to reduce the run time","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"simulation = Simulation(model, Δt=1minutes, stop_time=100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, IterationInterval(100))\n\nfilename = \"data_forced\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model,\n                                                        merge(model.tracers, model.auxiliary_fields),\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"JLD2OutputWriter scheduled on TimeInterval(1 day):\n├── filepath: ./data_forced.jld2\n├── 10 outputs: (NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk, PAR)\n├── array type: Array{Float64}\n├── including: [:grid, :coriolis, :buoyancy, :closure]\n└── max filesize: Inf YiB","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"TODO: make tendency callback to force no NaNs in tendencies","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"scale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())\n\nwizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_diffusion_timescale = column_diffusion_timescale, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Callback of TimeStepWizard(cfl=0.2, max_Δt=Inf, min_Δt=0.0) on IterationInterval(10)","category":"page"},{"location":"generated/data_forced/#Run!","page":"Data forced column model","title":"Run!","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Finally we run the simulation","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"run!(simulation)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 1 minute, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (7.707 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (2.438 minutes).\nIteration: 0100, time: 5.043 hours, Δt: 3.140 minutes, wall time: 2.578 minutes\nIteration: 0200, time: 10.277 hours, Δt: 3.140 minutes, wall time: 2.588 minutes\nIteration: 0300, time: 15.510 hours, Δt: 3.140 minutes, wall time: 2.597 minutes\nIteration: 0400, time: 20.743 hours, Δt: 3.140 minutes, wall time: 2.607 minutes\nIteration: 0500, time: 1.081 days, Δt: 3.140 minutes, wall time: 2.616 minutes\nIteration: 0600, time: 1.299 days, Δt: 3.140 minutes, wall time: 2.626 minutes\nIteration: 0700, time: 1.517 days, Δt: 3.140 minutes, wall time: 2.636 minutes\nIteration: 0800, time: 1.735 days, Δt: 3.140 minutes, wall time: 2.645 minutes\nIteration: 0900, time: 1.953 days, Δt: 3.140 minutes, wall time: 2.655 minutes\nIteration: 1000, time: 2.170 days, Δt: 3.140 minutes, wall time: 2.664 minutes\nIteration: 1100, time: 2.388 days, Δt: 3.140 minutes, wall time: 2.673 minutes\nIteration: 1200, time: 2.606 days, Δt: 3.140 minutes, wall time: 2.683 minutes\nIteration: 1300, time: 2.824 days, Δt: 3.140 minutes, wall time: 2.692 minutes\nIteration: 1400, time: 3.041 days, Δt: 3.140 minutes, wall time: 2.702 minutes\nIteration: 1500, time: 3.259 days, Δt: 3.140 minutes, wall time: 2.711 minutes\nIteration: 1600, time: 3.478 days, Δt: 3.140 minutes, wall time: 2.721 minutes\nIteration: 1700, time: 3.696 days, Δt: 3.140 minutes, wall time: 2.730 minutes\nIteration: 1800, time: 3.914 days, Δt: 3.140 minutes, wall time: 2.739 minutes\nIteration: 1900, time: 4.131 days, Δt: 3.140 minutes, wall time: 2.749 minutes\nIteration: 2000, time: 4.349 days, Δt: 3.140 minutes, wall time: 2.758 minutes\nIteration: 2100, time: 4.567 days, Δt: 3.140 minutes, wall time: 2.768 minutes\nIteration: 2200, time: 4.785 days, Δt: 3.140 minutes, wall time: 2.777 minutes\nIteration: 2300, time: 5.002 days, Δt: 3.140 minutes, wall time: 2.787 minutes\nIteration: 2400, time: 5.220 days, Δt: 3.140 minutes, wall time: 2.796 minutes\nIteration: 2500, time: 5.438 days, Δt: 3.140 minutes, wall time: 2.806 minutes\nIteration: 2600, time: 5.656 days, Δt: 3.140 minutes, wall time: 2.815 minutes\nIteration: 2700, time: 5.874 days, Δt: 3.140 minutes, wall time: 2.824 minutes\nIteration: 2800, time: 6.092 days, Δt: 3.140 minutes, wall time: 2.834 minutes\nIteration: 2900, time: 6.310 days, Δt: 3.140 minutes, wall time: 2.844 minutes\nIteration: 3000, time: 6.528 days, Δt: 3.140 minutes, wall time: 2.854 minutes\nIteration: 3100, time: 6.746 days, Δt: 3.140 minutes, wall time: 2.864 minutes\nIteration: 3200, time: 6.964 days, Δt: 3.140 minutes, wall time: 2.873 minutes\nIteration: 3300, time: 7.181 days, Δt: 3.140 minutes, wall time: 2.883 minutes\nIteration: 3400, time: 7.399 days, Δt: 3.140 minutes, wall time: 2.893 minutes\nIteration: 3500, time: 7.617 days, Δt: 3.140 minutes, wall time: 2.902 minutes\nIteration: 3600, time: 7.835 days, Δt: 3.140 minutes, wall time: 2.911 minutes\nIteration: 3700, time: 8.052 days, Δt: 3.140 minutes, wall time: 2.921 minutes\nIteration: 3800, time: 8.270 days, Δt: 3.140 minutes, wall time: 2.930 minutes\nIteration: 3900, time: 8.488 days, Δt: 3.140 minutes, wall time: 2.939 minutes\nIteration: 4000, time: 8.706 days, Δt: 3.140 minutes, wall time: 2.949 minutes\nIteration: 4100, time: 8.925 days, Δt: 3.140 minutes, wall time: 2.958 minutes\nIteration: 4200, time: 9.142 days, Δt: 3.140 minutes, wall time: 2.968 minutes\nIteration: 4300, time: 9.360 days, Δt: 3.140 minutes, wall time: 2.978 minutes\nIteration: 4400, time: 9.578 days, Δt: 3.140 minutes, wall time: 2.987 minutes\nIteration: 4500, time: 9.796 days, Δt: 3.140 minutes, wall time: 2.996 minutes\nIteration: 4600, time: 10.013 days, Δt: 3.140 minutes, wall time: 3.006 minutes\nIteration: 4700, time: 10.231 days, Δt: 3.140 minutes, wall time: 3.015 minutes\nIteration: 4800, time: 10.449 days, Δt: 3.140 minutes, wall time: 3.025 minutes\nIteration: 4900, time: 10.667 days, Δt: 3.140 minutes, wall time: 3.033 minutes\nIteration: 5000, time: 10.885 days, Δt: 3.140 minutes, wall time: 3.042 minutes\nIteration: 5100, time: 11.102 days, Δt: 3.140 minutes, wall time: 3.052 minutes\nIteration: 5200, time: 11.321 days, Δt: 3.140 minutes, wall time: 3.061 minutes\nIteration: 5300, time: 11.539 days, Δt: 3.140 minutes, wall time: 3.071 minutes\nIteration: 5400, time: 11.757 days, Δt: 3.140 minutes, wall time: 3.080 minutes\nIteration: 5500, time: 11.975 days, Δt: 3.140 minutes, wall time: 3.089 minutes\nIteration: 5600, time: 12.192 days, Δt: 3.140 minutes, wall time: 3.099 minutes\nIteration: 5700, time: 12.410 days, Δt: 3.140 minutes, wall time: 3.108 minutes\nIteration: 5800, time: 12.628 days, Δt: 3.140 minutes, wall time: 3.118 minutes\nIteration: 5900, time: 12.846 days, Δt: 3.140 minutes, wall time: 3.127 minutes\nIteration: 6000, time: 13.063 days, Δt: 3.140 minutes, wall time: 3.136 minutes\nIteration: 6100, time: 13.281 days, Δt: 3.140 minutes, wall time: 3.146 minutes\nIteration: 6200, time: 13.499 days, Δt: 3.140 minutes, wall time: 3.156 minutes\nIteration: 6300, time: 13.717 days, Δt: 3.140 minutes, wall time: 3.166 minutes\nIteration: 6400, time: 13.935 days, Δt: 3.140 minutes, wall time: 3.175 minutes\nIteration: 6500, time: 14.153 days, Δt: 3.140 minutes, wall time: 3.184 minutes\nIteration: 6600, time: 14.371 days, Δt: 3.140 minutes, wall time: 3.194 minutes\nIteration: 6700, time: 14.589 days, Δt: 3.140 minutes, wall time: 3.203 minutes\nIteration: 6800, time: 14.807 days, Δt: 3.140 minutes, wall time: 3.213 minutes\nIteration: 6900, time: 15.024 days, Δt: 3.140 minutes, wall time: 3.222 minutes\nIteration: 7000, time: 15.242 days, Δt: 3.140 minutes, wall time: 3.232 minutes\nIteration: 7100, time: 15.460 days, Δt: 3.140 minutes, wall time: 3.241 minutes\nIteration: 7200, time: 15.678 days, Δt: 3.140 minutes, wall time: 3.251 minutes\nIteration: 7300, time: 15.896 days, Δt: 3.140 minutes, wall time: 3.260 minutes\nIteration: 7400, time: 16.113 days, Δt: 3.140 minutes, wall time: 3.270 minutes\nIteration: 7500, time: 16.331 days, Δt: 3.140 minutes, wall time: 3.280 minutes\nIteration: 7600, time: 16.549 days, Δt: 3.140 minutes, wall time: 3.289 minutes\nIteration: 7700, time: 16.768 days, Δt: 3.140 minutes, wall time: 3.298 minutes\nIteration: 7800, time: 16.986 days, Δt: 3.140 minutes, wall time: 3.308 minutes\nIteration: 7900, time: 17.203 days, Δt: 3.140 minutes, wall time: 3.317 minutes\nIteration: 8000, time: 17.421 days, Δt: 3.140 minutes, wall time: 3.327 minutes\nIteration: 8100, time: 17.639 days, Δt: 3.140 minutes, wall time: 3.336 minutes\nIteration: 8200, time: 17.857 days, Δt: 3.140 minutes, wall time: 3.346 minutes\nIteration: 8300, time: 18.074 days, Δt: 3.140 minutes, wall time: 3.356 minutes\nIteration: 8400, time: 18.292 days, Δt: 3.140 minutes, wall time: 3.365 minutes\nIteration: 8500, time: 18.510 days, Δt: 3.140 minutes, wall time: 3.375 minutes\nIteration: 8600, time: 18.728 days, Δt: 3.140 minutes, wall time: 3.384 minutes\nIteration: 8700, time: 18.946 days, Δt: 3.140 minutes, wall time: 3.393 minutes\nIteration: 8800, time: 19.164 days, Δt: 3.140 minutes, wall time: 3.403 minutes\nIteration: 8900, time: 19.382 days, Δt: 3.140 minutes, wall time: 3.412 minutes\nIteration: 9000, time: 19.600 days, Δt: 3.140 minutes, wall time: 3.422 minutes\nIteration: 9100, time: 19.818 days, Δt: 3.140 minutes, wall time: 3.431 minutes\nIteration: 9200, time: 20.035 days, Δt: 3.140 minutes, wall time: 3.440 minutes\nIteration: 9300, time: 20.253 days, Δt: 3.140 minutes, wall time: 3.450 minutes\nIteration: 9400, time: 20.471 days, Δt: 3.140 minutes, wall time: 3.460 minutes\nIteration: 9500, time: 20.689 days, Δt: 3.140 minutes, wall time: 3.469 minutes\nIteration: 9600, time: 20.907 days, Δt: 3.140 minutes, wall time: 3.478 minutes\nIteration: 9700, time: 21.124 days, Δt: 3.140 minutes, wall time: 3.489 minutes\nIteration: 9800, time: 21.342 days, Δt: 3.140 minutes, wall time: 3.497 minutes\nIteration: 9900, time: 21.560 days, Δt: 3.140 minutes, wall time: 3.507 minutes\nIteration: 10000, time: 21.778 days, Δt: 3.140 minutes, wall time: 3.516 minutes\nIteration: 10100, time: 21.997 days, Δt: 3.140 minutes, wall time: 3.525 minutes\nIteration: 10200, time: 22.214 days, Δt: 3.140 minutes, wall time: 3.536 minutes\nIteration: 10300, time: 22.432 days, Δt: 3.140 minutes, wall time: 3.545 minutes\nIteration: 10400, time: 22.650 days, Δt: 3.140 minutes, wall time: 3.554 minutes\nIteration: 10500, time: 22.868 days, Δt: 3.140 minutes, wall time: 3.564 minutes\nIteration: 10600, time: 23.085 days, Δt: 3.140 minutes, wall time: 3.573 minutes\nIteration: 10700, time: 23.303 days, Δt: 3.140 minutes, wall time: 3.583 minutes\nIteration: 10800, time: 23.521 days, Δt: 3.140 minutes, wall time: 3.592 minutes\nIteration: 10900, time: 23.739 days, Δt: 3.140 minutes, wall time: 3.601 minutes\nIteration: 11000, time: 23.957 days, Δt: 3.140 minutes, wall time: 3.611 minutes\nIteration: 11100, time: 24.174 days, Δt: 3.140 minutes, wall time: 3.620 minutes\nIteration: 11200, time: 24.392 days, Δt: 3.140 minutes, wall time: 3.630 minutes\nIteration: 11300, time: 24.611 days, Δt: 3.140 minutes, wall time: 3.639 minutes\nIteration: 11400, time: 24.829 days, Δt: 3.140 minutes, wall time: 3.649 minutes\nIteration: 11500, time: 25.046 days, Δt: 3.140 minutes, wall time: 3.658 minutes\nIteration: 11600, time: 25.264 days, Δt: 3.140 minutes, wall time: 3.667 minutes\nIteration: 11700, time: 25.482 days, Δt: 3.140 minutes, wall time: 3.677 minutes\nIteration: 11800, time: 25.700 days, Δt: 3.140 minutes, wall time: 3.686 minutes\nIteration: 11900, time: 25.918 days, Δt: 3.140 minutes, wall time: 3.695 minutes\nIteration: 12000, time: 26.135 days, Δt: 3.140 minutes, wall time: 3.705 minutes\nIteration: 12100, time: 26.353 days, Δt: 3.140 minutes, wall time: 3.715 minutes\nIteration: 12200, time: 26.571 days, Δt: 3.140 minutes, wall time: 3.724 minutes\nIteration: 12300, time: 26.789 days, Δt: 3.140 minutes, wall time: 3.733 minutes\nIteration: 12400, time: 27.007 days, Δt: 3.140 minutes, wall time: 3.743 minutes\nIteration: 12500, time: 27.225 days, Δt: 3.140 minutes, wall time: 3.752 minutes\nIteration: 12600, time: 27.443 days, Δt: 3.140 minutes, wall time: 3.762 minutes\nIteration: 12700, time: 27.661 days, Δt: 3.140 minutes, wall time: 3.771 minutes\nIteration: 12800, time: 27.879 days, Δt: 3.140 minutes, wall time: 3.780 minutes\nIteration: 12900, time: 28.096 days, Δt: 3.140 minutes, wall time: 3.790 minutes\nIteration: 13000, time: 28.314 days, Δt: 3.140 minutes, wall time: 3.799 minutes\nIteration: 13100, time: 28.532 days, Δt: 3.140 minutes, wall time: 3.808 minutes\nIteration: 13200, time: 28.750 days, Δt: 3.140 minutes, wall time: 3.818 minutes\nIteration: 13300, time: 28.968 days, Δt: 3.140 minutes, wall time: 3.827 minutes\nIteration: 13400, time: 29.185 days, Δt: 3.140 minutes, wall time: 3.837 minutes\nIteration: 13500, time: 29.403 days, Δt: 3.140 minutes, wall time: 3.846 minutes\nIteration: 13600, time: 29.621 days, Δt: 3.140 minutes, wall time: 3.856 minutes\nIteration: 13700, time: 29.840 days, Δt: 3.140 minutes, wall time: 3.865 minutes\nIteration: 13800, time: 30.057 days, Δt: 3.140 minutes, wall time: 3.874 minutes\nIteration: 13900, time: 30.275 days, Δt: 3.140 minutes, wall time: 3.884 minutes\nIteration: 14000, time: 30.493 days, Δt: 3.140 minutes, wall time: 3.893 minutes\nIteration: 14100, time: 30.711 days, Δt: 3.140 minutes, wall time: 3.902 minutes\nIteration: 14200, time: 30.929 days, Δt: 3.140 minutes, wall time: 3.912 minutes\nIteration: 14300, time: 31.146 days, Δt: 3.140 minutes, wall time: 3.923 minutes\nIteration: 14400, time: 31.364 days, Δt: 3.140 minutes, wall time: 3.933 minutes\nIteration: 14500, time: 31.582 days, Δt: 3.140 minutes, wall time: 3.942 minutes\nIteration: 14600, time: 31.800 days, Δt: 3.140 minutes, wall time: 3.951 minutes\nIteration: 14700, time: 32.017 days, Δt: 3.140 minutes, wall time: 3.961 minutes\nIteration: 14800, time: 32.235 days, Δt: 3.140 minutes, wall time: 3.971 minutes\nIteration: 14900, time: 32.454 days, Δt: 3.140 minutes, wall time: 3.980 minutes\nIteration: 15000, time: 32.672 days, Δt: 3.140 minutes, wall time: 3.989 minutes\nIteration: 15100, time: 32.890 days, Δt: 3.140 minutes, wall time: 3.999 minutes\nIteration: 15200, time: 33.107 days, Δt: 3.140 minutes, wall time: 4.008 minutes\nIteration: 15300, time: 33.325 days, Δt: 3.140 minutes, wall time: 4.017 minutes\nIteration: 15400, time: 33.543 days, Δt: 3.140 minutes, wall time: 4.027 minutes\nIteration: 15500, time: 33.761 days, Δt: 3.140 minutes, wall time: 4.036 minutes\nIteration: 15600, time: 33.979 days, Δt: 3.140 minutes, wall time: 4.046 minutes\nIteration: 15700, time: 34.196 days, Δt: 3.140 minutes, wall time: 4.055 minutes\nIteration: 15800, time: 34.414 days, Δt: 3.140 minutes, wall time: 4.064 minutes\nIteration: 15900, time: 34.632 days, Δt: 3.140 minutes, wall time: 4.074 minutes\nIteration: 16000, time: 34.850 days, Δt: 3.140 minutes, wall time: 4.083 minutes\nIteration: 16100, time: 35.068 days, Δt: 3.140 minutes, wall time: 4.093 minutes\nIteration: 16200, time: 35.286 days, Δt: 3.140 minutes, wall time: 4.102 minutes\nIteration: 16300, time: 35.504 days, Δt: 3.140 minutes, wall time: 4.111 minutes\nIteration: 16400, time: 35.722 days, Δt: 3.140 minutes, wall time: 4.120 minutes\nIteration: 16500, time: 35.940 days, Δt: 3.140 minutes, wall time: 4.129 minutes\nIteration: 16600, time: 36.157 days, Δt: 3.140 minutes, wall time: 4.139 minutes\nIteration: 16700, time: 36.375 days, Δt: 3.140 minutes, wall time: 4.149 minutes\nIteration: 16800, time: 36.593 days, Δt: 3.140 minutes, wall time: 4.158 minutes\nIteration: 16900, time: 36.811 days, Δt: 3.140 minutes, wall time: 4.168 minutes\nIteration: 17000, time: 37.028 days, Δt: 3.140 minutes, wall time: 4.177 minutes\nIteration: 17100, time: 37.246 days, Δt: 3.140 minutes, wall time: 4.187 minutes\nIteration: 17200, time: 37.464 days, Δt: 3.140 minutes, wall time: 4.196 minutes\nIteration: 17300, time: 37.683 days, Δt: 3.140 minutes, wall time: 4.205 minutes\nIteration: 17400, time: 37.901 days, Δt: 3.140 minutes, wall time: 4.214 minutes\nIteration: 17500, time: 38.118 days, Δt: 3.140 minutes, wall time: 4.224 minutes\nIteration: 17600, time: 38.336 days, Δt: 3.140 minutes, wall time: 4.233 minutes\nIteration: 17700, time: 38.554 days, Δt: 3.140 minutes, wall time: 4.242 minutes\nIteration: 17800, time: 38.772 days, Δt: 3.140 minutes, wall time: 4.251 minutes\nIteration: 17900, time: 38.990 days, Δt: 3.140 minutes, wall time: 4.261 minutes\nIteration: 18000, time: 39.207 days, Δt: 3.140 minutes, wall time: 4.270 minutes\nIteration: 18100, time: 39.425 days, Δt: 3.140 minutes, wall time: 4.280 minutes\nIteration: 18200, time: 39.643 days, Δt: 3.140 minutes, wall time: 4.289 minutes\nIteration: 18300, time: 39.861 days, Δt: 3.140 minutes, wall time: 4.299 minutes\nIteration: 18400, time: 40.078 days, Δt: 3.140 minutes, wall time: 4.308 minutes\nIteration: 18500, time: 40.297 days, Δt: 3.140 minutes, wall time: 4.317 minutes\nIteration: 18600, time: 40.515 days, Δt: 3.140 minutes, wall time: 4.327 minutes\nIteration: 18700, time: 40.733 days, Δt: 3.140 minutes, wall time: 4.336 minutes\nIteration: 18800, time: 40.951 days, Δt: 3.140 minutes, wall time: 4.346 minutes\nIteration: 18900, time: 41.168 days, Δt: 3.140 minutes, wall time: 4.355 minutes\nIteration: 19000, time: 41.386 days, Δt: 3.140 minutes, wall time: 4.364 minutes\nIteration: 19100, time: 41.604 days, Δt: 3.140 minutes, wall time: 4.374 minutes\nIteration: 19200, time: 41.822 days, Δt: 3.140 minutes, wall time: 4.383 minutes\nIteration: 19300, time: 42.039 days, Δt: 3.140 minutes, wall time: 4.393 minutes\nIteration: 19400, time: 42.257 days, Δt: 3.140 minutes, wall time: 4.401 minutes\nIteration: 19500, time: 42.475 days, Δt: 3.140 minutes, wall time: 4.411 minutes\nIteration: 19600, time: 42.693 days, Δt: 3.140 minutes, wall time: 4.420 minutes\nIteration: 19700, time: 42.911 days, Δt: 3.140 minutes, wall time: 4.429 minutes\nIteration: 19800, time: 43.129 days, Δt: 3.140 minutes, wall time: 4.439 minutes\nIteration: 19900, time: 43.347 days, Δt: 3.140 minutes, wall time: 4.448 minutes\nIteration: 20000, time: 43.565 days, Δt: 3.140 minutes, wall time: 4.458 minutes\nIteration: 20100, time: 43.783 days, Δt: 3.140 minutes, wall time: 4.467 minutes\nIteration: 20200, time: 44 days, Δt: 3.140 minutes, wall time: 4.476 minutes\nIteration: 20300, time: 44.218 days, Δt: 3.140 minutes, wall time: 4.486 minutes\nIteration: 20400, time: 44.436 days, Δt: 3.140 minutes, wall time: 4.495 minutes\nIteration: 20500, time: 44.654 days, Δt: 3.140 minutes, wall time: 4.504 minutes\nIteration: 20600, time: 44.872 days, Δt: 3.140 minutes, wall time: 4.514 minutes\nIteration: 20700, time: 45.089 days, Δt: 3.140 minutes, wall time: 4.523 minutes\nIteration: 20800, time: 45.307 days, Δt: 3.140 minutes, wall time: 4.533 minutes\nIteration: 20900, time: 45.526 days, Δt: 3.140 minutes, wall time: 4.542 minutes\nIteration: 21000, time: 45.744 days, Δt: 3.140 minutes, wall time: 4.552 minutes\nIteration: 21100, time: 45.962 days, Δt: 3.140 minutes, wall time: 4.561 minutes\nIteration: 21200, time: 46.179 days, Δt: 3.140 minutes, wall time: 4.570 minutes\nIteration: 21300, time: 46.397 days, Δt: 3.140 minutes, wall time: 4.580 minutes\nIteration: 21400, time: 46.615 days, Δt: 3.140 minutes, wall time: 4.589 minutes\nIteration: 21500, time: 46.833 days, Δt: 3.140 minutes, wall time: 4.598 minutes\nIteration: 21600, time: 47.050 days, Δt: 3.140 minutes, wall time: 4.608 minutes\nIteration: 21700, time: 47.268 days, Δt: 3.140 minutes, wall time: 4.617 minutes\nIteration: 21800, time: 47.486 days, Δt: 3.140 minutes, wall time: 4.627 minutes\nIteration: 21900, time: 47.704 days, Δt: 3.140 minutes, wall time: 4.636 minutes\nIteration: 22000, time: 47.922 days, Δt: 3.140 minutes, wall time: 4.646 minutes\nIteration: 22100, time: 48.140 days, Δt: 3.140 minutes, wall time: 4.655 minutes\nIteration: 22200, time: 48.358 days, Δt: 3.140 minutes, wall time: 4.665 minutes\nIteration: 22300, time: 48.576 days, Δt: 3.140 minutes, wall time: 4.675 minutes\nIteration: 22400, time: 48.794 days, Δt: 3.140 minutes, wall time: 4.684 minutes\nIteration: 22500, time: 49.011 days, Δt: 3.140 minutes, wall time: 4.694 minutes\nIteration: 22600, time: 49.229 days, Δt: 3.140 minutes, wall time: 4.703 minutes\nIteration: 22700, time: 49.447 days, Δt: 3.140 minutes, wall time: 4.712 minutes\nIteration: 22800, time: 49.665 days, Δt: 3.140 minutes, wall time: 4.722 minutes\nIteration: 22900, time: 49.883 days, Δt: 3.140 minutes, wall time: 4.731 minutes\nIteration: 23000, time: 50.100 days, Δt: 3.140 minutes, wall time: 4.741 minutes\nIteration: 23100, time: 50.318 days, Δt: 3.140 minutes, wall time: 4.751 minutes\nIteration: 23200, time: 50.536 days, Δt: 3.140 minutes, wall time: 4.760 minutes\nIteration: 23300, time: 50.754 days, Δt: 3.140 minutes, wall time: 4.769 minutes\nIteration: 23400, time: 50.973 days, Δt: 3.140 minutes, wall time: 4.779 minutes\nIteration: 23500, time: 51.190 days, Δt: 3.140 minutes, wall time: 4.789 minutes\nIteration: 23600, time: 51.408 days, Δt: 3.140 minutes, wall time: 4.798 minutes\nIteration: 23700, time: 51.626 days, Δt: 3.140 minutes, wall time: 4.808 minutes\nIteration: 23800, time: 51.844 days, Δt: 3.140 minutes, wall time: 4.816 minutes\nIteration: 23900, time: 52.061 days, Δt: 3.140 minutes, wall time: 4.826 minutes\nIteration: 24000, time: 52.279 days, Δt: 3.140 minutes, wall time: 4.835 minutes\nIteration: 24100, time: 52.497 days, Δt: 3.140 minutes, wall time: 4.844 minutes\nIteration: 24200, time: 52.715 days, Δt: 3.140 minutes, wall time: 4.854 minutes\nIteration: 24300, time: 52.933 days, Δt: 3.140 minutes, wall time: 4.863 minutes\nIteration: 24400, time: 53.150 days, Δt: 3.140 minutes, wall time: 4.873 minutes\nIteration: 24500, time: 53.369 days, Δt: 3.140 minutes, wall time: 4.883 minutes\nIteration: 24600, time: 53.587 days, Δt: 3.140 minutes, wall time: 4.892 minutes\nIteration: 24700, time: 53.805 days, Δt: 3.140 minutes, wall time: 4.901 minutes\nIteration: 24800, time: 54.022 days, Δt: 3.140 minutes, wall time: 4.911 minutes\nIteration: 24900, time: 54.240 days, Δt: 3.140 minutes, wall time: 4.920 minutes\nIteration: 25000, time: 54.458 days, Δt: 3.140 minutes, wall time: 4.930 minutes\nIteration: 25100, time: 54.676 days, Δt: 3.140 minutes, wall time: 4.939 minutes\nIteration: 25200, time: 54.894 days, Δt: 3.140 minutes, wall time: 4.949 minutes\nIteration: 25300, time: 55.111 days, Δt: 3.140 minutes, wall time: 4.958 minutes\nIteration: 25400, time: 55.329 days, Δt: 3.140 minutes, wall time: 4.967 minutes\nIteration: 25500, time: 55.547 days, Δt: 3.140 minutes, wall time: 4.977 minutes\nIteration: 25600, time: 55.765 days, Δt: 3.140 minutes, wall time: 4.986 minutes\nIteration: 25700, time: 55.983 days, Δt: 3.140 minutes, wall time: 4.996 minutes\nIteration: 25800, time: 56.201 days, Δt: 3.140 minutes, wall time: 5.005 minutes\nIteration: 25900, time: 56.419 days, Δt: 3.140 minutes, wall time: 5.014 minutes\nIteration: 26000, time: 56.637 days, Δt: 3.140 minutes, wall time: 5.024 minutes\nIteration: 26100, time: 56.855 days, Δt: 3.140 minutes, wall time: 5.033 minutes\nIteration: 26200, time: 57.072 days, Δt: 3.140 minutes, wall time: 5.043 minutes\nIteration: 26300, time: 57.290 days, Δt: 3.140 minutes, wall time: 5.052 minutes\nIteration: 26400, time: 57.508 days, Δt: 3.140 minutes, wall time: 5.062 minutes\nIteration: 26500, time: 57.726 days, Δt: 3.140 minutes, wall time: 5.071 minutes\nIteration: 26600, time: 57.944 days, Δt: 3.140 minutes, wall time: 5.080 minutes\nIteration: 26700, time: 58.161 days, Δt: 3.140 minutes, wall time: 5.090 minutes\nIteration: 26800, time: 58.379 days, Δt: 3.140 minutes, wall time: 5.099 minutes\nIteration: 26900, time: 58.597 days, Δt: 3.140 minutes, wall time: 5.109 minutes\nIteration: 27000, time: 58.816 days, Δt: 3.140 minutes, wall time: 5.118 minutes\nIteration: 27100, time: 59.033 days, Δt: 3.140 minutes, wall time: 5.127 minutes\nIteration: 27200, time: 59.251 days, Δt: 3.140 minutes, wall time: 5.137 minutes\nIteration: 27300, time: 59.469 days, Δt: 3.140 minutes, wall time: 5.146 minutes\nIteration: 27400, time: 59.687 days, Δt: 3.140 minutes, wall time: 5.157 minutes\nIteration: 27500, time: 59.905 days, Δt: 3.140 minutes, wall time: 5.166 minutes\nIteration: 27600, time: 60.122 days, Δt: 3.140 minutes, wall time: 5.175 minutes\nIteration: 27700, time: 60.340 days, Δt: 3.140 minutes, wall time: 5.185 minutes\nIteration: 27800, time: 60.558 days, Δt: 3.140 minutes, wall time: 5.195 minutes\nIteration: 27900, time: 60.776 days, Δt: 3.140 minutes, wall time: 5.204 minutes\nIteration: 28000, time: 60.994 days, Δt: 3.140 minutes, wall time: 5.213 minutes\nIteration: 28100, time: 61.212 days, Δt: 3.140 minutes, wall time: 5.223 minutes\nIteration: 28200, time: 61.430 days, Δt: 3.140 minutes, wall time: 5.233 minutes\nIteration: 28300, time: 61.648 days, Δt: 3.140 minutes, wall time: 5.242 minutes\nIteration: 28400, time: 61.866 days, Δt: 3.140 minutes, wall time: 5.252 minutes\nIteration: 28500, time: 62.083 days, Δt: 3.140 minutes, wall time: 5.261 minutes\nIteration: 28600, time: 62.301 days, Δt: 3.140 minutes, wall time: 5.270 minutes\nIteration: 28700, time: 62.519 days, Δt: 3.140 minutes, wall time: 5.280 minutes\nIteration: 28800, time: 62.737 days, Δt: 3.140 minutes, wall time: 5.289 minutes\nIteration: 28900, time: 62.955 days, Δt: 3.140 minutes, wall time: 5.299 minutes\nIteration: 29000, time: 63.172 days, Δt: 3.140 minutes, wall time: 5.308 minutes\nIteration: 29100, time: 63.390 days, Δt: 3.140 minutes, wall time: 5.318 minutes\nIteration: 29200, time: 63.608 days, Δt: 3.140 minutes, wall time: 5.327 minutes\nIteration: 29300, time: 63.826 days, Δt: 3.140 minutes, wall time: 5.337 minutes\nIteration: 29400, time: 64.044 days, Δt: 3.140 minutes, wall time: 5.347 minutes\nIteration: 29500, time: 64.262 days, Δt: 3.140 minutes, wall time: 5.356 minutes\nIteration: 29600, time: 64.480 days, Δt: 3.140 minutes, wall time: 5.366 minutes\nIteration: 29700, time: 64.698 days, Δt: 3.140 minutes, wall time: 5.375 minutes\nIteration: 29800, time: 64.916 days, Δt: 3.140 minutes, wall time: 5.384 minutes\nIteration: 29900, time: 65.133 days, Δt: 3.140 minutes, wall time: 5.394 minutes\nIteration: 30000, time: 65.351 days, Δt: 3.140 minutes, wall time: 5.403 minutes\nIteration: 30100, time: 65.569 days, Δt: 3.140 minutes, wall time: 5.413 minutes\nIteration: 30200, time: 65.787 days, Δt: 3.140 minutes, wall time: 5.421 minutes\nIteration: 30300, time: 66.004 days, Δt: 3.140 minutes, wall time: 5.431 minutes\nIteration: 30400, time: 66.222 days, Δt: 3.140 minutes, wall time: 5.441 minutes\nIteration: 30500, time: 66.440 days, Δt: 3.140 minutes, wall time: 5.450 minutes\nIteration: 30600, time: 66.659 days, Δt: 3.140 minutes, wall time: 5.461 minutes\nIteration: 30700, time: 66.877 days, Δt: 3.140 minutes, wall time: 5.469 minutes\nIteration: 30800, time: 67.094 days, Δt: 3.140 minutes, wall time: 5.479 minutes\nIteration: 30900, time: 67.312 days, Δt: 3.140 minutes, wall time: 5.489 minutes\nIteration: 31000, time: 67.530 days, Δt: 3.140 minutes, wall time: 5.498 minutes\nIteration: 31100, time: 67.748 days, Δt: 3.140 minutes, wall time: 5.508 minutes\nIteration: 31200, time: 67.966 days, Δt: 3.140 minutes, wall time: 5.516 minutes\nIteration: 31300, time: 68.183 days, Δt: 3.140 minutes, wall time: 5.526 minutes\nIteration: 31400, time: 68.401 days, Δt: 3.140 minutes, wall time: 5.536 minutes\nIteration: 31500, time: 68.619 days, Δt: 3.140 minutes, wall time: 5.545 minutes\nIteration: 31600, time: 68.837 days, Δt: 3.140 minutes, wall time: 5.555 minutes\nIteration: 31700, time: 69.055 days, Δt: 3.140 minutes, wall time: 5.564 minutes\nIteration: 31800, time: 69.273 days, Δt: 3.140 minutes, wall time: 5.573 minutes\nIteration: 31900, time: 69.491 days, Δt: 3.140 minutes, wall time: 5.583 minutes\nIteration: 32000, time: 69.709 days, Δt: 3.140 minutes, wall time: 5.592 minutes\nIteration: 32100, time: 69.927 days, Δt: 3.140 minutes, wall time: 5.602 minutes\nIteration: 32200, time: 70.144 days, Δt: 3.140 minutes, wall time: 5.611 minutes\nIteration: 32300, time: 70.362 days, Δt: 3.140 minutes, wall time: 5.622 minutes\nIteration: 32400, time: 70.580 days, Δt: 3.140 minutes, wall time: 5.631 minutes\nIteration: 32500, time: 70.798 days, Δt: 3.140 minutes, wall time: 5.640 minutes\nIteration: 32600, time: 71.015 days, Δt: 3.140 minutes, wall time: 5.650 minutes\nIteration: 32700, time: 71.233 days, Δt: 3.140 minutes, wall time: 5.659 minutes\nIteration: 32800, time: 71.451 days, Δt: 3.140 minutes, wall time: 5.669 minutes\nIteration: 32900, time: 71.669 days, Δt: 3.140 minutes, wall time: 5.678 minutes\nIteration: 33000, time: 71.887 days, Δt: 3.140 minutes, wall time: 5.687 minutes\nIteration: 33100, time: 72.105 days, Δt: 3.140 minutes, wall time: 5.697 minutes\nIteration: 33200, time: 72.323 days, Δt: 3.140 minutes, wall time: 5.706 minutes\nIteration: 33300, time: 72.541 days, Δt: 3.140 minutes, wall time: 5.716 minutes\nIteration: 33400, time: 72.759 days, Δt: 3.140 minutes, wall time: 5.725 minutes\nIteration: 33500, time: 72.977 days, Δt: 3.140 minutes, wall time: 5.734 minutes\nIteration: 33600, time: 73.194 days, Δt: 3.140 minutes, wall time: 5.744 minutes\nIteration: 33700, time: 73.412 days, Δt: 3.140 minutes, wall time: 5.753 minutes\nIteration: 33800, time: 73.630 days, Δt: 3.140 minutes, wall time: 5.763 minutes\nIteration: 33900, time: 73.848 days, Δt: 3.140 minutes, wall time: 5.772 minutes\nIteration: 34000, time: 74.065 days, Δt: 3.140 minutes, wall time: 5.782 minutes\nIteration: 34100, time: 74.283 days, Δt: 3.140 minutes, wall time: 5.791 minutes\nIteration: 34200, time: 74.502 days, Δt: 3.140 minutes, wall time: 5.800 minutes\nIteration: 34300, time: 74.720 days, Δt: 3.140 minutes, wall time: 5.810 minutes\nIteration: 34400, time: 74.938 days, Δt: 3.140 minutes, wall time: 5.819 minutes\nIteration: 34500, time: 75.155 days, Δt: 3.140 minutes, wall time: 5.828 minutes\nIteration: 34600, time: 75.373 days, Δt: 3.140 minutes, wall time: 5.838 minutes\nIteration: 34700, time: 75.591 days, Δt: 3.140 minutes, wall time: 5.847 minutes\nIteration: 34800, time: 75.809 days, Δt: 3.140 minutes, wall time: 5.856 minutes\nIteration: 34900, time: 76.026 days, Δt: 3.140 minutes, wall time: 5.865 minutes\nIteration: 35000, time: 76.244 days, Δt: 3.140 minutes, wall time: 5.875 minutes\nIteration: 35100, time: 76.462 days, Δt: 3.140 minutes, wall time: 5.884 minutes\nIteration: 35200, time: 76.680 days, Δt: 3.140 minutes, wall time: 5.894 minutes\nIteration: 35300, time: 76.898 days, Δt: 3.140 minutes, wall time: 5.904 minutes\nIteration: 35400, time: 77.116 days, Δt: 3.140 minutes, wall time: 5.913 minutes\nIteration: 35500, time: 77.334 days, Δt: 3.140 minutes, wall time: 5.924 minutes\nIteration: 35600, time: 77.552 days, Δt: 3.140 minutes, wall time: 5.933 minutes\nIteration: 35700, time: 77.770 days, Δt: 3.140 minutes, wall time: 5.942 minutes\nIteration: 35800, time: 77.988 days, Δt: 3.140 minutes, wall time: 5.952 minutes\nIteration: 35900, time: 78.205 days, Δt: 3.140 minutes, wall time: 5.961 minutes\nIteration: 36000, time: 78.423 days, Δt: 3.140 minutes, wall time: 5.971 minutes\nIteration: 36100, time: 78.641 days, Δt: 3.140 minutes, wall time: 5.980 minutes\nIteration: 36200, time: 78.859 days, Δt: 3.140 minutes, wall time: 5.989 minutes\nIteration: 36300, time: 79.076 days, Δt: 3.140 minutes, wall time: 5.999 minutes\nIteration: 36400, time: 79.294 days, Δt: 3.140 minutes, wall time: 6.008 minutes\nIteration: 36500, time: 79.512 days, Δt: 3.140 minutes, wall time: 6.018 minutes\nIteration: 36600, time: 79.730 days, Δt: 3.140 minutes, wall time: 6.026 minutes\nIteration: 36700, time: 79.949 days, Δt: 3.140 minutes, wall time: 6.035 minutes\nIteration: 36800, time: 80.166 days, Δt: 3.140 minutes, wall time: 6.045 minutes\nIteration: 36900, time: 80.384 days, Δt: 3.140 minutes, wall time: 6.055 minutes\nIteration: 37000, time: 80.602 days, Δt: 3.140 minutes, wall time: 6.064 minutes\nIteration: 37100, time: 80.820 days, Δt: 3.140 minutes, wall time: 6.073 minutes\nIteration: 37200, time: 81.037 days, Δt: 3.140 minutes, wall time: 6.082 minutes\nIteration: 37300, time: 81.255 days, Δt: 3.140 minutes, wall time: 6.092 minutes\nIteration: 37400, time: 81.473 days, Δt: 3.140 minutes, wall time: 6.102 minutes\nIteration: 37500, time: 81.691 days, Δt: 3.140 minutes, wall time: 6.112 minutes\nIteration: 37600, time: 81.909 days, Δt: 3.140 minutes, wall time: 6.121 minutes\nIteration: 37700, time: 82.126 days, Δt: 3.140 minutes, wall time: 6.130 minutes\nIteration: 37800, time: 82.345 days, Δt: 3.140 minutes, wall time: 6.139 minutes\nIteration: 37900, time: 82.563 days, Δt: 3.140 minutes, wall time: 6.148 minutes\nIteration: 38000, time: 82.781 days, Δt: 3.140 minutes, wall time: 6.158 minutes\nIteration: 38100, time: 82.999 days, Δt: 3.140 minutes, wall time: 6.167 minutes\nIteration: 38200, time: 83.216 days, Δt: 3.140 minutes, wall time: 6.177 minutes\nIteration: 38300, time: 83.434 days, Δt: 3.140 minutes, wall time: 6.186 minutes\nIteration: 38400, time: 83.652 days, Δt: 3.140 minutes, wall time: 6.196 minutes\nIteration: 38500, time: 83.870 days, Δt: 3.140 minutes, wall time: 6.205 minutes\nIteration: 38600, time: 84.087 days, Δt: 3.140 minutes, wall time: 6.214 minutes\nIteration: 38700, time: 84.305 days, Δt: 3.140 minutes, wall time: 6.224 minutes\nIteration: 38800, time: 84.523 days, Δt: 3.140 minutes, wall time: 6.233 minutes\nIteration: 38900, time: 84.741 days, Δt: 3.140 minutes, wall time: 6.242 minutes\nIteration: 39000, time: 84.959 days, Δt: 3.140 minutes, wall time: 6.251 minutes\nIteration: 39100, time: 85.177 days, Δt: 3.140 minutes, wall time: 6.261 minutes\nIteration: 39200, time: 85.395 days, Δt: 3.140 minutes, wall time: 6.270 minutes\nIteration: 39300, time: 85.613 days, Δt: 3.140 minutes, wall time: 6.279 minutes\nIteration: 39400, time: 85.831 days, Δt: 3.140 minutes, wall time: 6.288 minutes\nIteration: 39500, time: 86.048 days, Δt: 3.140 minutes, wall time: 6.298 minutes\nIteration: 39600, time: 86.266 days, Δt: 3.140 minutes, wall time: 6.307 minutes\nIteration: 39700, time: 86.484 days, Δt: 3.140 minutes, wall time: 6.317 minutes\nIteration: 39800, time: 86.702 days, Δt: 3.140 minutes, wall time: 6.326 minutes\nIteration: 39900, time: 86.920 days, Δt: 3.140 minutes, wall time: 6.335 minutes\nIteration: 40000, time: 87.137 days, Δt: 3.140 minutes, wall time: 6.345 minutes\nIteration: 40100, time: 87.355 days, Δt: 3.140 minutes, wall time: 6.354 minutes\nIteration: 40200, time: 87.573 days, Δt: 3.140 minutes, wall time: 6.364 minutes\nIteration: 40300, time: 87.792 days, Δt: 3.140 minutes, wall time: 6.373 minutes\nIteration: 40400, time: 88.009 days, Δt: 3.140 minutes, wall time: 6.382 minutes\nIteration: 40500, time: 88.227 days, Δt: 3.140 minutes, wall time: 6.392 minutes\nIteration: 40600, time: 88.445 days, Δt: 3.140 minutes, wall time: 6.401 minutes\nIteration: 40700, time: 88.663 days, Δt: 3.140 minutes, wall time: 6.411 minutes\nIteration: 40800, time: 88.881 days, Δt: 3.140 minutes, wall time: 6.420 minutes\nIteration: 40900, time: 89.098 days, Δt: 3.140 minutes, wall time: 6.429 minutes\nIteration: 41000, time: 89.316 days, Δt: 3.140 minutes, wall time: 6.439 minutes\nIteration: 41100, time: 89.534 days, Δt: 3.140 minutes, wall time: 6.448 minutes\nIteration: 41200, time: 89.752 days, Δt: 3.140 minutes, wall time: 6.458 minutes\nIteration: 41300, time: 89.970 days, Δt: 3.140 minutes, wall time: 6.467 minutes\nIteration: 41400, time: 90.188 days, Δt: 3.140 minutes, wall time: 6.477 minutes\nIteration: 41500, time: 90.406 days, Δt: 3.140 minutes, wall time: 6.486 minutes\nIteration: 41600, time: 90.624 days, Δt: 3.140 minutes, wall time: 6.495 minutes\nIteration: 41700, time: 90.842 days, Δt: 3.140 minutes, wall time: 6.504 minutes\nIteration: 41800, time: 91.059 days, Δt: 3.140 minutes, wall time: 6.513 minutes\nIteration: 41900, time: 91.277 days, Δt: 3.140 minutes, wall time: 6.523 minutes\nIteration: 42000, time: 91.495 days, Δt: 3.140 minutes, wall time: 6.532 minutes\nIteration: 42100, time: 91.713 days, Δt: 3.140 minutes, wall time: 6.541 minutes\nIteration: 42200, time: 91.931 days, Δt: 3.140 minutes, wall time: 6.551 minutes\nIteration: 42300, time: 92.148 days, Δt: 3.140 minutes, wall time: 6.561 minutes\nIteration: 42400, time: 92.366 days, Δt: 3.140 minutes, wall time: 6.571 minutes\nIteration: 42500, time: 92.584 days, Δt: 3.140 minutes, wall time: 6.579 minutes\nIteration: 42600, time: 92.802 days, Δt: 3.140 minutes, wall time: 6.589 minutes\nIteration: 42700, time: 93.020 days, Δt: 3.140 minutes, wall time: 6.599 minutes\nIteration: 42800, time: 93.238 days, Δt: 3.140 minutes, wall time: 6.608 minutes\nIteration: 42900, time: 93.456 days, Δt: 3.140 minutes, wall time: 6.619 minutes\nIteration: 43000, time: 93.674 days, Δt: 3.140 minutes, wall time: 6.628 minutes\nIteration: 43100, time: 93.892 days, Δt: 3.140 minutes, wall time: 6.638 minutes\nIteration: 43200, time: 94.109 days, Δt: 3.140 minutes, wall time: 6.648 minutes\nIteration: 43300, time: 94.316 days, Δt: 2.747 minutes, wall time: 6.657 minutes\nIteration: 43400, time: 94.488 days, Δt: 2.268 minutes, wall time: 6.667 minutes\nIteration: 43500, time: 94.629 days, Δt: 1.862 minutes, wall time: 6.676 minutes\nIteration: 43600, time: 94.746 days, Δt: 1.550 minutes, wall time: 6.685 minutes\nIteration: 43700, time: 94.843 days, Δt: 1.289 minutes, wall time: 6.694 minutes\nIteration: 43800, time: 94.925 days, Δt: 1.092 minutes, wall time: 6.703 minutes\nIteration: 43900, time: 94.995 days, Δt: 56.991 seconds, wall time: 6.713 minutes\nIteration: 44000, time: 95.062 days, Δt: 1.025 minutes, wall time: 6.722 minutes\nIteration: 44100, time: 95.140 days, Δt: 1.195 minutes, wall time: 6.733 minutes\nIteration: 44200, time: 95.230 days, Δt: 1.406 minutes, wall time: 6.741 minutes\nIteration: 44300, time: 95.338 days, Δt: 1.675 minutes, wall time: 6.750 minutes\nIteration: 44400, time: 95.467 days, Δt: 2.006 minutes, wall time: 6.760 minutes\nIteration: 44500, time: 95.621 days, Δt: 2.412 minutes, wall time: 6.769 minutes\nIteration: 44600, time: 95.807 days, Δt: 2.895 minutes, wall time: 6.779 minutes\nIteration: 44700, time: 96.020 days, Δt: 3.140 minutes, wall time: 6.788 minutes\nIteration: 44800, time: 96.238 days, Δt: 3.140 minutes, wall time: 6.797 minutes\nIteration: 44900, time: 96.456 days, Δt: 3.140 minutes, wall time: 6.807 minutes\nIteration: 45000, time: 96.674 days, Δt: 3.140 minutes, wall time: 6.816 minutes\nIteration: 45100, time: 96.892 days, Δt: 3.140 minutes, wall time: 6.826 minutes\nIteration: 45200, time: 97.109 days, Δt: 3.140 minutes, wall time: 6.835 minutes\nIteration: 45300, time: 97.327 days, Δt: 3.140 minutes, wall time: 6.845 minutes\nIteration: 45400, time: 97.545 days, Δt: 3.140 minutes, wall time: 6.854 minutes\nIteration: 45500, time: 97.763 days, Δt: 3.140 minutes, wall time: 6.864 minutes\nIteration: 45600, time: 97.981 days, Δt: 3.140 minutes, wall time: 6.873 minutes\nIteration: 45700, time: 98.198 days, Δt: 3.140 minutes, wall time: 6.882 minutes\nIteration: 45800, time: 98.416 days, Δt: 3.140 minutes, wall time: 6.891 minutes\nIteration: 45900, time: 98.635 days, Δt: 3.140 minutes, wall time: 6.901 minutes\nIteration: 46000, time: 98.853 days, Δt: 3.140 minutes, wall time: 6.910 minutes\nIteration: 46100, time: 99.070 days, Δt: 3.140 minutes, wall time: 6.920 minutes\nIteration: 46200, time: 99.288 days, Δt: 3.140 minutes, wall time: 6.929 minutes\nIteration: 46300, time: 99.506 days, Δt: 3.140 minutes, wall time: 6.938 minutes\nIteration: 46400, time: 99.724 days, Δt: 3.140 minutes, wall time: 6.948 minutes\nIteration: 46500, time: 99.919 days, Δt: 2.548 minutes, wall time: 6.957 minutes\n[ Info: Simulation is stopping after running for 6.961 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\n","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"P = FieldTimeSeries(\"$filename.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\nZ = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\nDIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\nAlk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times\n\nair_sea_CO₂_flux = zeros(size(P)[4])\ncarbon_export = zeros(size(P)[4])\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, end, i], Alk[1, 1, end, i], t_function(1, 1, 0, t), s_function(1, 1, 0, t))\n    carbon_export[i] = model.biogeochemistry.organic_redfield * (sPOM[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, end - 20] .+ bPOM[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, end - 20])\nend\n\nusing CairoMakie\nf=Figure(backgroundcolor=RGBf(1, 1, 1), fontsize=30, resolution = (1920, 1600))\n\naxP = Axis(f[1, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Phytoplankton concentration (mmol N/m³)\")\nhmP = heatmap!(times./days, float.(z[end-23:end]), float.(P[1, 1, end-23:end, 1:end])', colormap=:batlow)\ncbP = Colorbar(f[1, 3], hmP)\n\naxNO₃ = Axis(f[1, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Nitrate concentration (mmol N/m³)\")\nhmNO₃ = heatmap!(times./days, float.(z[end-23:end]), float.(NO₃[1, 1, end-23:end, 1:end])', colormap=:batlow)\ncbNO₃ = Colorbar(f[1, 6], hmNO₃)\n\naxZ = Axis(f[2, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Zooplankton concentration (mmol N/m³)\")\nhmZ = heatmap!(times./days, float.(z[end-23:end]), float.(Z[1, 1, end-23:end, 1:end])', colormap=:batlow)\ncbZ = Colorbar(f[2, 3], hmZ)\n\naxD = Axis(f[2, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Detritus concentration (mmol N/m³)\")\nhmD = heatmap!(times./days, float.(z[end-23:end]), float.(sPOM[1, 1, end-23:end, 1:end])' .+ float.(bPOM[1, 1, end-23:end, 1:end])', colormap=:batlow)\ncbD = Colorbar(f[2, 6], hmD)\n\naxfDIC = Axis(f[3, 1:6], xlabel=\"Time (days)\", title=\"Air-sea CO₂ flux and Sinking\", ylabel=\"Flux (kgCO₂/m²/year)\")\nhmfDIC = lines!(times ./ days, cumsum(air_sea_CO₂_flux) .* (12 + 16 * 2) .* year / (1000 * 1000), label=\"Air-sea flux\")\nhmfExp = lines!(times ./ days, cumsum(carbon_export) .* (12 + 16 * 2) .* year / (1000 * 1000), label=\"Sinking export\")\n\nf[3, 5] = Legend(f, axfDIC, \"\", framevisible = false)\n\nsave(\"data_forced.png\", f)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"(Image: Results)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/column.jl\"","category":"page"},{"location":"generated/column/#One-dimensional-column-example","page":"Simple column model","title":"One dimensional column example","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This demonstrates:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"How to setup OceanBioME's biogeochemical models\nHow to visualise results","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first","category":"page"},{"location":"generated/column/#Install-dependencies","page":"Simple column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, Printf, CairoMakie\"","category":"page"},{"location":"generated/column/#Model-setup","page":"Simple column model","title":"Model setup","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We load the packages and choose the default LOBSTER parameter set","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using OceanBioME, Oceananigans, Printf\nusing OceanBioME.SLatissimaModel: SLatissima\nusing Oceananigans.Units","category":"page"},{"location":"generated/column/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Simple column model","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / 365days))*(1 / (1 + 0.2 * exp(-((mod(t, 365days) - 200days) / 50days) ^ 2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, 365days) * (1 / (1 +exp(-(t - 100days) / (5days)))) * (1 / (1 + exp((t - 330days) / (25days))))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(365days-eps(365days)) * exp(-mod(t, 365days) / 25days) - fmld1(mod(t, 365days))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t))/10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50day) + 10","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"temp (generic function with 1 method)","category":"page"},{"location":"generated/column/#Grid-and-PAR-field","page":"Simple column model","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Define the grid and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Lx, Ly = 20, 20\ngrid = RectilinearGrid(size=(1, 1, 50), extent=(Lx, Ly, 200))","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = temp, salinity = (args...) -> 35)\n\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry = LOBSTER(; grid,\n                                                          surface_phytosynthetically_active_radiation = PAR⁰,\n                                                          carbonates = true,\n                                                          advection_schemes = (sPOM = WENO(grid), bPOM = WENO(grid))),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              advection = nothing)\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/column/#Simulation","page":"Simple column model","title":"Simulation","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implimentation page)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"simulation = Simulation(model, Δt=3minutes, stop_time=100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                                        iteration(sim),\n                                                        prettytime(sim),\n                                                        prettytime(sim.Δt),\n                                                        prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"column\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, merge(model.tracers, model.auxiliary_fields), filename = \"$filename.jld2\", schedule = TimeInterval(1day), overwrite_existing=true)\n\n\n#simulation.output_writers[:particles] = JLD2OutputWriter(model, (; particles), filename = \"$(filename)_particles.jld2\", schedule = TimeInterval(1day), overwrite_existing = true)\n\nscale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Callback of ScaleNegativeTracers{NTuple{7, Int64}, NTuple{7, Float64}, Bool} on IterationInterval(1)","category":"page"},{"location":"generated/column/#Run!","page":"Simple column model","title":"Run!","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Finally we run the simulation","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"run!(simulation)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (6.831 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (3.410 minutes).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 3.870 minutes\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 4.214 minutes\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 4.557 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 4.898 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 5.241 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 5.578 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 5.913 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 6.252 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 6.589 minutes\n[ Info: Simulation is stopping after running for 6.927 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 6.927 minutes\n","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Now we can visulise the results with some post processing to diagnose the air-sea CO₂ flux - hopefully this looks different to the example without kelp!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"P = FieldTimeSeries(\"$filename.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\nZ = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\nDIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\nAlk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times\n\nair_sea_CO₂_flux = zeros(size(P)[4])\ncarbon_export = zeros(size(P)[4])\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, 50, i], Alk[1, 1, 50, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = (sPOM[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, end - 20] + bPOM[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, end - 20]) * model.biogeochemistry.organic_redfield\nend\n\nusing CairoMakie\nf = Figure(resolution = (1920, 1050))\n\naxP = Axis(f[1, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Phytoplankton concentration (mmol N / m³)\")\nhmP = heatmap!(times./days, float.(z[end-23:end]), float.(P[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbP = Colorbar(f[1, 3], hmP)\n\naxNO₃ = Axis(f[1, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Nitrate concentration (mmol N / m³)\")\nhmNO₃ = heatmap!(times./days, float.(z[end-23:end]), float.(NO₃[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbNO₃ = Colorbar(f[1, 6], hmNO₃)\n\naxZ = Axis(f[2, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Zooplankton concentration (mmol N / m³)\")\nhmZ = heatmap!(times./days, float.(z[end-23:end]), float.(Z[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbZ = Colorbar(f[2, 3], hmZ)\n\naxD = Axis(f[2, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Detritus concentration (mmol N / m³)\")\nhmD = heatmap!(times./days, float.(z[end-23:end]), float.(sPOM[1, 1, end-23:end, 1:end])' .+ float.(bPOM[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbD = Colorbar(f[2, 6], hmD)\n\naxfDIC = Axis(f[3, 1:4], xlabel=\"Time (days)\", title=\"Air-sea CO₂ flux and Sinking\", ylabel=\"Flux (kgCO₂ / m² / year)\")\nhmfDIC = lines!(times ./ days, air_sea_CO₂_flux .* (12 + 16 * 2) .* year /(1000 * 1000), label=\"Air-sea flux\")\nhmfExp = lines!(times ./ days, carbon_export .* (12 + 16 * 2) .* year / (1000 * 1000), label=\"Sinking export\")\n\nf[3, 5] = Legend(f, axfDIC, \"\", framevisible = false)\n\nsave(\"$(filename).png\", f)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"(Image: Results-bgc)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#LOBSTER","page":"LOBSTER","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER is a medium complexity BGC model with seven core prognostic variables: phytoplankton, zooplankton, small and large detritus, nitrates, ammonia, and dissolved organic matter. LOBSTER was originally proposed by in Marina Lévy, M. Gavart, L. Mémery, Guy Caniaux, Alexandre Paci (2005) and subsequently added to by Marina Levy, Anne-Marie Treguier, Marina Lévy, Patrice Klein (2001), L. Resplandy, M. Lévy, F. D'Ovidio, L. Merlivat (2009), P. Karleskind, M. Lévy, L. Memery (2011), and L. Resplandy, A. P. Martin, F. Le Moigne, P. Martin, A. Aquilina, L. Mémery, M. Lévy, R. Sanders (2012). ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, this implementation of LOBSTER optionally models simple carbonate chemistry (DIC and Alkalinity), Oxygen, and variable redfield ratios for the now dissolved and particulate organic groups (which then allows carbon to be conserved). For details see  (2023). These are activated in the model setup, for example:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER(; grid, carbonates = true)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/kelp.jl\"","category":"page"},{"location":"generated/kelp/#Simple-active-particle-example","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simple active particle example","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and active particles modelling the growth of sugar kelp. This demonstrates:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"How to setup OceanBioME's biogeochemical models\nHow to add biologically active particles which interact with the biodeochemical model\nHow to visualise results","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first","category":"page"},{"location":"generated/kelp/#Install-dependencies","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Install dependencies","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, Printf, CairoMakie\"","category":"page"},{"location":"generated/kelp/#Model-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First load the required packages","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units","category":"page"},{"location":"generated/kelp/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / 365days))*(1 / (1 + 0.2 * exp(-((mod(t, 365days) - 200days) / 50days) ^ 2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, 365days) * (1 / (1 +exp(-(t - 100days) / (5days)))) * (1 / (1 + exp((t - 330days) / (25days))))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(365days-eps(365days)) * exp(-mod(t, 365days) / 25days) - fmld1(mod(t, 365days))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t))/10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50day) + 10","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"temp (generic function with 1 method)","category":"page"},{"location":"generated/kelp/#Grid-and-PAR-field","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Define the grid and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Lx, Ly = 20, 20\ngrid = RectilinearGrid(size=(1, 1, 50), extent=(Lx, Ly, 200))","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = temp, salinity = (args...) -> 35)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"FluxBoundaryCondition: ContinuousBoundaryFunction gasexchange_function at (Nothing, Nothing, Nothing)","category":"page"},{"location":"generated/kelp/#Kelp-Particle-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Kelp Particle setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"println(\"Setting up kelp particles\")\n\nn = 5 # number of kelp fronds\nz₀ = [-21:5:-1;] * 1.0 # depth of kelp fronds\n\nparticles = SLatissima(; x = ones(n) * Lx / 2, y = ones(n) * Ly / 2, z = z₀,\n                         A = ones(n) * 10.0,\n                         latitude = 57.5,\n                         scalefactor = 500.0,\n                         pescribed_temperature = temp)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"5 BiogeochemicalParticles with eltype Any:\n└── 63 properties: (:architecture, :growth_rate_adjustement, :photosynthetic_efficiency, :minimum_carbon_reserve, :structural_carbon, :exudation, :erosion, :saturation_irradiance, :structural_dry_weight_per_area, :structural_dry_to_wet_weight, :carbon_reserve_per_carbon, :nitrogen_reserve_per_nitrogen, :minimum_nitrogen_reserve, :maximum_nitrogen_reserve, :growth_adjustement_2, :growth_adjustement_1, :maximum_specific_growth_rate, :structural_nitrogen, :photosynthesis_at_ref_temp_1, :photosynthesis_at_ref_temp_2, :photosynthesis_ref_temp_1, :photosynthesis_ref_temp_2, :photoperiod_1, :photoperiod_2, :respiration_at_ref_temp_1, :respiration_at_ref_temp_2, :respiration_ref_temp_1, :respiration_ref_temp_2, :photosynthesis_arrhenius_temp, :photosynthesis_low_temp, :photosynthesis_high_temp, :photosynthesis_high_arrhenius_temp, :photosynthesis_low_arrhenius_temp, :respiration_arrhenius_temp, :current_speed_for_0p65_uptake, :nitrate_half_saturation, :ammonia_half_saturation, :maximum_nitrate_uptake, :maximum_ammonia_uptake, :current_1, :current_2, :current_3, :respiration_reference_A, :respiration_reference_B, :exudation_redfield_ratio, :pescribed_velocity, :pescribed_temperature, :pescribed_salinity, :x, :y, :z, :A, :N, :C, :nitrate_uptake, :ammonia_uptake, :primary_production, :frond_exudation, :nitrogen_erosion, :carbon_erosion, :custom_dynamics, :scalefactor, :latitude)\n","category":"page"},{"location":"generated/kelp/#Setup-BGC-model","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Setup BGC model","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_phytosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            variable_redfield = true,\n                            particles)\n\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              advection = nothing)\n\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/kelp/#Simulation","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simulation","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"simulation = Simulation(model, Δt = 3minutes, stop_time=100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                                        iteration(sim),\n                                                        prettytime(sim),\n                                                        prettytime(sim.Δt),\n                                                        prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"kelp\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, merge(model.tracers, model.auxiliary_fields), filename = \"$filename.jld2\", schedule = TimeInterval(1day), overwrite_existing=true)\n\nsimulation.output_writers[:particles] = JLD2OutputWriter(model, (; particles), filename = \"$(filename)_particles.jld2\", schedule = TimeInterval(1day), overwrite_existing = true)\n\nscale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPON, :bPON, :DON))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Callback of ScaleNegativeTracers{NTuple{7, Int64}, NTuple{7, Float64}, Bool} on IterationInterval(1)","category":"page"},{"location":"generated/kelp/#Run!","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Run!","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Finally we run the simulation","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"run!(simulation)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (7.715 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (5.020 minutes).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 5.635 minutes\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 6.117 minutes\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 6.604 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 7.101 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 7.608 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 8.121 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 8.648 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 9.188 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 9.740 minutes\n[ Info: Simulation is stopping after running for 10.299 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 10.299 minutes\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux - hopefully this looks different to the example without kelp!","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"P = FieldTimeSeries(\"$filename.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\nZ = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOC = FieldTimeSeries(\"$filename.jld2\", \"sPOC\")\nbPOC = FieldTimeSeries(\"$filename.jld2\", \"bPOC\")\nDIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\nAlk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times\n\nair_sea_CO₂_flux = zeros(size(P)[4])\ncarbon_export = zeros(size(P)[4])\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, 50, i], Alk[1, 1, 50, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = sPOC[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, end - 20] + bPOC[1, 1, end - 20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, end - 20]\nend\n\nusing CairoMakie\nf = Figure(resolution = (1920, 1050))\n\naxP = Axis(f[1, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Phytoplankton concentration (mmol N/m³)\")\nhmP = heatmap!(times./days, float.(z[end-23:end]), float.(P[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbP = Colorbar(f[1, 3], hmP)\n\naxNO₃ = Axis(f[1, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Nitrate concentration (mmol N/m³)\")\nhmNO₃ = heatmap!(times./days, float.(z[end-23:end]), float.(NO₃[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbNO₃ = Colorbar(f[1, 6], hmNO₃)\n\naxZ = Axis(f[2, 1:2], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Zooplankton concentration (mmol N/m³)\")\nhmZ = heatmap!(times./days, float.(z[end-23:end]), float.(Z[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbZ = Colorbar(f[2, 3], hmZ)\n\naxD = Axis(f[2, 4:5], ylabel=\"z (m)\", xlabel=\"Time (days)\", title=\"Detritus concentration (mmol C/m³)\")\nhmD = heatmap!(times./days, float.(z[end-23:end]), float.(sPOC[1, 1, end-23:end, 1:end])' .+ float.(bPOC[1, 1, end-23:end, 1:end])', interpolate=true, colormap=:batlow)\ncbD = Colorbar(f[2, 6], hmD)\n\naxfDIC = Axis(f[3, 1:4], xlabel=\"Time (days)\", title=\"Air-sea CO₂ flux and Sinking\", ylabel=\"Flux (kgCO₂/m²/year)\")\nhmfDIC = lines!(times ./ days, air_sea_CO₂_flux .* (12 + 16 * 2) .* year /(1000 * 1000), label=\"Air-sea flux\")\nhmfExp = lines!(times ./ days, carbon_export .* (12 + 16 * 2) .* year / (1000 * 1000), label=\"Sinking export\")\n\nf[3, 5] = Legend(f, axfDIC, \"\", framevisible = false)\n\nsave(\"$(filename).png\", f)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: Results-bgc)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We can also have a look at how the kelp particles evolve","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using JLD2\n\nfile = jldopen(\"$(filename)_particles.jld2\")\n\niterations = keys(file[\"timeseries/t\"])\n\nA, N, C = ntuple(n -> ones(5, length(iterations)) .* NaN, 3)\ntimes = ones(length(iterations)) .* NaN\n\nfor (i, iter) in enumerate(iterations)\n    particles = file[\"timeseries/particles/$iter\"]\n    A[:, i] = particles.A\n    N[:, i] = particles.N\n    C[:, i] = particles.C\n\n    times[i] = file[\"timeseries/t/$iter\"]\nend\n\nfig = Figure(resolution = (1600, 500))\n\nax1 = Axis(fig[1, 1], ylabel = \"Frond area (dm²)\", xlabel = \"Time (days)\")\n[lines!(ax1, times./day, A[n, :]) for n in 1:5]\n\nax2 = Axis(fig[1, 2], ylabel = \"Total Carbon (gC)\", xlabel = \"Time (days)\")\n[lines!(ax2, times./day, (A .* (N .+ particles.structural_nitrogen) .* particles.structural_dry_weight_per_area)[n, :]) for n in 1:5]\n\nax3 = Axis(fig[1, 3], ylabel = \"Total Nitrogen (gN)\", xlabel = \"Time (days)\")\n[lines!(ax3, times./day, (A .* (C .+ particles.structural_carbon) .* particles.structural_dry_weight_per_area)[n, :]) for n in 1:5]\n\nsave(\"kelp_particles.png\", fig)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: Results)=#","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This page was generated using Literate.jl.","category":"page"},{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"Coming soon","category":"page"},{"location":"numerical_implementation/positivity-preservation/#pos-preservation","page":"Positivity preservation","title":"Positivity Preservation","text":"","category":"section"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"It is common in BGC models to behave badly if any tracers go bellow zero, analytically this is fine because they (usually) can not get below zero, and it is unphysical for the concentration of something to be negative. Issues arise when the inaccuracy in numerical integration making some tracer become negative, usually leading to explosions (e.g. exp(-C)toinf), or bounds errors (e.g. log(C)). Essentially this occurs when the local error in the numerical scheme is sufficiently large that more than the available amount of tracer is consumed.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"There exists a set of numerical schemes which overcome this and guarantee positivity (provided a positivity preserving advection scheme and well-behaved diffusion scheme are used) but are complex to implement. Although we may do this in the future we have not yet done so in the meantime have provided some utilities which maintain positivity. The simplest option is to reset any negative tracers to zero, but this causes the model to gain mass. A slightly more complex version is to increase negative tracers to zero and remove the difference from other tracers with in the same conserved system.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"We have found this to be a satisfactory solution (when balanced against using much smaller time steps), as it tends to cause only a small and local transient change to the solution.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"See model components page for usage.","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/box.jl\"","category":"page"},{"location":"generated/box/#Box-model","page":"Box model","title":"Box model","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"In this example we will setup a LOBSTER biogeochemical model in a single box configuration. This demonstrates:","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"How to setup OceanBioME's biogeochemical models as a stand-alone box model","category":"page"},{"location":"generated/box/#Install-dependencies","page":"Box model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using Pkg\npkg\"add OceanBioME, CairoMakie, DiffEqBase, OrdinaryDiffEq\"","category":"page"},{"location":"generated/box/#Model-setup","page":"Box model","title":"Model setup","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Load the packages and setup the initial and forcing conditions","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using OceanBioME\n\nminute=minutes=60\nhour=hours=60*minutes\nday=days=hours*24  # define the length of a day in seconds\nyear=years=day*365  # define the length of a year in days","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"31536000","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This is forced by a prescribed time-dependent photosynthetically available radiation (PAR)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"PAR⁰(t) = 60*(1-cos((t+15days)*2π/(365days)))*(1 /(1 +0.2*exp(-((mod(t, 365days)-200days)/50days)^2))) .+ 2\n\nz=-10# specify the nominal depth of the box for the PAR profile\nPAR(t) = PAR⁰(t)*exp(z*0.2) # Modify the PAR based on the nominal depth and exponential decay","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"PAR (generic function with 1 method)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Set up the model. Here, first specify the biogeochemical model, followed by initial conditions and the start and end times","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"model = BoxModel(biogeochemistry = LOBSTER(grid = BoxModelGrid()), forcing = (; PAR))\nmodel.Δt = 5minutes\nmodel.stop_time = 2years\n\nset!(model, NO₃ = 10.0, NH₄ = 0.1, P = 0.1, Z = 0.01)","category":"page"},{"location":"generated/box/#Run-the-model-(should-only-take-a-few-seconds)","page":"Box model","title":"Run the model (should only take a few seconds)","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"@info \"Running the model...\"\nrun!(model, save_interval = 100, save = SaveBoxModel(\"box.jld2\"))\n\n@info \"Plotting the results...\"","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"[ Info: Running the model...\n[ Info: Reached 0 seconds\n[ Info: Reached 34.722 days\n[ Info: Reached 69.444 days\n[ Info: Reached 104.167 days\n[ Info: Reached 138.889 days\n[ Info: Reached 173.611 days\n[ Info: Reached 208.333 days\n[ Info: Reached 243.056 days\n[ Info: Reached 277.778 days\n[ Info: Reached 312.500 days\n[ Info: Reached 347.222 days\n[ Info: Reached 1.046 years\n[ Info: Reached 1.142 years\n[ Info: Reached 1.237 years\n[ Info: Reached 1.332 years\n[ Info: Reached 1.427 years\n[ Info: Reached 1.522 years\n[ Info: Reached 1.617 years\n[ Info: Reached 1.712 years\n[ Info: Reached 1.807 years\n[ Info: Reached 1.903 years\n[ Info: Reached 1.998 years\n[ Info: Plotting the results...\n","category":"page"},{"location":"generated/box/#Plot-the-results","page":"Box model","title":"Plot the results","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using JLD2, CairoMakie\nvars = (:NO₃, :NH₄, :P, :Z, :DOM, :sPOM, :bPOM, :PAR)\nfile = jldopen(\"box.jld2\")\ntimes = keys(file[\"values\"])\ntimeseries = NamedTuple{vars}(ntuple(t -> zeros(length(times)), length(vars)))\n\nfor (idx, time) in enumerate(times)\n    values = file[\"values/$time\"]\n    for tracer in vars\n        getproperty(timeseries, tracer)[idx] = values[tracer]\n    end\nend\n\nclose(file)\n\nfig = Figure(resolution = (1600, 1000))\n\nplt_times = parse.(Float64, times)./day\n\naxs = []\n\nfor (idx, tracer) in enumerate(vars)\n    push!(axs, Axis(fig[floor(Int, (idx - 1)/4) + 1, (idx - 1) % 4 + 1], ylabel=\"$tracer\", xlabel=\"Day\"))\n    lines!(axs[end], plt_times, timeseries[tracer])\nend\nsave(\"box.png\", fig)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(Image: Results)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"appendix/params/SLatissima/#SLatissima","page":"SLatissima","title":"SLatissima","text":"","category":"section"},{"location":"appendix/params/SLatissima/","page":"SLatissima","title":"SLatissima","text":"using OceanBioME.SLatissima\nprintln(SLatissima.defaults)","category":"page"},{"location":"model_components/biogeochemical/PISCES/#PISCES","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"WARNING: Our implementation of PISCES is very early in its development and has not yet been validated (we can't even promise that it will run properly). If you are going to run experiments with it, we strongly recommend validating it against other implementations and would be very excited if you could share the results and any changes you have to make with us.","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"PISCES (O. Aumont, C. Ethé, A. Tagliabue, L. Bopp, M. Gehlen (2015)) is a more complex mixed Mondo-quota BGC model with multiple classes of phyto and zoo plankton with variable composition (C, Fe, and Chl), multiple nutrients (NO₃, NH₄, PO₄, Fe, and Si), dissolved organic matter, and the option for either a two size class or continuum size particulate model. With a total of 24 prognostic variables the complexity of PISCES is significantly higher than other models so far implemented in this package. This diagram shows the high level architecture of the PISCES model:","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"(Image: Diagram of PISCES architecture)","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"PISCES is considered to be a state of the art BGC model and is widely used. It is part of CMIP6 and so it often used in climate modelling but with this implementation we intended to make it easier to use it for smaller scale ecosystem modelling.","category":"page"},{"location":"#*Ocean*-*Bio*geochemical-*M*odelling-*E*nvironment-OceanBioME","page":"Home","title":"Ocean Biogeochemical Modelling Environment - OceanBioME","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OceanBioME\nDocTestSetup = quote\n    using OceanBioME\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is a fast and flexible ocean biogeochemical modelling environment. It is highly modular and is designed to make it easy to implement and use a varitey of biogeochemical and physical models. OceanBioME is built to be coupled with physics models from Oceananigans.jl allowing simulations across a wide range of spatial scales ranging from a global hydrostatic free surface model to nonhydrostatic large-eddy simulations. OceanBioME was designed specifically for ocean CDR appplications. Notably, it includes active particles which allow individual-based models to be seamlessly coupled with the flow physics, ecosystem models, and carbonate chemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is supported through grants from the Center for Climate Repair at Cambridge and the Gordon and Betty Moore Foundation. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl currently provides a core of several biogeochemical models (NPZD and LOBSTER, a medium complexity model, and PISCES in an early stage of testing), air-sea gas exchange models to provide appropriate top boundary conditions, and sediment models for the benthic boundary (under development).","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME includes a framework for integrating the growth of biological/active Lagrangian particles which move around and can interact with the (Eulerian) tracer fields - for example, consuming nutrients and carbon dioxide while releasing dissolved organic material. A growth model for sugar kelp is currently implemented using active particles, and this model can be used in a variety of dynamical scenarios including free-floating or bottom-attached particles.","category":"page"},{"location":"#Quick-install","page":"Home","title":"Quick install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME is a registered Julia package. So to install it,","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download Julia.\nLaunch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"OceanBioME\")","category":"page"},{"location":"#Running-your-first-model","page":"Home","title":"Running your first model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As a simple example lets run a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) model in a two-dimensional simulation of a buoyancy front:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(CPU(), size=(256, 32), extent=(500, 100), topology=(Bounded, Flat, Bounded))\n\nbiogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid, open_bottom=true)\n\nmodel = NonhydrostaticModel(; grid, biogeochemistry, buoyancy=BuoyancyTracer(), tracers=:b, advection=WENO(; grid), closure = AnisotropicMinimumDissipation())\n\nbᵢ(x, y, z) = ifelse(x < 250, 1e-4, 1e-3)\n\nset!(model, b = bᵢ, N = 5.0, P = 0.1, Z = 0.1, T = 18.0)\n\nsimulation = Simulation(model; Δt=1.0, stop_time=3hours)\n\nwizard = TimeStepWizard(cfl=0.3, max_change=1.5)\n\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(1))\n\nsimulation.output_writers[:tracers] = JLD2OutputWriter(model, model.tracers, filename = \"buoyancy_front.jld2\", schedule = TimeInterval(1minute), overwrite_existing=true)\n\nrun!(simulation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can then visualise this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CairoMakie\nb = FieldTimeSeries(\"buoyancy_front.jld2\", \"b\")\nP = FieldTimeSeries(\"buoyancy_front.jld2\", \"P\")\n\nn = Observable(1)\n\nb_lims = (minimum(b), maximum(b))\nP_lims = (minimum(P), maximum(P))\n\nb_plt = @lift b[1:grid.Nx, 1, 1:grid.Nz, $n]\nP_plt = @lift P[1:grid.Nx, 1, 1:grid.Nz, $n]\n\nfig = Figure(resolution = (1600, 160 * 4))\n\nsupertitle = Label(fig[0, :], \"t = 0.0\")\n\nax1 = Axis(fig[1, 1], xlabel = \"x (m)\", ylabel = \"z (m)\", title = \"Buouyancy pertubation (m / s)\", width = 1400)\nax2 = Axis(fig[2, 1], xlabel = \"x (m)\", ylabel = \"z (m)\", title = \"Phytoplankton concentration (mmol N / m³)\", width = 1400)\n\nhm1 = heatmap!(ax1, xnodes(grid, Center(), Center(), Center())[1:grid.Nx], znodes(grid, Center(), Center(), Center())[1:grid.Nz], b_plt, colorrange = b_lims, colormap = :batlow, interpolate=true)\nhm2 = heatmap!(ax2, xnodes(grid, Center(), Center(), Center())[1:grid.Nx], znodes(grid, Center(), Center(), Center())[1:grid.Nz], P_plt, colorrange = P_lims, colormap = Reverse(:bamako), interpolate=true)\n\nColorbar(fig[1, 2], hm1)\nColorbar(fig[2, 2], hm2)\n\nrecord(fig, \"buoyancy_front.gif\", 1:length(b.times)) do i\n    n[] = i\n    msg = string(\"Plotting frame \", i, \" of \", length(b.times))\n    print(msg * \" \\r\")\n    supertitle.text = \"t=$(prettytime(b.times[i]))\"\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: buoyancy_front)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this example OceanBioME is providing the biogeochemistry and the remainder is taken care of by Oceanaigans. For comprehensive documentation of the physics modelling see Oceananigans' Documentation, and for biogeochemistry and other features we provide read below.","category":"page"},{"location":"#Places-to-find-OceanBioME-information","page":"Home","title":"Places to find OceanBioME information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation, which provides\nexample scripts,\nexplanations of model implementation methods,\ndetails of currently implimented models, and\na library documenting all user-facing objects and functions.\nDiscussions on the OceanBioME github\nIf you've got a question or something to talk about, don't hesitate to start a new discussion!\nIssues and pull requests also contain lots of information about problems we've found, solutions we're trying to implement, and ideas for the future.","category":"page"},{"location":"#Getting-in-touch","page":"Home","title":"Getting in touch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whether you need help getting started with OceanBioME, found a bug, want OceanBioME to be more expanded, or just want to chat about our project, you can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a discussion. \nOpen an issue. Issues are best if you think the OceanBioME source code needs attention: a bug, a sign error, an important missing feature, or a typo in this documentation.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OceanBioME as part of your research, teaching, or other activities, we would be grateful if you could cite our work and mention OceanBioME by name, as well as citing and acknowledging Oceananigans as without them this package would not be possible.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We do not currently have a citation for OceanBioME so please reach out if you wish to cite it, and we will expedite the process of making it citable.","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/eady.jl\"","category":"page"},{"location":"generated/eady/#Biogeochemistry-in-submesoscale-eddies-in-the-Eady-model","page":"Baroclinical instability","title":"Biogeochemistry in submesoscale eddies in the Eady model","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"In this example we will setup a 3D model with a constant background buoyancy gradient with associated thermal wind (the Eady model) with the LOBSTER biogeochemical model. This demonstrates how to use biogeochemistry in a more complicated physical model. The parameters correspond roughly to those in J. R. Taylor (2016) and will generate a single submesoscale eddy","category":"page"},{"location":"generated/eady/#Install-dependencies","page":"Baroclinical instability","title":"Install dependencies","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, Printf, CairoMakie\"","category":"page"},{"location":"generated/eady/#Model-setup","page":"Baroclinical instability","title":"Model setup","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"First load the required packages","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Construct a grid with uniform grid spacing","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Lz = 100\ngrid = RectilinearGrid(size=(32, 32, 8), extent = (1kilometer, 1kilometer, Lz))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 1000.0) regularly spaced with Δx=31.25\n├── Periodic y ∈ [0.0, 1000.0) regularly spaced with Δy=31.25\n└── Bounded  z ∈ [-100.0, 0.0] regularly spaced with Δz=12.5","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Set the Coriolis parameter","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"coriolis = FPlane(f=1e-4) # [s⁻¹]","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Specify parameters that are used to construct the background state","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"background_state_parameters = ( M2 = 1e-8, # s⁻¹, geostrophic shear\n                                f = coriolis.f,      # s⁻¹, Coriolis parameter\n                                N = 1e-4)            # s⁻¹, buoyancy frequency","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"(M2 = 1.0e-8, f = 0.0001, N = 0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Here, B is the background buoyancy field and V is the corresponding thermal wind","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"V(x, y, z, t, p) = + p.M2/p.f * (z - Lz/2)\nB(x, y, z, t, p) = p.M2 * x + p.N^2 * (z - Lz/2)\n\nV_field = BackgroundField(V, parameters = background_state_parameters)\nB_field = BackgroundField(B, parameters = background_state_parameters)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"BackgroundField{typeof(Main.var\"##6078\".B), NamedTuple{(:M2, :f, :N), Tuple{Float64, Float64, Float64}}}\n├── func: B (generic function with 1 method)\n└── parameters: (M2 = 1.0e-8, f = 0.0001, N = 0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Specify the horizontal and vertical viscosity/diffusivity","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"κ₂z = 1e-4 # [m² s⁻¹] Vertical vertical viscosity and diffusivity\nκ₂h = 1e-2 # [m² s⁻¹] Horizontal viscosity and diffusivity\n\nvertical_diffusivity = VerticalScalarDiffusivity(ν=κ₂z, κ=κ₂z)\nhorizontal_diffusivity = HorizontalScalarDiffusivity(ν=κ₂h, κ=κ₂h)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"HorizontalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.01, κ=0.01)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Setup the biogeochemical model with optional carbonate chemistry turned on","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"biogeochemistry = LOBSTER(; grid,\n                            carbonates = true,\n                            open_bottom = true)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model (Float64) \n Light Attenuation Model: \n    └── Two-band light attenuation model (Float64)\n Optional components:\n    ├── Carbonates ✅ \n    ├── Oxygen ❌ \n    └── Variable Redfield Ratio ❌\n Sinking Velocities:\n    ├── sPOM: -0.0 to 3.47e-5 m/s \n    └── bPOM: -0.0 to 0.0023148148148148147 m/s","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"To-do: change to a buoyancy parameterisation so we don't have to fake the temperature and salinity","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"DIC_bcs = FieldBoundaryConditions(top = GasExchange(; gas = :CO₂, temperature = (args...) -> 12, salinity = (args...) -> 35))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── top: FluxBoundaryCondition: ContinuousBoundaryFunction gasexchange_function at (Nothing, Nothing, Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Model instantiation","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              boundary_conditions = (DIC = DIC_bcs, ),\n                              advection = WENO(grid),\n                              timestepper = :RungeKutta3,\n                              coriolis,\n                              tracers = :b,\n                              buoyancy = BuoyancyTracer(),\n                              background_fields = (b = B_field, v = V_field),\n                              closure = (vertical_diffusivity, horizontal_diffusivity))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── timestepper: RungeKutta3TimeStepper\n├── tracers: (b, NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk)\n├── closure: Tuple with 2 closures:\n│   ├── VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=(b=0.0001, NO₃=0.0001, NH₄=0.0001, P=0.0001, Z=0.0001, sPOM=0.0001, bPOM=0.0001, DOM=0.0001, DIC=0.0001, Alk=0.0001))\n│   └── HorizontalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.01, κ=(b=0.01, NO₃=0.01, NH₄=0.01, P=0.01, Z=0.01, sPOM=0.01, bPOM=0.01, DOM=0.01, DIC=0.01, Alk=0.01))\n├── buoyancy: Oceananigans.BuoyancyModels.BuoyancyTracer with ĝ = NegativeZDirection()\n└── coriolis: FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/#Initial-conditions","page":"Baroclinical instability","title":"Initial conditions","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Start with a bit of random noise added to the background thermal wind and an arbitary biogeochemical state","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Ξ(z) = randn() * z/grid.Lz * (z/grid.Lz + 1)\n\nŨ = 1e-3\nuᵢ(x, y, z) = Ũ * Ξ(z)\nvᵢ(x, y, z) = Ũ * Ξ(z)\n\nset!(model, u=uᵢ, v=vᵢ, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2409.0)\n\nsimulation = Simulation(model, Δt = 15minutes, stop_time = 10days)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Simulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── Next time step: 15 minutes\n├── Elapsed wall time: 0 seconds\n├── Wall time per iteration: NaN years\n├── Stop time: 10 days\n├── Stop iteration : Inf\n├── Wall time limit: Inf\n├── Callbacks: OrderedDict with 4 entries:\n│   ├── stop_time_exceeded => Callback of stop_time_exceeded on IterationInterval(1)\n│   ├── stop_iteration_exceeded => Callback of stop_iteration_exceeded on IterationInterval(1)\n│   ├── wall_time_limit_exceeded => Callback of wall_time_limit_exceeded on IterationInterval(1)\n│   └── nan_checker => Callback of NaNChecker for u on IterationInterval(100)\n├── Output writers: OrderedDict with no entries\n└── Diagnostics: OrderedDict with no entries","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Adapt the time step while keeping the CFL number fixed","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"wizard = TimeStepWizard(cfl=0.85, max_change = 1.5, max_Δt = 15minutes)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Callback of TimeStepWizard(cfl=0.85, max_Δt=900.0, min_Δt=0.0) on IterationInterval(10)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Create a progress message","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"progress(sim) = @printf(\"i: % 6d, sim time: % 10s, wall time: % 10s, Δt: % 10s, CFL: %.2e\\n\",\n                        sim.model.clock.iteration,\n                        prettytime(sim.model.clock.time),\n                        prettytime(sim.run_wall_time),\n                        prettytime(sim.Δt),\n                        AdvectiveCFL(sim.Δt)(sim.model))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Callback of progress on IterationInterval(10)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Here, add some diagnostics to calculate and output","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"u, v, w = model.velocities # unpack velocity `Field`s","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"NamedTuple with 3 Fields on 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo:\n├── u: 32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Center, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n├── v: 32×32×8 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n└── w: 32×32×9 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"calculate the vertical vorticity [s⁻¹]","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"ζ = Field(∂x(v) - ∂y(u))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── boundary conditions: FieldBoundaryConditions\n│   └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux\n├── operand: BinaryOperation at (Face, Face, Center)\n├── status: time=0.0\n└── data: 38×38×14 OffsetArray(::Array{Float64, 3}, -2:35, -2:35, -2:11) with eltype Float64 with indices -2:35×-2:35×-2:11\n    └── max=0.0, min=0.0, mean=0.0","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"horizontal divergence [s⁻¹]","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"δ = Field(∂x(u) + ∂y(v))","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"32×32×8 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── boundary conditions: FieldBoundaryConditions\n│   └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux\n├── operand: BinaryOperation at (Center, Center, Center)\n├── status: time=0.0\n└── data: 38×38×14 OffsetArray(::Array{Float64, 3}, -2:35, -2:35, -2:11) with eltype Float64 with indices -2:35×-2:35×-2:11\n    └── max=0.0, min=0.0, mean=0.0","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Periodically write the velocity, vorticity, and divergence out to a file","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"simulation.output_writers[:fields] = JLD2OutputWriter(model, merge(model.tracers, (; u, v, w, ζ, δ));\n                                                      schedule = TimeInterval(4hours),\n                                                      filename = \"eady_turbulence_bgc\",\n                                                      overwrite_existing = true);","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Prevent the tracer values going negative - this is especially important in this model while no positivity preserving diffusion is implimented","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"scale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())\nsimulation.callbacks[:nan_tendencies] = Callback(remove_NaN_tendencies!; callsite = TendencyCallsite())\nsimulation.callbacks[:abort_zeros] = Callback(zero_negative_tracers!; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Callback of zero_negative_tracers! on IterationInterval(1)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Run the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"run!(simulation)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"[ Info: Initializing simulation...\ni:      0, sim time:  0 seconds, wall time:  0 seconds, Δt: 15 minutes, CFL: 2.66e-02\n[ Info:     ... simulation initialization complete (15.258 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (4.712 minutes).\ni:     10, sim time: 2.500 hours, wall time: 5.678 minutes, Δt: 15 minutes, CFL: 1.32e-02\ni:     20, sim time:    5 hours, wall time: 6.572 minutes, Δt: 15 minutes, CFL: 7.94e-03\ni:     30, sim time: 7.500 hours, wall time: 7.463 minutes, Δt: 15 minutes, CFL: 8.19e-03\ni:     40, sim time:   10 hours, wall time: 8.358 minutes, Δt: 15 minutes, CFL: 8.61e-03\ni:     50, sim time: 12.500 hours, wall time: 9.245 minutes, Δt: 15 minutes, CFL: 6.82e-03\ni:     60, sim time:   15 hours, wall time: 10.136 minutes, Δt: 15 minutes, CFL: 5.98e-03\ni:     70, sim time: 17.500 hours, wall time: 11.022 minutes, Δt: 15 minutes, CFL: 6.27e-03\ni:     80, sim time:   20 hours, wall time: 11.916 minutes, Δt: 15 minutes, CFL: 6.54e-03\ni:     90, sim time: 22.500 hours, wall time: 12.804 minutes, Δt: 15 minutes, CFL: 7.17e-03\ni:    100, sim time: 1.042 days, wall time: 13.710 minutes, Δt: 15 minutes, CFL: 7.99e-03\ni:    110, sim time: 1.146 days, wall time: 14.602 minutes, Δt: 15 minutes, CFL: 8.17e-03\ni:    120, sim time: 1.250 days, wall time: 15.490 minutes, Δt: 15 minutes, CFL: 9.80e-03\ni:    130, sim time: 1.354 days, wall time: 16.376 minutes, Δt: 15 minutes, CFL: 1.09e-02\ni:    140, sim time: 1.458 days, wall time: 17.257 minutes, Δt: 15 minutes, CFL: 1.17e-02\ni:    150, sim time: 1.562 days, wall time: 18.132 minutes, Δt: 15 minutes, CFL: 1.26e-02\ni:    160, sim time: 1.667 days, wall time: 19.005 minutes, Δt: 15 minutes, CFL: 1.41e-02\ni:    170, sim time: 1.771 days, wall time: 19.876 minutes, Δt: 15 minutes, CFL: 1.63e-02\ni:    180, sim time: 1.875 days, wall time: 20.756 minutes, Δt: 15 minutes, CFL: 1.83e-02\ni:    190, sim time: 1.979 days, wall time: 21.628 minutes, Δt: 15 minutes, CFL: 2.02e-02\ni:    200, sim time: 2.083 days, wall time: 22.499 minutes, Δt: 15 minutes, CFL: 2.21e-02\ni:    210, sim time: 2.188 days, wall time: 23.377 minutes, Δt: 15 minutes, CFL: 2.62e-02\ni:    220, sim time: 2.292 days, wall time: 24.251 minutes, Δt: 15 minutes, CFL: 3.17e-02\ni:    230, sim time: 2.396 days, wall time: 25.123 minutes, Δt: 15 minutes, CFL: 3.82e-02\ni:    240, sim time: 2.500 days, wall time: 25.994 minutes, Δt: 15 minutes, CFL: 4.51e-02\ni:    250, sim time: 2.604 days, wall time: 26.870 minutes, Δt: 15 minutes, CFL: 5.33e-02\ni:    260, sim time: 2.708 days, wall time: 27.747 minutes, Δt: 15 minutes, CFL: 6.18e-02\ni:    270, sim time: 2.812 days, wall time: 28.628 minutes, Δt: 15 minutes, CFL: 7.08e-02\ni:    280, sim time: 2.917 days, wall time: 29.507 minutes, Δt: 15 minutes, CFL: 8.05e-02\ni:    290, sim time: 3.021 days, wall time: 30.379 minutes, Δt: 15 minutes, CFL: 9.47e-02\ni:    300, sim time: 3.125 days, wall time: 31.247 minutes, Δt: 15 minutes, CFL: 1.11e-01\ni:    310, sim time: 3.229 days, wall time: 32.117 minutes, Δt: 15 minutes, CFL: 1.26e-01\ni:    320, sim time: 3.333 days, wall time: 32.983 minutes, Δt: 15 minutes, CFL: 1.47e-01\ni:    330, sim time: 3.438 days, wall time: 33.850 minutes, Δt: 15 minutes, CFL: 1.67e-01\ni:    340, sim time: 3.542 days, wall time: 34.722 minutes, Δt: 15 minutes, CFL: 1.85e-01\ni:    350, sim time: 3.646 days, wall time: 35.593 minutes, Δt: 15 minutes, CFL: 2.09e-01\ni:    360, sim time: 3.750 days, wall time: 36.463 minutes, Δt: 15 minutes, CFL: 2.36e-01\ni:    370, sim time: 3.854 days, wall time: 37.340 minutes, Δt: 15 minutes, CFL: 2.64e-01\ni:    380, sim time: 3.958 days, wall time: 38.206 minutes, Δt: 15 minutes, CFL: 2.90e-01\ni:    390, sim time: 4.062 days, wall time: 39.076 minutes, Δt: 15 minutes, CFL: 3.20e-01\ni:    400, sim time: 4.167 days, wall time: 39.944 minutes, Δt: 15 minutes, CFL: 3.34e-01\ni:    410, sim time: 4.271 days, wall time: 40.815 minutes, Δt: 15 minutes, CFL: 3.38e-01\ni:    420, sim time: 4.375 days, wall time: 41.682 minutes, Δt: 15 minutes, CFL: 3.47e-01\ni:    430, sim time: 4.479 days, wall time: 42.549 minutes, Δt: 15 minutes, CFL: 3.51e-01\ni:    440, sim time: 4.583 days, wall time: 43.417 minutes, Δt: 15 minutes, CFL: 3.55e-01\ni:    450, sim time: 4.688 days, wall time: 44.292 minutes, Δt: 15 minutes, CFL: 3.56e-01\ni:    460, sim time: 4.792 days, wall time: 45.157 minutes, Δt: 15 minutes, CFL: 3.54e-01\ni:    470, sim time: 4.896 days, wall time: 46.017 minutes, Δt: 15 minutes, CFL: 3.53e-01\ni:    480, sim time:     5 days, wall time: 46.890 minutes, Δt: 15 minutes, CFL: 3.42e-01\ni:    490, sim time: 5.104 days, wall time: 47.748 minutes, Δt: 15 minutes, CFL: 3.47e-01\ni:    500, sim time: 5.208 days, wall time: 48.614 minutes, Δt: 15 minutes, CFL: 3.77e-01\ni:    510, sim time: 5.312 days, wall time: 49.471 minutes, Δt: 15 minutes, CFL: 4.09e-01\ni:    520, sim time: 5.417 days, wall time: 50.333 minutes, Δt: 15 minutes, CFL: 4.40e-01\ni:    530, sim time: 5.521 days, wall time: 51.197 minutes, Δt: 15 minutes, CFL: 4.61e-01\ni:    540, sim time: 5.625 days, wall time: 52.058 minutes, Δt: 15 minutes, CFL: 4.71e-01\ni:    550, sim time: 5.729 days, wall time: 52.919 minutes, Δt: 15 minutes, CFL: 4.81e-01\ni:    560, sim time: 5.833 days, wall time: 53.782 minutes, Δt: 15 minutes, CFL: 4.85e-01\ni:    570, sim time: 5.938 days, wall time: 54.646 minutes, Δt: 15 minutes, CFL: 5.01e-01\ni:    580, sim time: 6.042 days, wall time: 55.510 minutes, Δt: 15 minutes, CFL: 5.03e-01\ni:    590, sim time: 6.146 days, wall time: 56.372 minutes, Δt: 15 minutes, CFL: 5.39e-01\ni:    600, sim time: 6.250 days, wall time: 57.237 minutes, Δt: 15 minutes, CFL: 6.22e-01\ni:    610, sim time: 6.354 days, wall time: 58.102 minutes, Δt: 15 minutes, CFL: 6.87e-01\ni:    620, sim time: 6.458 days, wall time: 58.996 minutes, Δt: 15 minutes, CFL: 7.28e-01\ni:    630, sim time: 6.562 days, wall time: 59.894 minutes, Δt: 15 minutes, CFL: 7.45e-01\ni:    640, sim time: 6.667 days, wall time: 1.013 hours, Δt: 15 minutes, CFL: 7.35e-01\ni:    650, sim time: 6.771 days, wall time: 1.028 hours, Δt: 15 minutes, CFL: 7.01e-01\ni:    660, sim time: 6.875 days, wall time: 1.042 hours, Δt: 15 minutes, CFL: 6.94e-01\ni:    670, sim time: 6.979 days, wall time: 1.057 hours, Δt: 15 minutes, CFL: 6.82e-01\ni:    680, sim time: 7.083 days, wall time: 1.072 hours, Δt: 15 minutes, CFL: 6.44e-01\ni:    690, sim time: 7.188 days, wall time: 1.086 hours, Δt: 15 minutes, CFL: 6.27e-01\ni:    700, sim time: 7.292 days, wall time: 1.101 hours, Δt: 15 minutes, CFL: 6.28e-01\ni:    710, sim time: 7.396 days, wall time: 1.115 hours, Δt: 15 minutes, CFL: 6.47e-01\ni:    720, sim time: 7.500 days, wall time: 1.129 hours, Δt: 15 minutes, CFL: 6.05e-01\ni:    730, sim time: 7.604 days, wall time: 1.144 hours, Δt: 15 minutes, CFL: 5.26e-01\ni:    740, sim time: 7.708 days, wall time: 1.158 hours, Δt: 15 minutes, CFL: 5.07e-01\ni:    750, sim time: 7.812 days, wall time: 1.172 hours, Δt: 15 minutes, CFL: 4.95e-01\ni:    760, sim time: 7.917 days, wall time: 1.187 hours, Δt: 15 minutes, CFL: 5.12e-01\ni:    770, sim time: 8.021 days, wall time: 1.201 hours, Δt: 15 minutes, CFL: 5.61e-01\ni:    780, sim time: 8.125 days, wall time: 1.216 hours, Δt: 15 minutes, CFL: 5.56e-01\ni:    790, sim time: 8.229 days, wall time: 1.230 hours, Δt: 15 minutes, CFL: 5.52e-01\ni:    800, sim time: 8.333 days, wall time: 1.244 hours, Δt: 15 minutes, CFL: 5.71e-01\ni:    810, sim time: 8.438 days, wall time: 1.259 hours, Δt: 15 minutes, CFL: 5.70e-01\ni:    820, sim time: 8.542 days, wall time: 1.273 hours, Δt: 15 minutes, CFL: 5.35e-01\ni:    830, sim time: 8.646 days, wall time: 1.287 hours, Δt: 15 minutes, CFL: 4.65e-01\ni:    840, sim time: 8.750 days, wall time: 1.302 hours, Δt: 15 minutes, CFL: 4.72e-01\ni:    850, sim time: 8.854 days, wall time: 1.316 hours, Δt: 15 minutes, CFL: 4.67e-01\ni:    860, sim time: 8.958 days, wall time: 1.330 hours, Δt: 15 minutes, CFL: 4.59e-01\ni:    870, sim time: 9.062 days, wall time: 1.345 hours, Δt: 15 minutes, CFL: 4.43e-01\ni:    880, sim time: 9.167 days, wall time: 1.359 hours, Δt: 15 minutes, CFL: 4.57e-01\ni:    890, sim time: 9.271 days, wall time: 1.373 hours, Δt: 15 minutes, CFL: 4.76e-01\ni:    900, sim time: 9.375 days, wall time: 1.388 hours, Δt: 15 minutes, CFL: 4.80e-01\ni:    910, sim time: 9.479 days, wall time: 1.402 hours, Δt: 15 minutes, CFL: 4.53e-01\ni:    920, sim time: 9.583 days, wall time: 1.417 hours, Δt: 15 minutes, CFL: 4.26e-01\ni:    930, sim time: 9.688 days, wall time: 1.431 hours, Δt: 15 minutes, CFL: 4.19e-01\ni:    940, sim time: 9.792 days, wall time: 1.445 hours, Δt: 15 minutes, CFL: 4.24e-01\ni:    950, sim time: 9.896 days, wall time: 1.460 hours, Δt: 15 minutes, CFL: 4.31e-01\n[ Info: Simulation is stopping after running for 1.474 hours.\n[ Info: Simulation time 10 days equals or exceeds stop time 10 days.\ni:    960, sim time:    10 days, wall time: 1.474 hours, Δt: 15 minutes, CFL: 4.29e-01\n","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Now plot the results","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"using CairoMakie, JLD2","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Open the file with our data","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"file = jldopen(simulation.output_writers[:fields].filepath)\n\niterations = parse.(Int, keys(file[\"timeseries/t\"]))\n\ntimes = zeros(length(iterations))\n\nw, P, N, DIC = ntuple(n -> zeros(grid.Nx, grid.Ny, grid.Nz, length(iterations)), 5);\n\nfor (idx, it) in enumerate(iterations)\n  w[:, :, :, idx] = file[\"timeseries/w/$it\"][1:grid.Nx, 1:grid.Ny, 1:grid.Nz]\n  P[:, :, :, idx] = file[\"timeseries/P/$it\"][1:grid.Nx, 1:grid.Ny, 1:grid.Nz]\n  N[:, :, :, idx] = file[\"timeseries/NO₃/$it\"][1:grid.Nx, 1:grid.Ny, 1:grid.Nz] .+ file[\"timeseries/NH₄/$it\"][1:grid.Nx, 1:grid.Ny, 1:grid.Nz]\n  DIC[:, :, :, idx] = file[\"timeseries/DIC/$it\"][1:grid.Nx, 1:grid.Ny, 1:grid.Nz]\n\n  times[idx] = file[\"timeseries/t/$it\"]\nend","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"Plot","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"fig = Figure(resolution = (1600, 1600))\n\nn = Observable(1)\n\nw_plt = @lift w[:, :, grid.Nz, $n]\nN_plt = @lift N[:, :, grid.Nz, $n]\nP_plt = @lift P[:, :, grid.Nz, $n]\nDIC_plt = @lift DIC[:, :, grid.Nz, $n]\n\nxs = xnodes(grid, Center(), Center(), Center())[1:grid.Nx]\nys = ynodes(grid, Center(), Center(), Center())[1:grid.Ny]\nzs = znodes(grid, Center(), Center(), Center())[1:grid.Nz]\n\nlims = [(minimum(T), maximum(T)) for T in (w, N, P, DIC)]\n\nax1 = Axis(fig[1, 1], aspect = DataAspect(), title = \"Vertical velocity (m / s)\")\nhm1 = heatmap!(ax1, xs, ys, w_plt, levels = 33, colormap = :lajolla, colorrange = lims[1], interpolate = true)\nColorbar(fig[1, 2], hm1)\n\nax2 = Axis(fig[1, 3], aspect = DataAspect(), title = \"Nutrient (NO₃ + NH₄) concentration (mmol N / m³)\")\nhm2 = heatmap!(ax2, xs, ys, N_plt, levels = 33, colormap = Reverse(:bamako), colorrange = lims[2], interpolate = true)\nColorbar(fig[1, 4], hm2)\n\nax3 = Axis(fig[2, 1], aspect = DataAspect(), title = \"Phytoplankton concentration (mmol N / m³)\")\nhm3 = heatmap!(ax3, xs, ys, P_plt, levels = 33, colormap = Reverse(:batlow), colorrange = lims[3], interpolate = true)\nColorbar(fig[2, 2], hm3)\n\nax4 = Axis(fig[2, 3], aspect = DataAspect(), title = \"Dissolved inorganic carbon (mmol C / m³)\")\nhm4 = heatmap!(ax4, xs, ys, DIC_plt, levels = 33, colormap = Reverse(:devon), colorrange = lims[4], interpolate = true)\nColorbar(fig[2, 4], hm4)\n\nsupertitle = Label(fig[0, :], \"t = 0.0\", fontsize = 30)\n\nrecord(fig, \"eady.gif\", 1:length(times), framerate = 10) do i\n    n[] = i\n    msg = string(\"Plotting frame \", i, \" of \", length(times))\n    print(msg * \" \\r\")\n    supertitle.text = \"t=$(prettytime(times[i]))\"\nend","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"\"eady.gif\"","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"(Image: Results)","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"","category":"page"},{"location":"generated/eady/","page":"Baroclinical instability","title":"Baroclinical instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/sediment/#sediment","page":"Overview","title":"Sediment","text":"","category":"section"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"We currently have one single layer sediment model implemented. The model, proposed by Karline Soetaert, Jack J Middelburg, Peter M J Herman, Kerst Buis (2000), is a \"G class\" model that evolves carbon and nitrogen in three classes (fast, slow and refectory). The model is also only compatible with the LOBSTER biogeochemical model with carbonate chemistry, oxygen, and variable redfield options on. You also must ensure that the open_bottom option is on for particles to leave the bottom of the domain to the sediment model.","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"It is straightforward to set up:","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"sediment_model = SimpleMultiG(grid)","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"You may optionally specify the model parameters. This can then be passed in the setup of a BGC model:","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"biogeochemistry = LOBSTER(; grid, \n                            carbonates = true, oxygen = true, variable_redfield = true, \n                            open_bottom = true, \n                            sediment_model)","category":"page"}]
}
