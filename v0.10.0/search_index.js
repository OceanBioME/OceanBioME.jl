var documenterSearchIndex = {"docs":
[{"location":"appendix/library/#library_api","page":"Library","title":"Library","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Documenting the user interface.","category":"page"},{"location":"appendix/library/#OceanBioME.jl","page":"Library","title":"OceanBioME.jl","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.OceanBioME","page":"Library","title":"OceanBioME.OceanBioME","text":"A fast and flexible modelling environment for modelling the coupled interactions between ocean biogeochemistry, carbonate chemistry, and physics.\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Biogeochemistry-Tuple{Any}","page":"Library","title":"OceanBioME.Biogeochemistry","text":"Biogeochemistry(underlying_biogeochemistry;\n                light_attenuation = nothing,\n                sediment = nothing,\n                particles = nothing,\n                modifiers = nothing)\n\nConstruct a biogeochemical model based on underlying_biogeochemistry which may have a light_attenuation model, sediment, particles, and modifiers.\n\nKeyword Arguments\n\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for AbstractSediment\nparticles: slot for BiogeochemicalParticles\nmodifiers: slot for components which modify the biogeochemistry when the tendencies have been calculated or when the state is updated\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.ScaleNegativeTracers-Tuple{Any}","page":"Library","title":"OceanBioME.ScaleNegativeTracers","text":"ScaleNegativeTracers(; tracers, scalefactors = ones(length(tracers)), warn = false)\n\nConstructs a modifier to scale tracers so that none are negative. Use like:\n\nmodifier = ScaleNegativeTracers((:P, :Z, :N))\nbiogeochemistry = Biogeochemistry(...; modifier)\n\nThis method is better, though still imperfect, method to prevent numerical errors that lead to negative tracer values compared to ZeroNegativeTracers. Please see discussion in github.\n\nFuture plans include implement a positivity-preserving timestepping scheme as the ideal alternative.\n\nIf warn is true then scaling will raise a warning.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.ScaleNegativeTracers-Tuple{Oceananigans.Biogeochemistry.AbstractBiogeochemistry, Any}","page":"Library","title":"OceanBioME.ScaleNegativeTracers","text":"ScaleNegativeTracers(model::UnderlyingBiogeochemicalModel; warn = false)\n\nConstruct a modifier to scale the conserved tracers in model.\n\nIf warn is true then scaling will raise a warning.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.ZeroNegativeTracers","page":"Library","title":"OceanBioME.ZeroNegativeTracers","text":"ZeroNegativeTracers(; exclude = ())\n\nConstruct a modifier that zeroes any negative tracers excluding those listed in exclude.\n\ndanger: Tracer conservation\nThis method is not recommended as a way to preserve positivity of tracers since it does not conserve the total tracer.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.conserved_tracers-Tuple{Biogeochemistry}","page":"Library","title":"OceanBioME.conserved_tracers","text":"conserved_tracers(model::UnderlyingBiogeochemicalModel)\n\nReturns the names of tracers which together are conserved in model\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.redfield-NTuple{6, Any}","page":"Library","title":"OceanBioME.redfield","text":"redfield(i, j, k, val_tracer_name, bgc, tracers)\n\nReturns the redfield ratio of tracer_name from bgc at i, j, k.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.redfield-Tuple{Any, Any}","page":"Library","title":"OceanBioME.redfield","text":"redfield(val_tracer_name, bgc)\nredfield(val_tracer_name, bgc, tracers)\n\nReturns the redfield ratio of tracer_name from bgc when it is constant across the domain.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Biogeochemical-Models","page":"Library","title":"Biogeochemical Models","text":"","category":"section"},{"location":"appendix/library/#Nutrient-Phytoplankton-Zooplankton-Detritus","page":"Library","title":"Nutrient Phytoplankton Zooplankton Detritus","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.NPZDModel]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.NPZDModel","page":"Library","title":"OceanBioME.NPZDModel","text":"Nutrient-Phytoplankton-Zooplankton-Detritus model of Kuhn et al. (2015).\n\nTracers\n\nNutrients: N (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nDetritus: D (mmol N/m³)\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.NPZDModel.NutrientPhytoplanktonZooplanktonDetritus-Union{Tuple{}, Tuple{M}, Tuple{P}, Tuple{S}, Tuple{LA}, Tuple{FT}} where {FT, LA, S, P, M}","page":"Library","title":"OceanBioME.NPZDModel.NutrientPhytoplanktonZooplanktonDetritus","text":"NutrientPhytoplanktonZooplanktonDetritus(; grid,\n                                           initial_photosynthetic_slope::FT = 0.1953 / day, # 1/(W/m²)/s\n                                           base_maximum_growth::FT = 0.6989 / day, # 1/s\n                                           nutrient_half_saturation::FT = 2.3868, # mmol N/m³\n                                           base_respiration_rate::FT = 0.066 / day, # 1/s/(mmol N / m³)\n                                           phyto_base_mortality_rate::FT = 0.0101 / day, # 1/s/(mmol N / m³)\n                                           maximum_grazing_rate::FT = 2.1522 / day, # 1/s\n                                           grazing_half_saturation::FT = 0.5573, # mmol N/m³\n                                           assimulation_efficiency::FT = 0.9116,\n                                           base_excretion_rate::FT = 0.0102 / day, # 1/s/(mmol N / m³)\n                                           zoo_base_mortality_rate::FT = 0.3395 / day, # 1/s/(mmol N / m³)²\n                                           remineralization_rate::FT = 0.1213 / day, # 1/s\n\n                                           surface_photosynthetically_active_radiation = default_surface_PAR,\n                                           light_attenuation_model::LA =\n                                               TwoBandPhotosyntheticallyActiveRadiation(; grid,\n                                                                                          surface_PAR = surface_photosynthetically_active_radiation),\n                                           sediment_model::S = nothing,\n\n                                           sinking_speeds = (P = 0.2551/day, D = 2.7489/day),\n                                           open_bottom::Bool = true,\n\n                                           particles::P = nothing)\n\nConstruct a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) biogeochemical model.\n\nKeyword Arguments\n\ngrid: (required) the geometry to build the model on, required to calculate sinking\ninitial_photosynthetic_slope, ..., remineralization_rate: NPZD parameter values\nsurface_photosynthetically_active_radiation: function (or array in the future) for the photosynthetically available radiation at the surface, should be shape f(x, y, t)\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for AbstractSediment\nsinking_speed: named tuple of constant sinking, of fields (i.e. ZFaceField(...)) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nparticles: slot for BiogeochemicalParticles\n\nExample\n\njulia> using OceanBioME\n\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size=(20, 30), extent=(200, 200), topology=(Bounded, Flat, Bounded));\n\njulia> model = NutrientPhytoplanktonZooplanktonDetritus(; grid)\nNutrientPhytoplanktonZooplanktonDetritus{Float64} model, with (:P, :D) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#The-Lodyc-DAMTP-Ocean-Biogeochemical-Simulation-Tools-for-Ecosystem-and-Resources-(LOBSTER)","page":"Library","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.LOBSTERModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.LOBSTERModel","page":"Library","title":"OceanBioME.LOBSTERModel","text":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model.\n\nTracers\n\nNitrates: NO₃ (mmol N/m³)\nAmmonia: NH₄ (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nSmall (slow sinking) particulate organic matter: sPOM (mmol N/m³)\nLarge (fast sinking) particulate organic matter: bPOM (mmol N/m³)\nDissolved organic matter: DOM (mmol N/m³)\n\nOptional tracers\n\nCarbonate chemistry\n\nDissolved inorganic carbon: DIC (mmol C/m³)\nAlkalinity: Alk (meq/m³)\n\nOxygen chemistry\n\nOxygen: O₂ (mmol O₂/m³)\n\nVariable redfield\n\nSmall (slow sinking) particulate organic matter carbon content: sPOC (mmol C/m³)\nLarge (fast sinking) particulate organic matter carbon content: bPOC (mmol C/m³)\nDissolved organic matter carbon content: DOC (mmol C/m³)\nWhen this option is enabled then the usual sPOM and bPOM change to sPON and bPON as they explicitly represent the nitrogen contained in the particulate matter\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\nFor optional tracers:\n\nTemperature: T (ᵒC)\nSalinity: S (‰)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.LOBSTERModel.LOBSTER-Union{Tuple{}, Tuple{M}, Tuple{P}, Tuple{S}, Tuple{LA}, Tuple{FT}} where {FT, LA, S, P, M}","page":"Library","title":"OceanBioME.LOBSTERModel.LOBSTER","text":"LOBSTER(; grid,\n          phytoplankton_preference::FT = 0.5,\n          maximum_grazing_rate::FT = 9.26e-6, # 1/s\n          grazing_half_saturation::FT = 1.0, # mmol N/m³\n          light_half_saturation::FT = 33.0, # W/m² (?)\n          nitrate_ammonia_inhibition::FT = 3.0,\n          nitrate_half_saturation::FT = 0.7, # mmol N/m³\n          ammonia_half_saturation::FT = 0.001, # mmol N/m³\n          maximum_phytoplankton_growthrate::FT = 1.21e-5, # 1/s\n          zooplankton_assimilation_fraction::FT = 0.7,\n          zooplankton_mortality::FT = 2.31e-6, # 1/s/mmol N/m³\n          zooplankton_excretion_rate::FT = 5.8e-7, # 1/s\n          phytoplankton_mortality::FT = 5.8e-7, # 1/s\n          small_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          large_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          phytoplankton_exudation_fraction::FT = 0.05,\n          nitrification_rate::FT = 5.8e-7, # 1/s\n          ammonia_fraction_of_exudate::FT = 0.75,\n          ammonia_fraction_of_excriment::FT = 0.5,\n          ammonia_fraction_of_detritus::FT = 0.0,\n          phytoplankton_redfield::FT = 6.56, # mol C/mol N\n          organic_redfield::FT = 6.56, # mol C/mol N\n          phytoplankton_chlorophyll_ratio::FT = 1.31, # g Chl/mol N\n          organic_carbon_calcate_ratio::FT = 0.1, # mol CaCO₃/mol C\n          respiration_oxygen_nitrogen_ratio::FT = 10.75, # mol O/molN\n          nitrification_oxygen_nitrogen_ratio::FT = 2.0, # mol O/molN\n          slow_sinking_mortality_fraction::FT = 0.5,\n          fast_sinking_mortality_fraction::FT = 0.5,\n          dissolved_organic_breakdown_rate::FT = 3.86e-7, # 1/s\n          zooplankton_calcite_dissolution::FT = 0.3,\n\n          surface_photosynthetically_active_radiation::SPAR = default_surface_PAR,\n\n          light_attenuation_model::LA =\n              TwoBandPhotosyntheticallyActiveRadiation(; grid,\n                                                         surface_PAR = surface_photosynthetically_active_radiation),\n          sediment_model::S = nothing,\n\n          carbonates::Bool = false,\n          oxygen::Bool = false,\n          variable_redfield = false,\n\n          sinking_speed = (sPOM = 3.47e-5, bPOM = 200/day),\n          open_bottom::Bool = true,\n\n          particles::P = nothing)\n\nConstruct an instance of the LOBSTER biogeochemical model.\n\nKeyword Arguments\n\ngrid: (required) the geometry to build the model on, required to calculate sinking\nphytoplankton_preference, ..., dissolved_organic_breakdown_rate: LOBSTER parameter values\nsurface_photosynthetically_active_radiation: funciton (or array in the future) for the photosynthetically available radiation at the surface, should be shape f(x, y, t)\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for AbstractSediment\ncarbonates, oxygen, and variable_redfield: include models for carbonate chemistry and/or oxygen chemistry and/or variable redfield ratio dissolved and particulate organic matter\nsinking_speed: named tuple of constant sinking, of fields (i.e. ZFaceField(...)) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nparticles: slot for BiogeochemicalParticles\n\nExample\n\njulia> using OceanBioME\n\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> model = LOBSTER(; grid)\nLOBSTER{Float64} with carbonates ❌, oxygen ❌, variable Redfield ratio ❌and (:sPOM, :bPOM) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Sugar-kelp-(Saccharina-latissima)","page":"Library","title":"Sugar kelp (Saccharina latissima)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.SLatissimaModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.SLatissimaModel","page":"Library","title":"OceanBioME.SLatissimaModel","text":"Sugar kelp model of Broch and Slagstad (2012) and updated by Broch et al. (2013), Fossberg et al. (2018), and Broch et al. (2019).\n\nPrognostic properties\n\nArea: A (dm²)\nNitrogen reserve: N (gN/gSW)\nCarbon reserve: C (gC/gSW)\n\nTracer dependencies\n\nNitrates: NO₃ (mmol N/m³)\nPhotosynthetically available radiation: PAR (einstein/m²/day)\n\nOptional\n\nAmmonia: NH₄ (mmol N/m³)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.SLatissimaModel.SLatissima","page":"Library","title":"OceanBioME.SLatissimaModel.SLatissima","text":"SLatissima(; architecture :: AR = CPU(),\n             growth_rate_adjustment :: FT = 4.5,\n             photosynthetic_efficiency :: FT = 4.15e-5 * 24 * 10^6 / (24 * 60 * 60),\n             minimum_carbon_reserve :: FT = 0.01,\n             structural_carbon :: FT = 0.2,\n             exudation :: FT = 0.5,\n             erosion :: FT = 0.22,\n             saturation_irradiance :: FT = 90 * day/ (10 ^ 6),\n             structural_dry_weight_per_area :: FT = 0.5,\n             structural_dry_to_wet_weight :: FT = 0.0785,\n             carbon_reserve_per_carbon :: FT = 2.1213,\n             nitrogen_reserve_per_nitrogen :: FT = 2.72,\n             minimum_nitrogen_reserve :: FT = 0.0126,\n             maximum_nitrogen_reserve :: FT = 0.0216,\n             growth_adjustment_2 :: FT = 0.039 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve)),\n             growth_adjustment_1 :: FT = 0.18 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve)) - growth_adjustment_2,\n             maximum_specific_growth_rate :: FT = 0.18,\n             structural_nitrogen :: FT = 0.0146,\n             photosynthesis_at_ref_temp_1 :: FT = 1.22e-3 * 24,\n             photosynthesis_at_ref_temp_2 :: FT = 1.3e-3 * 24,\n             photosynthesis_ref_temp_1 :: FT = 285.0,\n             photosynthesis_ref_temp_2 :: FT = 288.0,\n             photoperiod_1 :: FT = 0.85,\n             photoperiod_2 :: FT = 0.3,\n             respiration_at_ref_temp_1 :: FT = 2.785e-4 * 24,\n             respiration_at_ref_temp_2 :: FT = 5.429e-4 * 24,\n             respiration_ref_temp_1 :: FT = 285.0,\n             respiration_ref_temp_2 :: FT = 290.0,\n             photosynthesis_arrhenius_temp :: FT = (1 / photosynthesis_ref_temp_1 - 1 / photosynthesis_ref_temp_2) ^ -1 * log(photosynthesis_at_ref_temp_2 / photosynthesis_at_ref_temp_1),\n             photosynthesis_low_temp :: FT = 271.0,\n             photosynthesis_high_temp :: FT = 296.0,\n             photosynthesis_high_arrhenius_temp :: FT = 1414.87,\n             photosynthesis_low_arrhenius_temp :: FT = 4547.89,\n             respiration_arrhenius_temp :: FT = (1 / respiration_ref_temp_1 - 1 / respiration_ref_temp_2) ^ -1 * log(respiration_at_ref_temp_2 / respiration_at_ref_temp_1),\n             current_speed_for_0p65_uptake :: FT = 0.03,\n             nitrate_half_saturation :: FT = 4.0,\n             ammonia_half_saturation :: FT = 1.3,\n             maximum_nitrate_uptake :: FT = 10 * structural_dry_weight_per_area * 24 * 14 / (10^6),\n             maximum_ammonia_uptake :: FT = 12 * structural_dry_weight_per_area * 24 * 14 / (10^6),\n             current_1 :: FT = 0.72,\n             current_2 :: FT = 0.28,\n             current_3 :: FT = 0.045,\n             respiration_reference_A :: FT = 1.11e-4 * 24,\n             respiration_reference_B :: FT = 5.57e-5 * 24,\n             exudation_redfield_ratio :: FT = Inf,\n\n             prescribed_velocity :: U = 0.1,\n\n             #position\n             x :: P = arch_array(architecture, [0.0])\n             y :: P = arch_array(architecture, zeros(Float64, length(x))),\n             z :: P = arch_array(architecture, zeros(Float64, length(x))),\n\n             #properties\n             A :: P = arch_array(architecture, ones(Float64, length(x)) * 30),\n             N :: P = arch_array(architecture, ones(Float64, length(x)) * 0.01),\n             C :: P = arch_array(architecture, ones(Float64, length(x)) * 0.1),\n\n             #feedback\n             nitrate_uptake :: P = arch_array(architecture, zeros(Float64, length(x))),\n             ammonia_uptake :: P = arch_array(architecture, zeros(Float64, length(x))),\n             primary_production :: P = arch_array(architecture, zeros(Float64, length(x))),\n             frond_exudation :: P = arch_array(architecture, zeros(Float64, length(x))),\n             nitrogen_erosion :: P = arch_array(architecture, zeros(Float64, length(x))),\n             carbon_erosion :: P = arch_array(architecture, zeros(Float64, length(x))),\n\n             custom_dynamics :: F = no_dynamics,\n\n             scalefactor :: FT = 1.0,\n             latitude :: FT = 57.5)\n\nKeyword Arguments\n\narchitecture: the architecture to adapt arrays to\ngrowth_rate_adjustment, ..., exudation_redfield_ratio: parameter values\nprescribed_velocity: functions for the relative velocity f(x, y, z, t)\nx,y and z: positions of the particles\nA, N, and C: area, nitrogen, and carbon reserves\nnitrate_uptake ... carbon_erosion: diagnostic values coupled to tracer fields\ncustom_dynamics: place to add any function of form f!(particles, model, bgc, Δt)\nscalefactor: scalar scaling for tracer coupling\nlatitude: model latitude for seasonal growth modulation\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Light-Attenuation-Models","page":"Library","title":"Light Attenuation Models","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Light]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Light","page":"Library","title":"OceanBioME.Light","text":"Light attenuation by chlorophyll as described by Karleskind et al. (2011) (implemented as twoBand) and Morel (1988).\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Light.TwoBandPhotosyntheticallyActiveRadiation-Union{Tuple{}, Tuple{SPAR}, Tuple{FT}} where {FT, SPAR}","page":"Library","title":"OceanBioME.Light.TwoBandPhotosyntheticallyActiveRadiation","text":"TwoBandPhotosyntheticallyActiveRadiation(; grid, \n                                           water_red_attenuation::FT = 0.225, # 1/m\n                                           water_blue_attenuation::FT = 0.0232, # 1/m\n                                           chlorophyll_red_attenuation::FT = 0.037, # 1/(m * (mgChl/m³) ^ eʳ)\n                                           chlorophyll_blue_attenuation::FT = 0.074, # 1/(m * (mgChl/m³) ^ eᵇ)\n                                           chlorophyll_red_exponent::FT = 0.629,\n                                           chlorophyll_blue_exponent::FT = 0.674,\n                                           pigment_ratio::FT = 0.7,\n                                           phytoplankton_chlorophyll_ratio::FT = 1.31,\n                                           surface_PAR::SPAR = (x, y, t) -> 100 * max(0.0, cos(t * π / 12hours)))\n\nKeyword Arguments\n\ngrid: grid for building the model on\nwater_red_attenuation, ..., phytoplankton_chlorophyll_ratio: parameter values\nsurface_PAR: function (or array in the future) for the photosynthetically available radiation at the surface,   which should be f(x, y, t) where x and y are the native coordinates (i.e. meters for rectilinear grids  and latitude/longitude as appropriate)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Boundary-Conditions","page":"Library","title":"Boundary Conditions","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries","page":"Library","title":"OceanBioME.Boundaries","text":"Boundary conditions for air/sea and sediment flux. \n\nCurrently implemented:\n\ngasexchange (Wanninkhof, 1992)\nGeneric air-sea flux model described by Wanninkhof (1992) but only setup for CO₂ and O₂.\nForces the DIC and oxygen fields, and requires temp (in centigrade) and salinity, plus current DIC and ALK concentration.\nSediments\nSoetaert (Soetaert et al., 2000)\nsimple (integrated) sediment model described by Soetaert et al. (2000), where organic matter  that sinks to the bottom is stored, decays into NO₃ and NH₄, and takes up O₂ in the process.\nExtended to attribute the corresponding release of DIC.\nForced by O₂, NO₃, NH₄ and particle concentration in bottom cell.\nInstant remineralisation \nsimple model from Aumont et al. (2015), where sinking organic matter is instantly remineralised  and returned to the bottom cell\nsome fraction is stored permanently in the sediment at an efficiency given by Dunne et al. (2007)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Boundaries.GasExchange-Union{Tuple{}, Tuple{PCO}, Tuple{AP}, Tuple{AC}, Tuple{FT}, Tuple{βP}, Tuple{ScP}} where {ScP, βP, FT, AC, AP, PCO}","page":"Library","title":"OceanBioME.Boundaries.GasExchange","text":"GasExchange(; gas,\n              schmidt_params::ScP = (CO₂ = (A=2073.1, B=125.62, C=3.6276, D=0.043219),\n                               O₂ = (A=1953.4, B=128.0, C=3.9918, D=0.050091))[gas],\n              solubility_params::βP = (CO₂ = (A₁=-60.2409, A₂=93.4517, A₃=23.3585, B₁=0.023517, B₂=-0.023656, B₃=0.0047036),\n                                 O₂ = (A₁=-58.3877, A₂=85.8079, A₃=23.8439, B₁=-0.034892, B₂=0.015568, B₃=-0.0019387))[gas],\n              ocean_density::FT = 1026, # kg/m³\n              air_concentration::AC = (CO₂ = 413.4, O₂ = 9352.7)[gas], # ppmv, mmolO₂/m³ (20.95 mol O₂/mol air, 0.0224m^3/mol air)\n              air_pressure::FT = 1.0, # atm\n              average_wind_speed::FT = 10, # m/s\n              field_dependencies = (CO₂ = (:DIC, :ALK), O₂ = (:OXY, ))[gas])\n\nConstruct an Oceananigans FluxBoundaryCondition for the exchange of gas with the relevant tracer (i.e., DIC for CO₂ and oxygen for O₂). Please see note for other gases.\n\nKeyword arguments\n\ngas: (required) the gas to be exchanged, if :CO₂ or :O₂ are specified then all other settings may be infered\nschmidt_params : named tuple of parameters for calculating the Schmidt number using the parameterisation of Wanninkhof (1992)\nsolubility_params : named tuple of parameters for calculating the solubility (for O₂ the Bunsen solubility and CO₂ K₀, see note)\nocean_density : density of the ocean in kg/m³\nair_concentratio : concentration of the gas in air in relivant units (i.e. ppmv for CO₂ and mmol O₂/m³ for O₂), can also be a function of x, y, t, or a field\nair_pressure : air pressure in atm (only used for CO₂), can also be a function of x, y, t, or a field\naverage_wind_speed : average wind speed at 10m used to calculate the gas transfer velocity by the Wanninkhof (1992) parameterisation\nfield_dependencies : tracer fields that gas exchange depends on, if the defaults have different names in your model you can specify as long as they are in the same order\npCO₂ : pCO₂ calculator\n\nnote: Gases other than CO₂ and O₂\nThis model is fully capable of exchanging any gas but the parameters have only been configured for CO₂ and O₂, and the specific formulation is only ensured for these gasses. For any gas where the Wanninkhof (1992) parameterisation returns the Bunsen Solubility Coefficient this model will work out of the box and can just be passed new parameters. For the other solubility types (i.e. K₀, K' and f) you will need to overload the (gasexchange::GasExchange) function to ensure the correct formulaiton.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries.Sediments]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.InstantRemineralisation","page":"Library","title":"OceanBioME.Boundaries.Sediments.InstantRemineralisation","text":"struct InstantRemineralisation\n\nHold the parameters and fields the simplest benthic boundary layer where organic carbon is assumed to remineralise instantly with some portion  becoming N, and a fraction being permanently buried.\n\nBurial efficiency from Dunne et al. (2007).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.InstantRemineralisation-Tuple{}","page":"Library","title":"OceanBioME.Boundaries.Sediments.InstantRemineralisation","text":"InstantRemineralisation(; grid,\n    burial_efficiency_constant1::FT = 0.013,\n    burial_efficiency_constant2::FT = 0.53,\n    burial_efficiency_half_saturation::FT = 7)\n\nReturn a single-layer instant remineralisaiton model for NPZD bgc models.\n\nExample\n\nusing OceanBioME, Oceananigans, OceanBioME.Sediments\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200))\n\nsediment_model = InstantRemineralisation(; grid)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.SimpleMultiG","page":"Library","title":"OceanBioME.Boundaries.Sediments.SimpleMultiG","text":"struct SimpleMultiG\n\nHold the parameters and fields for a simple \"multi G\" single-layer sediment model. Based on the Level 3 model described by Soetaert et al. (2000).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.SimpleMultiG-Tuple{}","page":"Library","title":"OceanBioME.Boundaries.Sediments.SimpleMultiG","text":"SimpleMultiG(; grid\n               fast_decay_rate = 2/day,\n               slow_decay_rate = 0.2/day,\n               fast_redfield = 0.1509,\n               slow_redfield = 0.13,\n               fast_fraction = 0.74,\n               slow_fraction = 0.26,\n               refactory_fraction = 0.1,\n               nitrate_oxidation_params = arch_array(architecture(grid), [- 1.9785, 0.2261, -0.0615, -0.0289, - 0.36109, - 0.0232]),\n               denitrification_params = arch_array(architecture(grid), [- 3.0790, 1.7509, 0.0593, - 0.1923, 0.0604, 0.0662]),\n               anoxic_params = arch_array(architecture(grid), [- 3.9476, 2.6269, - 0.2426, -1.3349, 0.1826, - 0.0143]),\n               solid_dep_params = arch_array(architecture(grid), [0.233, 0.336, 982.0, - 1.548]))\n\nReturn a single-layer \"multi G\" sediment model (SimpleMultiG) on grid, where parameters can be optionally specified.\n\nThe model is a single layer (i.e. does not include porous diffusion) model with three classes of sediment organic matter which decay at three different rates (fast, slow, refactory). The nitrification/denitrification/anoxic mineralisation fractions default to the parameterisation of Soetaert et al. 2000; doi:10.1016/S0012-8252(00)00004-0.\n\nThis model has not yet been validated or compared to observational data. The variety of degridation processes is likely to be strongly dependent on oxygen availability (see https://bg.copernicus.org/articles/6/1273/2009/bg-6-1273-2009.pdf) so it will therefore be important to also thoroughly validate the oxygen model (also currently limited).\n\nExample\n\njulia> using OceanBioME, Oceananigans, OceanBioME.Sediments\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> sediment_model = SimpleMultiG(; grid)\n┌ Warning: Sediment models are an experimental feature and have not yet been validated.\n└ @ OceanBioME.Boundaries.Sediments ~/OceanBioME.jl/src/Boundaries/Sediments/simple_multi_G.jl:102\n[ Info: This sediment model is currently only compatible with models providing NH₄, NO₃, O₂, and DIC.\nSingle-layer multi-G sediment model (Float64)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Box-Model","page":"Library","title":"Box Model","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.BoxModels]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.BoxModels","page":"Library","title":"OceanBioME.BoxModels","text":"Integrate biogeochemical models on a single point\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.BoxModels.BoxModel-Union{Tuple{}, Tuple{PF}, Tuple{C}, Tuple{B}} where {B, C, PF}","page":"Library","title":"OceanBioME.BoxModels.BoxModel","text":"BoxModel(; biogeochemistry::B,\n           forcing = NamedTuple(),\n           timestepper = :RungeKutta3,\n           clock::C = Clock(0.0, 0, 1),\n           prescribed_fields::PF = (:T, :PAR))\n\nConstructs a box model of a biogeochemistry model. Once this has been constructed you can set initial condiitons by set!(model, X=1.0...) and then run!(model).\n\nKeyword Arguments\n\nbiogeochemistry: (required) an OceanBioME biogeochemical model, most models must be passed a grid which can be set to BoxModelGrid for box models\nforcing: NamedTuple of additional forcing functions for the biogeochemical tracers to be integrated\ntimestepper: Timestepper to integrate model\nclock: Oceananigans clock to keep track of time\nprescribed_fields: Tuple of fields names (Symbols) which are not integrated but provided in forcing as a function of time with signature f(t)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.Fields.set!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Fields.set!","text":"set!(model::BoxModel; kwargs...)\n\nSet the values for a BoxModel\n\nArguments\n\nmodel - the model to set the arguments for\n\nKeyword Arguments\n\nvariables and value pairs to set\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.TimeSteppers.store_tendencies!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.TimeSteppers.store_tendencies!","text":"Store previous source terms before updating them. \n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Aumont, O.; Ethé, C.; Tagliabue, A.; Bopp, L. and Gehlen, M. (2015). PISCES-v2: An ocean biogeochemical model for carbon and ecosystem studies. Geoscientific Model Development 8, 2465–2513.\n\n\n\nBroch, O. J.; Alver, M. O.; Bekkby, T.; Gundersen, H.; Forbord, S.; Handå, A.; Skjermo, J. and Hancke, K. (2019). The kelp cultivation potential in coastal and offshore regions of Norway. Frontiers in Marine Science 5.\n\n\n\nBroch, O. J.; Ellingsen, I. H.; Forbord, S.; Wang, X.; Volent, Z.; Alver, M. O.; Handå, A.; Andresen, K.; Slagstad, D.; Reitan, K. I.; Olsen, Y. and Skjermo, J. (2013). Modelling the cultivation and bioremediation potential of the kelp Saccharina latissima in close proximity to an exposed salmon farm in Norway. Aquaculture Environment Interactions 4, 187–206.\n\n\n\nBroch, O. J. and Slagstad, D. (2012). Modelling seasonal growth and composition of the kelp Saccharina latissima. Journal of Applied Phycology 24, 759–776.\n\n\n\nChen, M.; Fan, M.; Liu, R.; Wang, X.; Yuan, X. and Zhu, H. (2015). The dynamics of temperature and light on the growth of phytoplankton. Journal of Theoretical Biology 385, 8–19.\n\n\n\nDunne, J. P.; Sarmiento, J. L. and Gnanadesikan, A. (2007). A synthesis of global particle export from the surface ocean and cycling through the ocean interior and on the seafloor. Global Biogeochemical Cycles 21.\n\n\n\nFossberg, J.; Forbord, S.; Broch, O. J.; Malzahn, A. M.; Jansen, H.; Handå, A.; Førde, H.; Bergvik, M.; Fleddum, A. L.; Skjermo, J. and Olsen, Y. (2018). The potential for upscaling kelp (Saccharina latissima) cultivation in salmon-driven integrated multi-trophic aquaculture (IMTA). Frontiers in Marine Science 9.\n\n\n\nKarleskind, P.; Lévy, M. and Memery, L. (2011). Subduction of carbon, nitrogen, and oxygen in the northeast Atlantic. Journal of Geophysical Research: Oceans 116.\n\n\n\nKuhn, A. M.; Fennel, K. and Mattern, J. P. (2015). Model investigations of the North Atlantic spring bloom initiation. Progress in Oceanography 138, 176–193.\n\n\n\nLévy, M.; Gavart, M.; Mémery, L.; Caniaux, G. and Paci, A. (2005). A four-dimensional mesoscale map of the spring bloom in the northeast Atlantic (POMME experiment): Results of a prognostic model. Journal of Geophysical Research C: Oceans 110, 1–23.\n\n\n\nLévy, M.; Klein, P. and Treguier, A.-M. (2001). Impact of sub-mesoscale physics on production and subduction of phytoplankton in an oligotrophic regime. Journal of Marine Research 59, 535–565.\n\n\n\nMacAladay, J. (1998). Environmental Chemistry, Eighth Edition (Oxford University Press); pp. 271–291.\n\n\n\nMorel, A. (1988). Optical modeling of the upper ocean in relation to its biogenous matter content (case I waters). Journal of Geophysical Research 93, 10749.\n\n\n\nResplandy, L.; Lévy, M.; D'Ovidio, F. and Merlivat, L. (2009). Impact of submesoscale variability in estimating the air-sea CO2 exchange: Results from a model study of the POMME experiment. Global Biogeochemical Cycles 23.\n\n\n\nResplandy, L.; Martin, A. P.; Moigne, F. L.; Martin, P.; Aquilina, A.; Mémery, L.; Lévy, M. and Sanders, R. (2012). How does dynamical spatial variability impact 234Th-derived estimates of organic export? Deep-Sea Research Part I: Oceanographic Research Papers 68, 24–45.\n\n\n\nSoetaert, K.; Middelburg, J. J.; Herman, P. M. and Buis, K. (2000). On the coupling of benthic and pelagic biogeochemical models. Earth-Science Reviews 51, 173–201.\n\n\n\nStrong-Wright, J. and Taylor, J. (2022). Modeling the Growth Potential of the Kelp Saccharina Latissima in the North Atlantic. Frontiers in Marine Science 8.\n\n\n\nTaylor, J. R. (2016). Turbulent mixing, restratification, and phytoplankton growth at a submesoscale eddy. Geophysical Research Letters 43, 5784–5792.\n\n\n\nWanninkhof, R. (1992). Relationship between wind speed and gas exchange over the ocean. Journal of Geophysical Research 97, 7373–7382.\n\n\n\n","category":"page"},{"location":"appendix/params/#parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"These pages contain most of the parameters used in the models included in OceanBioME.jl for ease of reference.","category":"page"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"Units are generally mmol X / m³ for concentration, and SI otherwise.","category":"page"},{"location":"model_components/individuals/#individuals","page":"Overview","title":"Individuals","text":"","category":"section"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"The effects of individuals can be modelled in OceanBioME. We have implemented this through custom dynamics in the Lagrangian Particle tracking feature of Oceananigans. We have extended these functionalities to make it easier to implement \"active\" particles which interact with the tracers. We have then implemented a model of sugar kelp which can be followed as an example of using this functionality.","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"To setup particles first create a particle type with the desired properties, e.g.:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME.Particles: BiogeochemicalParticles\n\nstruct GrowingParticles{FT, VT} <: BiogeochemicalParticles \n    nutrients_half_saturation :: FT\n\n    size :: VT\n    nitrate_uptake :: VT\n\n    x :: VT\n    y :: VT\n    z :: VT\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"You then need to overload particular functions to integrate the growth, so they need to first be imported:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"import Oceananigans.Biogeochemistry: update_tendencies!\nimport Oceananigans.Models.LagrangianParticleTracking: update_lagrangian_particle_properties!","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"First, to integrate the particles properties we overload update_lagrangian_particle_properties!; in this fictitious case we will have a Mondo-quota nutrient uptake and growth:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using Oceananigans.Fields: interpolate\n\nfunction update_lagrangian_particle_properties!(particles::GrowingParticles, model, bgc, Δt)\n    @inbounds for p in 1:length(particles)\n        nutrients = @inbounds interpolate(model.tracers.NO₃, particle.x[p], particle.y[p], particle.z[p])\n\n        uptake = nutrients / (particle.nutrients_half_saturation + nutrients)\n\n        particles.size[p] += uptake * Δt\n        particles.nitrate_uptake[p] = uptake\n    end\n    return nothing\nend\n\nnothing #hide","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"In this example the particles will not move around, and are only integrated on a single thread. For a more comprehensive example see the Sugar Kelp implementation. We then need to update the tracer tendencies to match the nutrients' uptake:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME.Particles: get_node\n\nfunction update_tendencies!(bgc, particles::GrowingParticles, model)\n    @inbounds for p in 1:length(particles)\n        i, j, k = fractional_indices((x, y, z), grid, Center(), Center(), Center())\n\n        # Convert fractional indices to unit cell coordinates 0 ≤ (ξ, η, ζ) ≤ 1\n        # and integer indices (with 0-based indexing).\n        ξ, i = modf(i)\n        η, j = modf(j)\n        ζ, k = modf(k)\n\n        # Round to nearest node and enforce boundary conditions\n        i, j, k = (get_node(TX(), Int(ifelse(ξ < 0.5, i + 1, i + 2)), grid.Nx),\n                   get_node(TY(), Int(ifelse(η < 0.5, j + 1, j + 2)), grid.Ny),\n                   get_node(TZ(), Int(ifelse(ζ < 0.5, k + 1, k + 2)), grid.Nz))\n\n        node_volume = volume(i, j, k, grid, Center(), Center(), Center())\n\n        model.timestepper.Gⁿ.NO₃[i, j, k] += particles.nitrate_uptake[p] / (d * node_volume)\n    end\n    return nothing\nend\n\nnothing #hide","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"Now we can just plug this into any biogeochemical model setup to have particles (currently NPZD and LOBSTER):","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME, Oceananigans\n\nLx, Ly, Lz = 1000, 1000, 100\ngrid = RectilinearGrid(; size = (64, 64, 16), extent = (Lx, Ly, Lz))\n\n# Start the particles randomly distributed, floating on the surface\nparticles = GrowingParticles(0.5, zeros(3), zeros(3), rand(3) * Lx, rand(3) * Ly, zeros(3))\n\nbiogeochemistry = LOBSTER(; grid, particles)","category":"page"},{"location":"model_implementation/#model_implementation","page":"Implementing new models","title":"Implementing a new models","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Here we describe how OceanBioME defines biogeochemical (BGC) models, how this varies from Oceananigans, and how to implement your own model.","category":"page"},{"location":"model_implementation/#Model-structure","page":"Implementing new models","title":"Model structure","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"OceanBioME BGC models are structs of type ContinuousFormBiogeochemistry, which is of abstract type AbstractContinuousFormBiogeochemistry from Oceananigans. In Oceananigans this describes BGC models which are defined using continuous functions (depending continuously on x, y, and z) rather than discrete functions (depending on i, j, k). This allows the user to implement the BGC model equations without worrying about details of the grid or discretization, and then Oceananigans handles the rest.","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"OceanBioME's ContinuousFormBiogeochemistry adds a layer on top of this which makes it easy to add light attenuation models, sediment, and biologically active particles (or individual-based models). OceanBioME's ContinuousFormBiogeochemistry includes parameters in which the types of these components are stored. This means that these model components will automatically be integrated into the BGC model without having to add new methods to call Oceananigans functions. ","category":"page"},{"location":"model_implementation/#Implementing-a-model","page":"Implementing new models","title":"Implementing a model","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The nature of multiple dispatch in Julia means that we define new BGC models as new types. You can then define methods to this type which are used by OceanBioME and Oceananigans to integrate the model.","category":"page"},{"location":"model_implementation/#The-basics","page":"Implementing new models","title":"The basics","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"For this example we are going to implement the simple Nutrient-Phytoplankton model similar to that used in (Chen et al., 2015), although we neglect the nutrient in/outflow terms since they may be added as boundary conditions, and modified to conserve nitrogen.","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The first step is to import the abstract type from OceanBioME, some units from Oceananigans (for ease of parameter definition), and import some functions from Oceananigans in order to add methods to:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Biogeochemistry: AbstractContinuousFormBiogeochemistry\nusing Oceananigans.Units\n\nimport Oceananigans.Biogeochemistry: required_biogeochemical_tracers,\n                                     required_biogeochemical_auxiliary_fields,\n                                     biogeochemical_drift_velocity","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We then define our struct with the model parameters, as well as slots for the particles, light attenuation, and sediment models:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@kwdef struct NutrientPhytoplankton{FT, W} <: AbstractContinuousFormBiogeochemistry\n            base_growth_rate :: FT = 1.27 / day              # 1 / seconds\n    nutrient_half_saturation :: FT = 0.025 * 1000 / 14       # mmol N / m³\n       light_half_saturation :: FT = 300.0                   # micro einstein / m² / s\n        temperature_exponent :: FT = 0.24                    # 1\n     temperature_coefficient :: FT = 1.57                    # 1\n         optimal_temperature :: FT = 28.0                    # °C\n              mortality_rate :: FT = 0.15 / day              # 1 / seconds\n     crowding_mortality_rate :: FT = 0.004 / day / 1000 * 14 # 1 / seconds / mmol N / m³\n            sinking_velocity :: W  = 2 / day\nend","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Here, we use descriptive names for the parameters. Below, each of these parameters correspond to a symbol (or letter) which is more convenient mathematically and when defining the BGC model functions. In the above code we used @kwdef to set default values for the models so that we don't have to set all of these parameters each time we use the model. The default parameter values can optionally be over-ridden by the user when running the model. We have also included a sinking_velocity field in the parameter set to demonstrate how we can get tracers (e.g. detritus) to sink. We also need to define some functions so that OceanBioME and Oceananigans know what tracers and auxiliary fields (e.g. light intensity) we use:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"required_biogeochemical_tracers(::NutrientPhytoplankton) = (:N, :P, :T)\n\nrequired_biogeochemical_auxiliary_fields(::NutrientPhytoplankton) = (:PAR, )","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Next, we define the functions that specify how the phytoplankton P evolve. In the absence of advection and diffusion (both of which are handled by Oceananigans), we want the phytoplankton to evolve at the rate given by:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"fracpartial Ppartial t = mu g(T) f(N) h(PAR) P - mP - bP^2","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"where mu corresponds to the parameter base_growth_rate, m corresponds to the parameter mortality_rate, and b corresponds to the parameter crowding_mortality_rate. Here, the functions g, f, and h are defined by:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"beginalign\ng(T) = c_1expleft(-c_2T - T_optright)\nf(N) = fracNk_N + N\nh(PAR) = fracPARk_P + PAR\nendalign","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"where c_1 corresponds to temperature_coefficient,  c_2 corresponds to temperature_exponent, T_opt corresponds to optimal_temperature, k_N corresponds to nutrient_half_saturation, and k_P corresponds to light_half_saturation. ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We turn this into a function for our model by writing:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@inline function (bgc::NutrientPhytoplankton)(::Val{:P}, x, y, z, t, N, P, T, PAR)\n    μ = bgc.base_growth_rate\n    m = bgc.mortality_rate\n    b = bgc.crowding_mortality_rate\n\n    growth = μ * g(bgc, T) * f(bgc, N) * h(bgc, PAR) * P\n\n    death = m * P + b * P ^ 2\n\n    return growth - death\nend\n\n@inline function g(bgc, T)\n    c₁ = bgc.temperature_coefficient\n    c₂ = bgc.temperature_exponent\n    Tₒ = bgc.optimal_temperature\n\n    return c₁ * exp(-c₂ * abs(T - Tₒ))\nend\n\n@inline function f(bgc, N)\n    kₙ = bgc.nutrient_half_saturation\n\n    return N / (N + kₙ)\nend\n\n@inline function h(bgc, PAR)\n    kₚ = bgc.light_half_saturation\n\n    return PAR / (PAR + kₚ)\nend","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The first parameter ::Val{:P} is a special value type that allows this function to be dispatched when it is given the value Val(:P). This is how Oceananigans tells the model which forcing function to use. At the start of the NutrientPhytoplankton function we unpack some parameters from the model, then calculate each term, and return the total change (the gain minus the loss). ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"For this model, the nutrient evolution can be inferred from the rate of change of phytoplankton. Since this is a simple two variable model and the total concentration is conserved, ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"fracpartial Npartial t = - fracpartial Ppartial t","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Hence, we define the nutrient forcing using as the negative of the phytoplankton forcing","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@inline (bgc::NutrientPhytoplankton)(::Val{:N}, args...) = -bgc(Val(:P), args...)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Finally, we need to define some functions to allow us to update the time-dependent parameters (in this case the PAR and temperature, T):","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME: BoxModel\nimport OceanBioME.BoxModels: update_boxmodel_state!\n\nfunction update_boxmodel_state!(model::BoxModel{<:NutrientPhytoplankton, <:Any, <:Any, <:Any, <:Any, <:Any})\n    getproperty(model.values, :PAR) .= model.forcing.PAR(model.clock.time)\n    getproperty(model.values, :T) .= model.forcing.T(model.clock.time)\nend","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now we can run an example similar to the LOBSTER box model example:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME, Oceananigans.Units\n\nconst year = years = 365days\n\n@inline PAR⁰(t) = 500 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nz = -10 # specify the nominal depth of the box for the PAR profile\n@inline PAR(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay \n\n@inline temp(t) = 2.4 * cos(t * 2π / year + 50days) + 26\n\nbiogeochemistry = NutrientPhytoplankton() \n\nmodel = BoxModel(; biogeochemistry, forcing = (; PAR, T = temp))\n\nset!(model, N = 15, P = 15)\n\nsimulation = Simulation(model; Δt = 5minutes, stop_time = 5years)\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, model.fields; filename = \"box_np.jld2\", schedule = TimeInterval(10days), overwrite_existing = true)\n\n# ## Run the model (should only take a few seconds)\n@info \"Running the model...\"\nrun!(simulation)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can then visualise this:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"P = FieldTimeSeries(\"box_np.jld2\", \"P\")\nN = FieldTimeSeries(\"box_np.jld2\", \"N\")\n\ntimes = P.times\n\n# ## And plot\nusing CairoMakie\n\nfig = Figure(resolution = (1200, 480), fontsize = 20)\n\naxN= Axis(fig[1, 1], ylabel = \"Nutrient \\n(mmol N / m³)\")\nlines!(axN, times / year, N[1, 1, 1, :], linewidth = 3)\n\naxP = Axis(fig[1, 2], ylabel = \"Phytoplankton \\n(mmol N / m³)\")\nlines!(axP, times / year, P[1, 1, 1, :], linewidth = 3)\n\naxPAR= Axis(fig[2, 1], ylabel = \"PAR (einstein / m² / s)\", xlabel = \"Time (years)\")\nlines!(axPAR, times / year, PAR.(times), linewidth = 3)\n\naxT = Axis(fig[2, 2], ylabel = \"Temperature (°C)\", xlabel = \"Time (years)\")\nlines!(axT, times / year, temp.(times), linewidth = 3)\n\nfig","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"So now we know it works.","category":"page"},{"location":"model_implementation/#Phytoplankton-sinking","page":"Implementing new models","title":"Phytoplankton sinking","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now that we have a fully working BGC model we might want to add some more features. Another aspect that is easy to add is negative buoyancy (sinking). To-do this all we do is add a method to the Oceananigans function biogeochemical_drift_velocity, and we use ::Val{:P} to specify that only phytoplankton will sink. Above, we set the default value of the parameter bgc.sinking_velocity. We can override this when we call the BGC model like NutrientPhytoplankton(; light_attenuation_model, sinking_velocity = 1/day). Note that before using biogeochemical_drift_velocity, we need to import several Fields from Oceananigans:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using Oceananigans.Fields: ZeroField, ConstantField\n\nbiogeochemical_drift_velocity(bgc::NutrientPhytoplankton, ::Val{:P}) = \n    (u = ZeroField(), v = ZeroField(), w = bgc.sinking_velocity)","category":"page"},{"location":"model_implementation/#Sediment-model-coupling","page":"Implementing new models","title":"Sediment model coupling","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Another aspect that OceanBioME includes is sediment models. Doing this varies between sediment models, but for the most generic and simplest, all we need to do is add methods to two functions:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME.Boundaries.Sediments: sinking_flux\n\nimport OceanBioME.Boundaries.Sediments: nitrogen_flux, carbon_flux, remineralisation_receiver, sinking_tracers\n\n@inline nitrogen_flux(i, j, k, grid, advection, bgc::NutrientPhytoplankton, tracers) =\n     sinking_flux(i, j, k, grid, advection, Val(:P), bgc, tracers)\n                 \n@inline carbon_flux(i, j, k, grid, advection, bgc::NutrientPhytoplankton, tracers) = nitrogen_flux(i, j, k, grid, advection, bgc, tracers) * 6.56\n\n@inline remineralisation_receiver(::NutrientPhytoplankton) = :N\n\n@inline sinking_tracers(::NutrientPhytoplankton) = (:P, )","category":"page"},{"location":"model_implementation/#Putting-it-together","page":"Implementing new models","title":"Putting it together","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now that we have added these elements we can put it together into another simple example:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using Oceananigans, OceanBioME\nusing OceanBioME.Sediments: InstantRemineralisation\n\n# define some simple forcing\n\n@inline surface_PAR(t) = 200 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline ∂ₜT(z, t) = - 2π / year * sin(t * 2π / year + 50days)\n\n@inline κₚ(z) = 1e-2 * (1 + tanh((z - 50) / 10)) / 2 + 1e-4\n\n# define the grid\n\ngrid = RectilinearGrid(topology = (Flat, Flat, Bounded), size = (32, ), extent = (100, ))\n\n# setup the biogeochemical model\n\nlight_attenuation = TwoBandPhotosyntheticallyActiveRadiation(; grid, surface_PAR)\n\nsediment = InstantRemineralisation(; grid)\n\nsinking_velocity = ZFaceField(grid)\n\nw_sink(z) = 2 / day * tanh(z / 5)\n\nset!(sinking_velocity, w_sink)\n\nnegative_tracer_scaling = ScaleNegativeTracers((:N, :P))\n\nbiogeochemistry = Biogeochemistry(NutrientPhytoplankton(; sinking_velocity);\n                                  light_attenuation,\n                                  sediment,\n                                  modifiers = negative_tracer_scaling) \n\nκ = CenterField(grid)\n\nset!(κ, κₚ)\n\n# put the model together\n\nmodel = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              closure = ScalarDiffusivity(ν = κ; κ), \n                              forcing = (; T = ∂ₜT))\n\nset!(model, P = 0.01, N = 15, T = 28)\n\n# run\n\nsimulation = Simulation(model, Δt = 9minutes, stop_time = 1years)\n\nsimulation.output_writers[:tracers] = JLD2OutputWriter(model, model.tracers,\n                                                       filename = \"column_np.jld2\",\n                                                       schedule = TimeInterval(1day),\n                                                       overwrite_existing = true)\n\nsimulation.output_writers[:sediment] = JLD2OutputWriter(model, model.biogeochemistry.sediment.fields,\n                                                        indices = (:, :, 1),\n                                                        filename = \"column_np_sediment.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can then visualise this:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"N = FieldTimeSeries(\"column_np.jld2\", \"N\")\nP = FieldTimeSeries(\"column_np.jld2\", \"P\")\n\nsed = FieldTimeSeries(\"column_np_sediment.jld2\", \"N_storage\")\n\nfig = Figure()\n\naxN = Axis(fig[1, 1], ylabel = \"z (m)\")\naxP = Axis(fig[2, 1], ylabel = \"z (m)\")\naxSed = Axis(fig[3, 1:2], ylabel = \"Sediment (mmol N / m²)\", xlabel = \"Time (years)\")\n\n_, _, zc = nodes(grid, Center(), Center(), Center())\ntimes = N.times\n\nhmN = heatmap!(axN, times ./ year, zc, N[1, 1, 1:grid.Nz, 1:end]',\n               interpolate = true, colormap = Reverse(:batlow))\n\nhmP = heatmap!(axP, times ./ year, zc, P[1, 1, 1:grid.Nz, 1:end]',\n               interpolate = true, colormap = Reverse(:batlow))\n\nlines!(axSed, times ./ year, sed[1, 1, 1, :])\n\nColorbar(fig[1, 2], hmN, label = \"Nutrient (mmol N / m³)\")\nColorbar(fig[2, 2], hmP, label = \"Phytoplankton (mmol N / m³)\")\n\nfig","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can see in this that some phytoplankton sink to the bottom, and are both remineralized back into nutrients and stored in the sediment.","category":"page"},{"location":"model_implementation/#Final-notes","page":"Implementing new models","title":"Final notes","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"When implementing a new model we recommend following a testing process as we have here, starting with a box model, then a column, and finally using it in a realistic physics scenarios. We have found this very helpful for spotting bugs that were proving difficult to decipher in other situations. You can also add Individuals, light attenuation models, and sediment models in a similar fashion.","category":"page"},{"location":"generated/O₂ air-sea exchange_parameters/#O-air-sea-exchange-default-parameters","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange default parameters","text":"","category":"section"},{"location":"generated/O₂ air-sea exchange_parameters/","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange","text":"Name Value\ngas Val{:O₂}()\nschmidt_params (A = 1953.4, B = 128.0, C = 3.9918, D = 0.050091)\nsolubility_params (A₁ = -58.3877, A₂ = 85.8079, A₃ = 23.8439, B₁ = -0.034892, B₂ = 0.015568, B₃ = -0.0019387)\nocean_density 1024.5\nair_concentration 9352.7\nair_pressure 1.0\naverage_wind_speed 10.0","category":"page"},{"location":"model_components/individuals/slatissima/#SLatissima","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar kelp (Saccharina latissima) individuals","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"We have implemented a model of sugar kelp growth within this spatially infinitesimal Lagrangian particles framework originally based on the model of Broch and Slagstad (2012) and updated by Broch et al. (2013), Fossberg et al. (2018), and Broch et al. (2019). This is the same model passively forced by Strong-Wright and Taylor (2022).","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The model tracks three variables, the frond area, A (dm²), carbon reserve, C (gC / gSW), and nitrate reserve, N (gN / gSW). The growth depends on the nitrate (and optionally ammonia) availability in the water, the temperature, and light availability. The minimum required coupling is with nitrates so the model can be coupled with an NPZD model, but can optionally uptake ammonia, DIC (CO₂), oxygen, and release dissolved organic matter (from exudation) and large detritus.  ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Results could look something like this (from Strong-Wright and Taylor (2022)): (Image: Example A, N, and C profiles from [StrongWright2022](@citet))","category":"page"},{"location":"model_components/individuals/slatissima/#Model-equations","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Model equations","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"As per Broch and Slagstad (2012) this model variables evolve as:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"beginalign\nfracdAdt  = left(mu - nuright)A \nfracdNdt  = J - mu(N + N_textstruct) \nfracdCdt  = P(1 - E) - R - mu(C + C_textstruct)\nendalign","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The apical frond loss given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"nu = frac10^-6exp(varepsilon A)1 + 10^-6(exp(varepsilon A) - 1)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The growth given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu = f_textareaf_textseasonalf_texttempminleft(mu_c max(mu_NO_3 mu_NH_4)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"beginalign\nf_textarea  = m_1exp(-(AA_0)^2) + m_2 \nf_textseasonal  = a_1(1 + textsgn(lambda(n))lambda(n)^12) + a_2 \nf_texttemp  = left beginarrayll\n                      008T + 02  -18leq T  10 \n                      1            10 leq T leq 15 \n                      194 - T4   15  T leq 19 \n                      0            T  19\n                   endarray right\nendalign","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where n is the day of the year, lambda is the normalised day length change, and T is the temperature in degrees centigrade. The limiting rates (mu_c, mu_NO_3, mu_NH_4) depend on the availability of carbon giving:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_c = 1 - fracC_textminC","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and on the available nitrogen which is either limited by the instantaneous uptake of ammonia, or the nitrogen reserve. To find these limits J, the nutrient uptake, must first be found (Fossberg et al., 2018). The uptake is calculated by first finding the NO_3 uptake rate:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"J_NO_3 = J_NO_3text maxf_textcurrfracN_textmax - NN_textmax - N_textminfracNO_3k_NO_3 + NO_3","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where f_curr = c_1(1 - exp(-u  c_2)) + c_3 (Broch et al., 2019) where u is the relative current speed. We then calculate the potential ammonia uptake:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"tildeJ_NH_4 = J_NH_4text maxf_textcurrfracNH_4k_NH_4 + NH_4","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"This results in a theoretical instantaneous area increase rate of:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_NH_4 = frac1N_textmin + N_textstructfractildeJ_NH_4k_A","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"or growth from reserves of:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_NO_3 = 1 - fracN_textminN","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The actual resulting ammonia uptake is then:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"J_NH_4 = minleft(tildeJ_NH_4 mu k_A (N_textmin + N_textstruct)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and the total uptake J = fracJ_NH_4 + J_NO_3k_A.","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The production of carbon from photosynthesis is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P = P_Sleft1 - expleft(fracalpha PARP_Sright)rightexpleft(fracbeta PARP_Sright)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where PAR is the photosynthetically available radiation and","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_S = fracalpha I_textsatln(1 + alphabeta)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"alpha is a constant but beta depends on the maximum photosynthetic rate which is defined by both:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_textmax = fracalpha I_textsatln(1 + alphabeta)left(fracalphaalpha + betaright)left(fracbetaalpha + betaright) ^ betaalpha","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_textmax = fracP_1expleft(fracT_APT_P1 - fracT_APTright)1 + expleft(fracT_APLT - fracT_APLT_PLright) + expleft(fracT_APHT - fracT_APHT_PHright)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where T is the temperature in kelvin and the T_X are Arrhenius temperature constants. We solve these iteratively to find beta.","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The exudation fraction is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"E = 1 - expleft(gamma(C_min - C)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"As per Broch et al. (2013) R, the respiration rate, is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"R = leftR_Aleft(fracmumu_textmax + fracJJ_textmaxright) + R_Brightexpleft(fracT_ARRT_1 - fracT_ARRTright)","category":"page"},{"location":"model_components/individuals/slatissima/#Parameter-variable-names","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Symbol Variable name Units\nA_0 growth_rate_adjustment 1 / dm²\nalpha photosynthetic_efficiency gC / dm² / s / einstein\nC_textmin minimum_carbon_reserve gC / gSW\nC_textstruct structural_carbon gC / gSW\ngamma exudation gC / g\nvarepsilon erosion 1 / dm²\nI_textsat saturation_irradiance einstein\nk_A structural_dry_weight_per_area g / dm²\nk_dw structural_dry_to_wet_weight -\nk_C carbon_reserve_per_carbon g / gC\nk_N nitrogen_reserve_per_nitrogen g / gN\nN_textmin minimum_nitrogen_reserve gN / gSW\nN_textmax maximum_nitrogen_reserve gN / gSW\nm_2 growth_adjustment_2 -\nm_1 growth_adjustment_1 -\nmu_textmax maximum_specific_growth_rate 1 / s\nN_textstruct structural_nitrogen gN / gSW\nP_1 photosynthesis_at_ref_temp_1 gC / dm² / s\nP_2 photosynthesis_at_ref_temp_2 gC / dm² / s\nT_P1 photosynthesis_ref_temp_1 °K\nT_P2 photosynthesis_ref_temp_2 °K\na_1 photoperiod_1 -\na_2 photoperiod_2 -\nR_1 respiration_at_ref_temp_1 gC / dm² / s\nR_2 respiration_at_ref_temp_2 gC / dm² / s\nT_R1 respiration_ref_temp_1 °K\nT_R2 respiration_ref_temp_2 °K\nT_AP photosynthesis_arrhenius_temp °K\nT_PL photosynthesis_low_temp °K\nT_PH photosynthesis_high_temp °K\nT_APL photosynthesis_high_arrhenius_temp °K\nT_APH photosynthesis_low_arrhenius_temp °K\nT_ARR respiration_arrhenius_temp °K\nu_0p65 current_speed_for_0p65_uptake m / s\nk_NO_3 nitrate_half_saturation mmol N / m³\nk_NH_4 ammonia_half_saturation mmol N / m³\nJ_NO_3text max maximum_nitrate_uptake gN / dm² / s\nJ_NH_4text max maximum_ammonia_uptake gN / dm² / s\nc_1 current_1 -\nc_2 current_2 1 / m / s\nc_3 current_3 -\nR_A respiration_reference_A gC / dm² / s\nR_B respiration_reference_B gC / dm² / s\n- exudation_redfield_ratio mmol C / mmol N","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"All default parameter values are given in Parameters.","category":"page"},{"location":"model_components/individuals/slatissima/#Model-conservations","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Model conservations","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Total nitrogen (and carbon where appropriate) are conserved between the individuals and biogeochemistry. The total nitrogen in each individual is:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"N_texttotal = Ak_A(N + N_textstruct)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and carbon:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"C_texttotal = Ak_A(C + C_textstruct)","category":"page"},{"location":"contributing/#Contributors-Guide","page":"Contibutors guide","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Thank you for considering contributions to OceanBioME! We hope this guide helps.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Feel free to ask us questions and chat with us at any time about any topic at all by:","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Opening a GitHub issue\nCreating a GitHub discussion","category":"page"},{"location":"contributing/#Creating-issues","page":"Contibutors guide","title":"Creating issues","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The simplest way to contribute to OceanBioME is to create or comment on issues and discussions.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The most useful bug reports:","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Provide an explicit code snippet –- not just a link –- that reproduces the bug in the latest tagged version of OceanBioME. This is sometimes called the \"minimal working example\". Reducing bug-producing code to a minimal example can dramatically decrease the time it takes to resolve an issue.\nPaste the entire error received when running the code snippet, even if it's unbelievably long.\nUse triple backticks (e.g., ```some_code; and_some_more_code;```) to enclose code snippets, and other markdown formatting syntax to make your issue easy and quick to read.\nReport the OceanBioME version, Julia version, machine (especially if using a GPU) and any other possibly useful details of the computational environment in which the bug was created.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Discussions are recommended for asking questions about (for example) the user interface, implementation details, science, and life in general.","category":"page"},{"location":"contributing/#But-I-want-to-*code*!","page":"Contibutors guide","title":"But I want to code!","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"New users help write OceanBioME code and documentation by forking the OceanBioME repository, using git to edit code and docs, and then creating a pull request. Pull requests are reviewed by OceanBioME collaborators.\nA pull request can be merged once it is reviewed and approved by collaborators. If the pull request author has write access, they have the responsibility of merging their pull request. Otherwise, OceanBioME.jl collaborators will execute the merge with permission from the pull request author.\nNote: for small or minor changes (such as fixing a typo in documentation), the GitHub editor is super useful for forking and opening a pull request with a single click.\nWrite your code with love and care. In particular, conform to existing OceanBioME style and formatting conventions. For example, we love verbose and explicit variable names, use TitleCase for types, snake_case for objects, and always.put.spaces.after.commas. For formatting decisions we loosely follow the YASGuide. It's worth few extra minutes of our time to leave future generations with well-written, readable code.","category":"page"},{"location":"contributing/#What-is-a-\"collaborator\"-and-how-can-I-become-one?","page":"Contibutors guide","title":"What is a \"collaborator\" and how can I become one?","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Collaborators have permissions to review pull requests and status allows a contributor to review pull requests in addition to opening them. Collaborators can also create branches in the main OceanBioME repository.\nWe ask that new contributors try their hand at forking OceanBioME, and opening and merging a pull request before requesting collaborator status.","category":"page"},{"location":"contributing/#What's-a-good-way-to-start-developing-OceanBioME?","page":"Contibutors guide","title":"What's a good way to start developing OceanBioME?","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Tackle an existing issue. We keep a list of good first issues that are self-contained and suitable for a newcomer to try and work on.\nTry to run OceanBioME and play around with it. If you run into any problems or find it difficult to use or understand, please open an issue!\nWrite up an example or tutorial on how to do something useful with OceanBioME, like how to set up a new configuration.\nImprove documentation or comments if you found something hard to use.\nImplement a new feature if you need it to use OceanBioME.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"If you're interested in working on something, let us know by commenting on existing issues or  by opening a new issue. This is to make sure no one else is working on the same issue and so  we can help and guide you in case there is anything you need to know beforehand.","category":"page"},{"location":"contributing/#Ground-Rules","page":"Contibutors guide","title":"Ground Rules","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Each pull request should consist of a logical collection of changes. You can include multiple bug fixes in a single pull request, but they should be related. For unrelated changes, please submit multiple pull requests.\nDo not commit changes to files that are irrelevant to your feature or bugfix (eg: .gitignore).\nBe willing to accept criticism and work on improving your code; we don't want to break other users' code, so care must be taken not to introduce bugs. We discuss pull requests and keep working on them until we believe we've done a good job.\nBe aware that the pull request review process is not immediate, and is generally proportional to the size of the pull request.","category":"page"},{"location":"contributing/#Reporting-a-bug","page":"Contibutors guide","title":"Reporting a bug","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The easiest way to get involved is to report issues you encounter when using OceanBioME or by requesting something you think is missing.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Head over to the issues page.\nSearch to see if your issue already exists or has even been solved previously.\nIf you indeed have a new issue or request, click the \"New Issue\" button.\nPlease be as specific as possible. Include the version of the code you were using, as well as what operating system you are running. The output of Julia's versioninfo() and ] status is helpful to include. Try your best to include a complete, \"minimal working example\" that reproduces the issue.","category":"page"},{"location":"contributing/#Setting-up-your-development-environment","page":"Contibutors guide","title":"Setting up your development environment","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Install Julia on your system.\nInstall git on your system if it is not already there (install XCode command line tools on a Mac or git bash on Windows).\nLogin to your GitHub account and make a fork of the OceanBioME repository by clicking the \"Fork\" button.\nClone your fork of the OceanBioME repository (in terminal on Mac/Linux or git shell/ GUI on Windows) in the location you'd like to keep it.\ngit clone https://github.com/your-user-name/OceanBioME.jl.git\nNavigate to that folder in the terminal or in Anaconda Prompt if you're on Windows.\nConnect your repository to the upstream (main project).\ngit remote add oceanbiome https://github.com/OceanBioME/OceanBioME.jl.git\nCreate the development environment by opening Julia via julia --project then typing in ] instantiate. This will install all the dependencies in the Project.toml file.\nYou can test to make sure OceanBioME works by typing in ] test. Doing so will run all the tests (and this can take a while).","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Your development environment is now ready!","category":"page"},{"location":"contributing/#Pull-Requests","page":"Contibutors guide","title":"Pull Requests","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"We follow the ColPrac guide for collaborative practices. We ask that new contributors read that guide before submitting a pull request.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Changes and contributions should be made via GitHub pull requests against the main branch.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"When you're done making changes, commit the changes you made. Chris Beams has written a  guide on how to write good commit messages.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"When you think your changes are ready to be merged into the main repository, push to your fork and submit a pull request.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Working on your first Pull Request? You can learn how from this free video series How to Contribute to an Open Source Project on GitHub, Aaron Meurer's tutorial on the git workflow, or the guide “How to Contribute to Open Source\".","category":"page"},{"location":"contributing/#Documentation","page":"Contibutors guide","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Now that you've made your awesome contribution, it's time to tell the world how to use it. Writing documentation strings is really important to make sure others use your functionality properly. Didn't write new functions? That's fine, but be sure that the documentation for the code you touched is still in great shape. It is not uncommon to find some strange wording or clarification that you can take care of while you are here.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"You can preview how the Documentation will look like after merging by building the documentation  locally. From the main directory of your local repository call","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"JULIA_DEBUG=Documenter julia --project=docs/ docs/make.jl","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"and then open docs/build/index.html in your favorite browser. Providing the environment variable  JULIA_DEBUG=Documenter will provide with more information in the documentation build process and thus help figuring out a potential bug.","category":"page"},{"location":"contributing/#Credits","page":"Contibutors guide","title":"Credits","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"This contributor's guide is heavily based on the excellent Oceananigans contributors guide which in turn is based on the MetPy contributor's guide.","category":"page"},{"location":"generated/TwoBandPhotosyntheticallyActiveRadiation_parameters/#TwoBandPhotosyntheticallyActiveRadiation-default-parameters","page":"TwoBandPhotosyntheticallyActiveRadiation","title":"TwoBandPhotosyntheticallyActiveRadiation default parameters","text":"","category":"section"},{"location":"generated/TwoBandPhotosyntheticallyActiveRadiation_parameters/","page":"TwoBandPhotosyntheticallyActiveRadiation","title":"TwoBandPhotosyntheticallyActiveRadiation","text":"Name Value\nwater_red_attenuation 0.225\nwater_blue_attenuation 0.0232\nchlorophyll_red_attenuation 0.037\nchlorophyll_blue_attenuation 0.074\nchlorophyll_red_exponent 0.629\nchlorophyll_blue_exponent 0.674\npigment_ratio 0.7\nphytoplankton_chlorophyll_ratio 1.31\nsurface_PAR #3","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"EditURL = \"../../../examples/data_assimilation.jl\"","category":"page"},{"location":"generated/data_assimilation/#Calibrating-a-biogeochemical-model-with-EnsembleKalmanProcesses","page":"Data assimilation","title":"Calibrating a biogeochemical model with EnsembleKalmanProcesses","text":"","category":"section"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"In this example we calibrate some of the parameters for the NPZD model in a simple box model setup using a data assimilation package EnsembleKalmanProcesses. First we setup the model and generate synthetic data with \"true\" parameters. We then define priors and setup an EKP to solve.","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"While this is a very simple situation it illustrates the ease of integration with data assimilation tools. Examples given in the EnsembleKalmanProcesses docs illustrate how the package can be used to solve more complex forward models.","category":"page"},{"location":"generated/data_assimilation/#Install-dependencies","page":"Data assimilation","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"First we ensure we have the required dependencies installed","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie, EnsembleKalmanProcesses, Distributions\"","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"using OceanBioME, EnsembleKalmanProcesses, JLD2, CairoMakie, Oceananigans.Units, Oceananigans\nusing LinearAlgebra, Random\n\nusing Distributions\n\nusing EnsembleKalmanProcesses\nusing EnsembleKalmanProcesses.ParameterDistributions\n\nconst year = years = 365day\n\nrng_seed = 41\nrng = Random.MersenneTwister(rng_seed)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Random.MersenneTwister(41)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Setup the forward model","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"@inline PAR⁰(t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nz = -10 # nominal depth of the box for the PAR profile\n@inline PAR(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay\n\nfunction run_box_simulation(initial_photosynthetic_slope,\n                            base_maximum_growth,\n                            nutrient_half_saturation,\n                            phyto_base_mortality_rate,\n                            j)\n\n    biogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid = BoxModelGrid,\n                                                                 initial_photosynthetic_slope,\n                                                                 base_maximum_growth,\n                                                                 nutrient_half_saturation,\n                                                                 phyto_base_mortality_rate,\n                                                                 light_attenuation_model = nothing)\n\n    model = BoxModel(; biogeochemistry, forcing = (; PAR))\n\n    set!(model, N = 10.0, P = 0.1, Z = 0.01)\n\n    simulation = Simulation(model; Δt = 20minutes, stop_time = 3years, verbose = false)\n\n    simulation.output_writers[:fields] = JLD2OutputWriter(model, model.fields; filename = \"box_calibration_$j.jld2\", schedule = TimeInterval(8hours), overwrite_existing = true)\n\n    @info \"Running the model...\"\n    run!(simulation)\n\n    P = FieldTimeSeries(\"box_calibration_$j.jld2\", \"P\")\n\n    times = P.times\n\n    return P[1, 1, 1, length(times)-1092:end], times[length(times)-1092:end]\nend","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"run_box_simulation (generic function with 1 method)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Define the forward map","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"function G(u, j)\n    (initial_photosynthetic_slope,\n     base_maximum_growth,\n     nutrient_half_saturation,\n     phyto_base_mortality_rate) = u\n\n    P, times = run_box_simulation(initial_photosynthetic_slope,\n                                  base_maximum_growth,\n                                  nutrient_half_saturation,\n                                  phyto_base_mortality_rate,\n                                  j)\n\n    peak, winter, average, peak_timing, die_off_time = extract_observables(P, times)\n\n    return [peak, winter, average, peak_timing, die_off_time], P\nend\n\nfunction extract_observables(P, times)\n    if all(P .> 0) # model failure - including just in case\n        peak = maximum(P)\n        winter = minimum(P)\n        average = mean(P)\n\n        peak_timing = times[findmax(P)[2]]\n\n        growth_rate = diff(P)[546:end]\n\n        die_off_time = times[545 + findmin(growth_rate)[2]]\n\n        return peak, winter, average, peak_timing./day, die_off_time./day\n    else\n        return NaN, NaN, NaN, NaN, NaN\n    end\nend","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"extract_observables (generic function with 1 method)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Generate the \"truth\" data (normally you would load observations etc here)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Γ = Diagonal([0.001, 0.0001, 0.002, 5., 5.])\n\nnoise_dist = MvNormal(zeros(5), Γ)\n\ntruth = (0.15/day, 0.7/day, 2.4, 0.01/day)\nobs, P₀ = G(truth, 1)\n\ny = obs .+ rand(noise_dist)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"5-element Vector{Float64}:\n    0.24901185595478453\n    0.024803204682403684\n    0.09848177567863262\n  770.6951957579561\n 1056.967772923016","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Solve the inverse problem and record all of the results for plotting purposes","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"prior_u1 = constrained_gaussian(\"initial_photosynthetic_slope\", 0.1953 / day, 0.05 / day, 0, Inf)\nprior_u2 = constrained_gaussian(\"base_maximum_growth\", 0.6989 / day, 0.1/ day, 0, Inf)\nprior_u3 = constrained_gaussian(\"nutrient_half_saturation\", 2.3868, 0.5, 0, Inf)\nprior_u4 = constrained_gaussian(\"phyto_base_mortality_rate\", 0.0101 / day, 0.01 / day, 0, Inf)\n\nprior = combine_distributions([prior_u1, prior_u2, prior_u3, prior_u4])\n\nN_ensemble = 8\nN_iterations = 5\n\ninitial_ensemble = construct_initial_ensemble(rng, prior, N_ensemble)\n\nensemble_kalman_process = EnsembleKalmanProcess(initial_ensemble, y, Γ, Inversion(); rng, failure_handler_method = SampleSuccGauss())\n\nP = zeros(1093, N_ensemble, N_iterations) # recording all of the results for plotting only (not essential)\n\nfor i in 1:N_iterations\n    @info \"Iteration: $i\"\n    params_i = get_ϕ_final(prior, ensemble_kalman_process)\n\n    G_ens = zeros(5, N_ensemble)\n\n    Threads.@threads for j in 1:N_ensemble\n        G_ens[:, j], P[:, j, i] = G(params_i[:, j], j)\n    end\n\n    update_ensemble!(ensemble_kalman_process, G_ens)\nend\n\nfinal_ensemble = get_ϕ_final(prior, ensemble_kalman_process)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"4×8 Matrix{Float64}:\n 1.82522e-6  1.46838e-6  1.64864e-6  1.58195e-6  1.65885e-6  1.79977e-6  1.75004e-6  1.81769e-6\n 5.8306e-6   6.38864e-6  6.85765e-6  7.19279e-6  5.78867e-6  7.20655e-6  6.37458e-6  6.89322e-6\n 2.99159     1.79969     3.02821     2.6736      2.12645     2.91756     2.93678     3.3585\n 2.01245e-7  6.13534e-8  1.05529e-7  6.40745e-8  1.60599e-7  1.41549e-7  1.04652e-7  1.66918e-7","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Plot the results","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"fig = Figure()\n\nn = Observable(1)\n\ntitle = @lift string(\"Generation: \", $n)\n\nP_plts = [@lift P[:, j, $n] for j in 1:N_ensemble]\n\nfig = Figure(size = (1200, 800));\n\nax = Axis(fig[1, 1], xlabel = \"Day of year\", ylabel = \"Phytoplankton concentration (mmol/m³)\"; title)\n\n[lines!(ax, [1:8hours:365days-16hours;]./day, P_plts[j], color = :black, alpha = 0.2) for j in 1:N_ensemble]\n\nlines!(ax, [1:8hours:365days-16hours;]./day, P₀, color = :black)\n\nrecord(fig, \"data_assimilation.mp4\", 1:size(P, 3); framerate = 2) do i; n[] = i; end","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"(Image: )","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"appendix/function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"appendix/function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"visualization/#Visualize-output","page":"Visualization","title":"Visualize output","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"In the examples we use Makie.jl for plotting.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Makie comes with a few backends. In the documented examples we use CairoMakie since this backend works well on headless devices, that is, devices without monitor. Because the documentation is automatically built via GitHub actions the CairoMakie backend is necessary. However, users that want to run the examples on devices with a monitor might want to change to GLMakie that displays figures in an interactive window. To do that you need to install GLMakie, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"using Pkg\npkg\"add GLMakie\"","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"and replace using CairoMakie with using GLMakie.","category":"page"},{"location":"generated/CO₂ air-sea exchange_parameters/#CO-air-sea-exchange-default-parameters","page":"CO₂ air-sea exchange","title":"CO₂ air-sea exchange default parameters","text":"","category":"section"},{"location":"generated/CO₂ air-sea exchange_parameters/","page":"CO₂ air-sea exchange","title":"CO₂ air-sea exchange","text":"Name Value\ngas Val{:CO₂}()\nschmidt_params (A = 2073.1, B = 125.62, C = 3.6276, D = 0.043219)\nsolubility_params (A₁ = -60.2409, A₂ = 93.4517, A₃ = 23.3585, B₁ = 0.023517, B₂ = -0.023656, B₃ = 0.0047036)\nocean_density 1024.5\nair_concentration 413.4\nair_pressure 1.0\naverage_wind_speed 10.0","category":"page"},{"location":"generated/OceanBioME.Boundaries.pCO₂_parameters/#OceanBioME.Boundaries.pCO-default-parameters","page":"OceanBioME.Boundaries.pCO₂","title":"OceanBioME.Boundaries.pCO₂ default parameters","text":"","category":"section"},{"location":"generated/OceanBioME.Boundaries.pCO₂_parameters/","page":"OceanBioME.Boundaries.pCO₂","title":"OceanBioME.Boundaries.pCO₂","text":"Name Value\nsolubility (C = -162.8301, invT = 21829.68, logCT = 0.01, ClogT = 90.9241, T² = -0.000147696, ST² = 4.9867e-7, ST = -0.00025225000000000003, S = 0.025695)\nbicarbonate_dissociation (C = 62.008, S = 0.0118, S² = -0.000116, invT = -3670.7, logT = -9.7944)\ncarbonate_dissociation (C = -4.777, S = 0.0184, S² = -0.000118, invT = -1394.7, logT = 0.0)\nboric_acid_dissociation (C = 148.0248, invT = -8966.9, invTsqrtS = -2890.53, invTS = -77.942, invTS¹⁵ = 1.728, invTS² = -0.0996, sqrtS = 137.1942, S = 1.62142, logT = -24.4344, logTsqrtS = -25.085, logTS = -0.2474, TsqrtS = 0.053105)\nwater_dissociaiton (C = 148.9652, invT = -13847.26, logT = -23.6521, sqrtSinvT = 118.67, sqrtS = -5.977, sqrtSlogT = 1.0495, S = -0.01615)\nlower_pH_bound 0.0\nupper_pH_bound 14.0\nboron_ratio 1.1878787997327509e-5\nthermal_expansion 0.000167\nhaline_contraction 0.00078","category":"page"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/#NutrientPhytoplanktonZooplanktonDetritus-default-parameters","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus default parameters","text":"","category":"section"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus","text":"Name Value\ninitial_photosynthetic_slope 2.2604166666666667e-6\nbase_maximum_growth 8.08912037037037e-6\nnutrient_half_saturation 2.3868\nbase_respiration_rate 7.638888888888889e-7\nphyto_base_mortality_rate 1.1689814814814814e-7\nmaximum_grazing_rate 2.4909722222222224e-5\ngrazing_half_saturation 0.5573\nassimulation_efficiency 0.9116\nbase_excretion_rate 1.1805555555555556e-7\nzoo_base_mortality_rate 3.929398148148148e-6\nremineralization_rate 1.4039351851851852e-6\nP sinking speed 1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus","text":"├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-2.95255e-6, min=-2.95255e-6, mean=-2.95255e-6| |D sinking speed|1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU ├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-3.1816e-5, min=-3.1816e-5, mean=-3.1816e-5|","category":"page"},{"location":"model_components/light/#light","page":"Light attenuation models","title":"Light attenuation models","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Nearly all BGC models require some model of the attenuation of PAR through the water. Usually this depends on the concentration of chlorophyll in the water (in phytoplankton), and may depend on the concentration of coloured dissolved organic matter or particulates.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"We currently have two models of light attenuation, a two band model by Karleskind et al. (2011) and the more widely used three band model by Morel (1988). As the light level is diagnostic of the phytoplankton concentration these models are implemented with the light level as various auxiliary fields which are updated with callbacks within the biogeochemical model.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Models requiring light attenuation models will set these up automatically, for example LOBSTER sets light_attenuation_model = TwoBandPhotosyntheticallyActiveRadiation(). You may choose others. Additionally, you can pass the surface PAR as a function of horizontal position and time. The default for LOBSTER is (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))).","category":"page"},{"location":"model_components/light/#Model-equations-(for-the-two-band-model)","page":"Light attenuation models","title":"Model equations (for the two band model)","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Light attenuation is calculated by integrating attenuation (from the surface). The PAR is considered as two components attenuated at different rates. At depth z the total PAR is given by:","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"PAR = fracPAR_02 leftexpleft(k_rz + chi_rint_z=0^z Chl_r dzright) + expleft(k_bz + chi_bint_z=0^z Chl_b dzright)right","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"where PAR_0 is the surface value, k_r and k_b are the red and blue attenuation coefficients of water, chi_r and chi_b are the red and blue chlorophyll attenuation coefficients, and Chl_r and Chl_b are the red and blue chlorophyll pigment concentrations. The chlorophyll pigment concentration is derived from the phytoplankton concentration where it is assumed that the pigment concentration is given by:","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Chl = PR_ChlP","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"where the ratio is constant and found in Parameters. The red and blue pigment concentrations are then found as Chl_r = left(fracChlr_textpigright)^e_r and Chl_b = left(fracChlr_textpigright)^e_b. ","category":"page"},{"location":"model_components/light/#Parameter-variable-names","page":"Light attenuation models","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Symbol Variable name Units\nk_r water_red_attenuation 1 / m\nk_b water_blue_attenuation 1 / m\nchi_r chlorophyll_red_attenuation 1 / m / (mg Chl / m³) ^ e_r\nchi_b chlorophyll_blue_attenuation 1 / m / (mg Chl / m³) ^ e_b\ne_r chlorophyll_red_exponent -\ne_b chlorophyll_blue_exponent -\nr_textpig pigment_ratio -\nR_ChlP phytoplankton_chlorophyll_ratio mg Chl / mmol N","category":"page"},{"location":"model_components/biogeochemical/NPZ/#NPZD","page":"NPZD","title":"Nutrient Phytoplankton Zooplankton Detritus (NPZD) model","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"The provided NPZD model is the low complexity model of Kuhn et al. (2015).","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"<img src=\"../npzd.svg\"  alt=\"Diagram of NPZD formulation\" style=\"max-width: calc(100% - 20px);\">","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Model-equations","page":"NPZD","title":"Model equations","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Ppartial t = mu_textmaxfracNk_N + Nfracalpha PARsqrtmu_textmax^2 + alpha^2PAR^2P - g_textmaxfracP^2k_P^2 + P^2Z-(l_PN+l_PD)P","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Zpartial t = beta g_textmaxfracP^2k_P^2 + P^2Z - (l_ZN + l_ZDZ)Z","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Dpartial t = (1 - beta) g_textmaxfracP^2k_P^2 + P^2Z + l_ZDZ^2 + l_PDP - r_DND","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Npartial t = - mu_textmaxfracNk_N + Nfracalpha PARsqrtmu_textmax^2 + alpha^2PAR^2P + l_PNP + l_ZNZ + r_DND","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Here mu_textmax = mu_0Q_10(T) and l_XY = l_XY0 Q_10(T) where Q_10(T) = 188^T10.","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Additionally, the phytoplankton and detritus sink at a constant rate.","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Parameter-variable-names","page":"NPZD","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Symbol Variable name Units\nalpha initial_photosynthetic_slope 1 / (W / m² / s)\nmu_0 base_maximum_growth 1 / s\nk_N nutrient_half_saturation mmol N / m³\nl_PN0 base_respiration_rate 1 / s\nl_PD0 phyto_base_mortality_rate 1 / s\ng_textmax maximum_grazing_rate 1 / s\nk_P grazing_half_saturation mmol N / m³\nbeta assimulation_efficiency -\nl_ZN base_excretion_rate 1 / s\nl_ZD zoo_base_mortality_rate 1 / s\nr_DN remineralization_rate 1 / s","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"All default parameter values are given in Parameters.","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Model-conservation","page":"NPZD","title":"Model conservation","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Nitrogen is conserved in the evolution of this model (excluding external sources and sinking), i.e. fracpartial Ppartial t + fracpartial Zpartial t + fracpartial Dpartial t + fracpartial Npartial t = 0.","category":"page"},{"location":"model_components/sediments/#sediment","page":"Overview","title":"Sediment","text":"","category":"section"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"Sediment models can be added to biogeochemical models. For details of the BGC models currently implemented please see the following pages. ","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"Sediment models are usually added by setting up the model and then passing it to the biogeochemical model, for example:","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"sediment = SEDIMENT_MODEL_NAME(; grid)\n\nbiogeochemistry = BIOGEOCHEMICAL_MODEL_NAME(; name, sediment, ...)","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"where SEDIMENT_MODEL_NAME is the chosen sediment model, and BIOGEOCHEMICAL_MODEL_NAME is the chosen biogeochemical model and ... replaces the other parameters you may wish to pass to the model.","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"Please note that not all sediment models are compatible with all biogeochemical models. This will be noted on the documentation page for each model.","category":"page"},{"location":"generated/LOBSTER_parameters/#LOBSTER-default-parameters","page":"LOBSTER","title":"LOBSTER default parameters","text":"","category":"section"},{"location":"generated/LOBSTER_parameters/","page":"LOBSTER","title":"LOBSTER","text":"Name Value\nphytoplankton_preference 0.5\nmaximum_grazing_rate 9.26e-6\ngrazing_half_saturation 1.0\nlight_half_saturation 33.0\nnitrate_ammonia_inhibition 3.0\nnitrate_half_saturation 0.7\nammonia_half_saturation 0.001\nmaximum_phytoplankton_growthrate 1.21e-5\nzooplankton_assimilation_fraction 0.7\nzooplankton_mortality 2.31e-6\nzooplankton_excretion_rate 5.8e-7\nphytoplankton_mortality 5.8e-7\nsmall_detritus_remineralisation_rate 5.88e-7\nlarge_detritus_remineralisation_rate 5.88e-7\nphytoplankton_exudation_fraction 0.05\nnitrification_rate 5.8e-7\nammonia_fraction_of_exudate 0.75\nammonia_fraction_of_excriment 0.5\nammonia_fraction_of_detritus 0.0\nphytoplankton_redfield 6.56\norganic_redfield 6.56\nphytoplankton_chlorophyll_ratio 1.31\norganic_carbon_calcate_ratio 0.1\nrespiration_oxygen_nitrogen_ratio 10.75\nnitrification_oxygen_nitrogen_ratio 2.0\nslow_sinking_mortality_fraction 0.5\nfast_sinking_mortality_fraction 0.5\ndissolved_organic_breakdown_rate 3.86e-7\nzooplankton_calcite_dissolution 0.3\nsPOM sinking speed 1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/LOBSTER_parameters/","page":"LOBSTER","title":"LOBSTER","text":"├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-3.47e-5, min=-3.47e-5, mean=-3.47e-5| |bPOM sinking speed|1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU ├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-0.00231481, min=-0.00231481, mean=-0.00231481|","category":"page"},{"location":"model_components/air-sea-gas/#air-sea-gas","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"We currently have one air-sea gas exchange model implemented. The model, proposed by Wanninkhof (1992), calculates the solubility of the gas in the water dependent on the temperature and salinity, and calculates the flux depending on the solubility and mixing from the wind.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Currently, the parameters for CO₂ and oxygen are included, but it would be very straightforward to add the parameters given in the original publication for other gases (e.g. inert tracers of other nutrients such as N₂). We also currently have a very simple formulation of the gas transfer velocity which depends on an average wind speed, but it would straightforwardly be expanded to permit variable wind speed (e.g. to simulate enhanced exchange from storms).","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"It is straightforward to set up a boundary as an air-sea gas exchange:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"using OceanBioME\nCO₂_flux = GasExchange(; gas = :CO₂)\nusing Oceananigans\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\nmodel = NonhydrostaticModel(; grid,\n                              biogeochemistry = LOBSTER(; grid, carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              tracers = (:T, :S))","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"using OceanBioME\n\nCO₂_flux = GasExchange(; gas = :CO₂)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Where the symbol specifies the exchanged gas (currently :CO₂ or :O₂). This can then be passed in the setup of a BGC model, for example:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"using Oceananigans\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\nmodel = NonhydrostaticModel(; grid,\n                              biogeochemistry = LOBSTER(; grid, carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              tracers = (:T, :S))","category":"page"},{"location":"model_components/air-sea-gas/#Model-equations","page":"Air-sea gas exchange","title":"Model equations","text":"","category":"section"},{"location":"model_components/air-sea-gas/#Gas-transfer","page":"Air-sea gas exchange","title":"Gas transfer","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The gas flux is given by:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"F = k(C_w - alpha C_a)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where C_w is the concentration in the water, C_a the concentration in the air, alpha the Oswald solubility coefficient, and k the gas transfer velocity. For carbon dioxide the flux is modified to:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"F = kbetarho_o(pCO_2w - pCO_2a)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where pCO_2w and pCO_2a are the partial pressure of carbon dioxide in the water and air, beta is the Bunsen Solubility Coefficient, and rho_o is the density of the water.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The gas transfer velocity is parameterised by the wind speed and Schmidt number, which in turn is parameterised by the temperature and salinity. The gas transfer velocity is given by:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"k = 108times10^-6u^2left(fracSc660right)^-12","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where u is the winds speed 10m above the surface, and Sc is the Schmidt number parameterised as:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Sc = A - BT + CT^2 - DT^3","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where T is temperature in Kelvin and the other parameters are dependent on the gas type and given in Parameters.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The solubilities are given by:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"alpha = 000367 T expA_1 + 100fracA_2T + A_3 lnfracT100 + Sleft(B_1 + fracB_2T + fracB_3T^2right)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"and","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"beta = expA_1 + 100fracA_2T + A_3 lnfracT100 + Sleft(B_1 + fracB_2T + fracB_3T^2right)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where S is salinity in practical units and the other default parameters are given in Parameters.","category":"page"},{"location":"model_components/air-sea-gas/#Partial-pressure-of-carbon-dioxide","page":"Air-sea gas exchange","title":"Partial pressure of carbon dioxide","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"We currently do not have the full OCMIP partial pressure formulation, instead we follow the simplified formulation (as used in Aumont et al. (2015)) where the partial pressure of CO_2 (muatm) in gas is found from:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"pCO_2a = f_CO_2P_a","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where f_CO_2 is the air fraction (ppmv), and P_a is the atmospheric pressure (atm). The ocean partial pressure (muatm) is derived from the dissolved inorganic carbon content, and alkalinity, as described by MacAladay (1998), from the equilibrium of the following chemical system:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceCO_2(g) ce= CO_2(aq) K_0=fracceO_2(aq)cepCO_2","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceCO_2(aq) + H_2Oce= H^+ + HCO^-_3 K_1=fracceHCO^-_3H^+ceCO_2(aq)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceHCO^-_3 ce= H^+ + CO^2-_3 K_2=fracceCO^2-_3H^+ceHCO^-_3","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceH_2O ce= H^+ + OH^-","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"These have rates constants:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_0 = fracceCO_2(aq)cepCO_2","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_1 = fracceHCO^-_3H^+ceCO_2(aq)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_2=fracceCO^2-_3H^+ceHCO^-_3","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_w = ceOH^-H^+","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"In this system DIC and Alk are defined to be:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceDIC = ceCO_2(aq) + HCO^-_3 + CO_3^2-","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceAlk = ceHCO^-_3 + 2CO^2-_3 + B(OH)^-_4 + OH^- - H^+  + OH^- pm minor species","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"To solve this we must find the Boric acid dissociation from:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceB(OH)_3 =H^+ + B(OH)^-_4 K_B = fracceB(OH)^-_4H^+ceB(OH)_3","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"resulting in the equilibrium constant:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_B = fracceB(OH)^-_4H^+ceB(OH)_3","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Finally, taking the DIC and Alkalinity in micro equivalents (i.e. scaled by 10^-3rho_o from mmol C/m^3) denoted by barDIC and barAlk, the carbonate alkalinity is given by Alk_C = barAlk + B(OH)^-_4 + OH^-, and we define the boron content, B, to be R_BSS mol/kg.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The system can be rearranged to give two equations for the carbonate alkalinity:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceAlk_C = DICfracK_1H + 2K^1K^2H^2 + K_1H+K_1K_2","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"ceAlk_C = ceAlk - fracK_WH - fracK_BBK_B + H","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The equilibrium constants (K_0, K_1, and K_2) are given by:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_0  = expleft(A_0 + fracB_0T + C_0log(fracT100) + S  (D_0 - E_0T + F_0left(fracT100right)^2)right)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_1 = expleft(A_1 - fracB_1T - C_1  log(T) - (D_1 + fracE_1T)sqrtS + F_1S - G_1S^15right)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_2 = expleft(A_2 - fracB_2T - C_2 log(T) - (D_2 + fracE_2T)sqrtS + F_2S - G_1S^15right)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_b = expleft(fracA_b - B_bsqrtS - C_bS + D_b  S^15 - E_bS^2T + F_b + G_B  sqrtS + H_b  S - (I_b + J_b sqrtS + S)  log(T) + L_b  sqrtS  Tright)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"K_w = expleft(A_w + fracB_wT + C_w ln T + sqrtSleft(D_w + fracE_wT + F_w ln Tright)G_w Sright)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"We solve these equations iteratively from an initial guess of pH=8 to find H, from which the partial pressure of CO_2 is calculated as:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"pCO_2 = 10^6fracAlk_CH^2K_0(K_1H + 2 K_1K_2)","category":"page"},{"location":"model_components/air-sea-gas/#Parameter-variable-names","page":"Air-sea gas exchange","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Gas transfer","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Symbol Variable name Units\nA, B, C, D schmidt_params -\nA_i and B_i for iin1 2 3 solubility_params -","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Partial pressure of carbon dioxide","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Symbol Variable name Units\nL_0 where L is a Latin character solubility -\nL_1 bicarbonate_dissociation -\nL_2 carbonate_dissociation -\nL_b boric_acid_dissociation -\nL_w water_dissociaiton -\nR_BS boron_ratio mol B / psu\nalpha thermal_expansion 1 / °K\nbeta haline_contraction 1 / psu","category":"page"},{"location":"model_components/biogeochemical/#bgc_models","page":"Overview","title":"Biogeochemical Models","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Biogeochemical (BGC) models can be used within the Oceananigans biogeochemistry framework or as stand alone box models. All BGC models should be setup in the same way so that they can easily be substituted for each other. You can easily implement a different model (or a variation on a current model) by following the guide here.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"For details of the BGC models currently implemented please see the following pages.","category":"page"},{"location":"model_components/biogeochemical/#Oceananigans-setup","page":"Overview","title":"Oceananigans setup","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"At the simplest level, all that is required to setup an existing OceanBioME BGC model is to pass it to the Oceananigans model setup:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"model = NonhydrostaticModel(; grid,\n                              ...,\n                              biogeochemistry = MODEL_NAME(; grid))","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"where MODEL_NAME is the name of the model. You may also need to pass additional parameters like:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"MODEL_NAME(; grid, growth_rate = 10.0)","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"The above will set up the required tracers and auxiliary fields, and you may also set boundary conditions or additional forcing through the usual Oceananigans setup.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Models usually have a default light attenuation model specified, these may be substituted easily by passing different models as parameters as above.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Our models are implemented in an abstract framework Biogeochemistry which contains underlying_biogeochemistry, light_attenuation, sediment, and modifiers. This is automatically set up for existing BGC models, but may also be used to couple any BGC model with light attenuation and sediments. See the implementation page for some more information on how to couple other models.","category":"page"},{"location":"quick_start/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides biogeochemical models to plug into Oceananigans, for example this code will run one month of a single column, 7 variable (P, Z, sPOM, bPOM, DOM, NO₃, NH₄) biogeochemical situation with constant forcing.","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"First we need to check we have the required dependencies:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using Pkg\nPkg.add([\"OceanBioME\", \"Oceananigans\"])","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(size = 10, extent = 200meters, topology = (Flat, Flat, Bounded))\n\nmodel = NonhydrostaticModel(; grid, biogeochemistry = LOBSTER(; grid))\n\nset!(model, P = 0.001, Z = 0.001, NO₃ = 1, NH₄ = 0.01)\n\nsimulation = Simulation(model, Δt = 1minute, stop_time = 30days)\n\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, model.tracers,\n                                                        filename = \"quickstart.jld2\",\n                                                        schedule = TimeInterval(0.5days),\n                                                        overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"We can then visualize it, first check the required packages are installed:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"Pkg.add(\"CairoMakie\")","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"and then load the data and plot:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using CairoMakie\n\nphytoplankton = FieldTimeSeries(\"quickstart.jld2\", \"P\")\nnitrates = FieldTimeSeries(\"quickstart.jld2\", \"NO₃\")\n\n_, _, z = nodes(nitrates)\n\nfig = Figure()\n\naxis_kwargs = (xlabel = \"Day\", ylabel = \"Depth (m)\")\nax1 = Axis(fig[1, 1]; title = \"Phytoplankton (mmol N/m³)\", axis_kwargs...)\nax2 = Axis(fig[1, 2]; title = \"Nitrate (mmol N/m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, phytoplankton.times / day, z, interior(phytoplankton , 1, 1, :, :)')\nhm2 = heatmap!(ax2,      nitrates.times / day, z, interior(nitrates, 1, 1, :, :)')\n\nfig","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides the tools to add to this, for example adding a carbonate chemistry model, or sediment at the bottom of the model. Please have a look at the rest of the examples to explore these options.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#multi-g","page":"Simple Multi-G","title":"Simple multi-G","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model, proposed by Soetaert et al. (2000), is a \"G class\" model that evolves carbon and nitrogen in three classes (fast, slow and refectory). The model is also only compatible with the LOBSTER biogeochemical model with carbonate chemistry, oxygen, and variable redfield options on. You also must ensure that the open_bottom option is on for particles to leave the bottom of the domain to the sediment model.","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"It is straightforward to set up:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"using OceanBioME, Oceananigans, OceanBioME.Sediments\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200))\n\nsediment_model = SimpleMultiG(; grid)\n\n# output\n┌ Warning: Sediment models are an experimental feature and have not yet been validated.\n└ @ OceanBioME.Boundaries.Sediments ~/OceanBioME.jl/src/Boundaries/Sediments/simple_multi_G.jl:102\n[ Info: This sediment model is currently only compatible with models providing NH₄, NO₃, O₂, and DIC.\nSingle-layer multi-G sediment model (Float64)","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"You may optionally specify the model parameters. This can then be passed in the setup of a BGC model:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"biogeochemistry = LOBSTER(; grid, \n                            carbonates = true, oxygen = true, variable_redfield = true, \n                            open_bottom = true, \n                            sediment_model)","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-equations","page":"Simple Multi-G","title":"Model equations","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model evolved the carbon and nitrogen components of three liability classes: fast, slow, and refractory. Each component is remineralised with first order decay so evolved like:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracdX_idt = F_X_i - lambda_iX_i","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"For the fast and slow classes lambda is a positive, non-zero, rate constant, and for the refractory class it is 0. F_X_i is the flux, and the flux for each class is simply a constant fraction of the total flux:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"F_X_i = f_iF_X","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"The fraction of remineralised sediment (X_textmin = Sigma_ilambda_X_iX_i) that becomes ammonia or nitrate depends on the equilibrium of chemical equations dependent on the bottom water NO_3, NH_4, and O_2 concentrations, as well as the total remineralisation and mean degradation rate. The mean first order degredation rate is given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"k = fraclambda_textfast C_textfast + lambda_textslow C_textslowC_textfast + C_textslow","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"and, based on Soetaert et al. (2000), the fraction nitrified (i.e becoming nitrate rather than ammonia) is given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"lnleft(C_textminp_nitright) = n_A + n_Bln C_textminln O_2 + n_C * ln C_textmin ^ 2 + n_D * ln k ln NH_4 + n_E ln C_textmin + n_F ln C_textmin ln NH_4","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Therefore, the efflux of nitrate and ammonia are given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial NO_3partial t =fracN_textminp_textnitDelta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial NH_4partial t = fracN_textmin(1 - p_textnit)Delta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"where Delta z is the depth of the bottom cell (since X_i is a surface concentration). This mineralisation also consumes oxygen at a rate:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial O_2partial t =fracC_textmin(1 - p_textanoxp_textsolid deposition) + N_textminp_textnit ONDelta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"where the constants are given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"p_textsolid deposition = s_A w ^s_B","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"with, w = s_CD^s_D where D is the water depth.","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"lnleft(C_textminp_textanoxright) = a_A + a_Bln C_textmin + a_C ln C_textmin ^ 2 + a_D ln k + a_E ln O_2 ln k + a_F ln NO_3 ^2","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"The original model of Soetaert et al. (2000) also includes denitrification terms whereby nitrogen is returned to the water column as dissolved N_2, but we currently do not account for this in order to conserve the nitrogen budget.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Parameter-variable-names","page":"Simple Multi-G","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Symbol Variable name Units\nlambda_textfast fast_decay_rate 1 / s\nlambda_textslow slow_decay_rate 1 / s\nf_textfast fast_fraction -\nf_textslow slow_fraction -\nf_textref refactory_fraction -\nn_i nitrate_oxidation_params -\na_i anoxic_param -\ns_i solid_dep_params -","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"All parameters are given in Parameters. ","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-conservations","page":"Simple Multi-G","title":"Model conservations","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Nitrogen and carbon is conserved between the model domain and sediment, any nitrogen or carbon not returned to the bottom cell is stored in a sediment field.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-compatibility","page":"Simple Multi-G","title":"Model compatibility","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model is currently only compatible with the LOBSTER biogeochemical model.","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#instant_remineralisation","page":"Instant remineralisation","title":"Instant remineralisation","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"This model is similar to that described in Aumont et al. (2015) where the majority of organic matter that sinks to the bottom of the domain is instantly remineralised and returned to a nutrient pool (usually NH_4) in the bottom cell of the domain, and the remainder is permanently stored. ","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-equations","page":"Instant remineralisation","title":"Model equations","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"The burial fraction from Dunne et al. (2007) is given by:","category":"page"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"E = E_0 + E_1left(fracF_OCk_B + F_OCright)^2","category":"page"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"where F_OC is the carbon flux (in this implementation the nitrogen flux multiplied by the Redfield ratio).","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Parameter-variable-names","page":"Instant remineralisation","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"Symbol Variable name Units\nE_0 burial_efficiency_constant1 -\nE_1 burial_efficiency_constant2 -\nk_B burial_efficiency_half_saturation mmol C / m² / s","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-conservations","page":"Instant remineralisation","title":"Model conservations","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"Nitrogen is conserved between the model domain and sediment, any nitrogen not returned to the bottom cell is stored in a sediment field.","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-compatibility","page":"Instant remineralisation","title":"Model compatibility","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"This model is compatible with all currently implemented models but does not separately store or remineralise carbon.","category":"page"},{"location":"model_components/utils/#utils","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We provide some utilities that may be useful.","category":"page"},{"location":"model_components/utils/#Time-step-adaptation","page":"Utilities","title":"Time step adaptation","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We have added a few additional utilities which extend the capabilities of Oceananigans' time step wizard. For column models where there is no water velocity we have added functions to calculate the advection timescale from the biogeochemical model defined sinking velocities. This could be used by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Finally, sinking may be more limiting than the normal advective CFL conditions so, we have an additional cell advection timescale defined for 3D models:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.6, diffusive_cfl = 0.5, max_change = 1.5, min_change = 0., cell_advection_timescale = sinking_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/#Negative-tracer-detection","page":"Utilities","title":"Negative tracer detection","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"As a temporary measure we have implemented a callback to either detect negative tracers and either scale a conserved group, force them back to zero, or throw an error. Please see the numerical implementations' page for details. This can be set up by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ScaleNegativeTracers((:P, :Z, :N))\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"You may also pass a scale factor for each component (e.g. in case they have different redfield ratios):","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ScaleNegativeTracers((:P, :Z, :N); scalefactors = (1, 1, 2))\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Here you should carefully consider which tracers form a conserved group (if at all). Alternatively, force to zero by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ZeroNegativeTracers()\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"The latter optionally takes a named tuple of parameters that may include exclude, which can be a tuple of tracer names (Symbols) which are allowed to be negative.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"EditURL = \"../../../examples/data_forced.jl\"","category":"page"},{"location":"generated/data_forced/#One-dimensional-column-forced-by-external-data-with-carbonate-chemistry","page":"Data forced column model","title":"One dimensional column forced by external data with carbonate chemistry","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"In this example we setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This example demonstrates:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"How to setup OceanBioME's biogeochemical models\nHow to load external forcing data\nHow to run with optional tracer sets such as carbonate chemistry\nHow to setup a non-uniform grid for better near surface resolution\nHow to visualise results","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"For this example we use force by mixing layer depth and surface photosynthetically available radiation (PAR) data from the Mercator Ocean model and NASA VIIRS observations.","category":"page"},{"location":"generated/data_forced/#Install-dependencies","page":"Data forced column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, NetCDF, Interpolations, DataDeps, CairoMakie\"","category":"page"},{"location":"generated/data_forced/#Model-setup","page":"Data forced column model","title":"Model setup","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First load the required packages","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using OceanBioME\nusing Oceananigans, Random, Printf, NetCDF, Interpolations, DataDeps\nusing Oceananigans.Units\nusing Oceananigans.Fields: FunctionField\n\nimport Oceananigans.TurbulenceClosures: maximum_numeric_diffusivity\n\nmaximum_numeric_diffusivity(κ::NamedTuple) = maximum(maximum.(values(κ)))\nmaximum_numeric_diffusivity(κ::FunctionField) = maximum(κ)\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/data_forced/#Load-external-forcing-data","page":"Data forced column model","title":"Load external forcing data","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Loading the forcing data from our online copy","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"dd = DataDep(\n    \"example_data\",\n    \"example data from subpolar re-analysis and observational products\",\n    \"https://github.com/OceanBioME/OceanBioME_example_data/raw/main/subpolar.nc\"\n)\nregister(dd)\nfilename = datadep\"example_data/subpolar.nc\"\ntimes = ncread(filename, \"time\")\ntemp = ncread(filename, \"temp\")\nsalinity = ncread(filename, \"so\")\nmld = ncread(filename, \"mld\")\npar = ncread(filename, \"par\")\n\ntemperature_itp = LinearInterpolation(times, temp)\nsalinity_itp = LinearInterpolation(times, salinity)\nmld_itp = LinearInterpolation(times, mld)\nPAR_itp = LinearInterpolation(times, par)\n\nt_function(x, y, z, t) = temperature_itp(mod(t, 364days))\ns_function(x, y, z, t) = salinity_itp(mod(t, 364days))\nsurface_PAR(x, y, t) = PAR_itp(mod(t, 364days))\nκₜ(x, y, z, t) = 2e-2 * max(1 - (z + mld_itp(mod(t, 364days)) / 2)^2 / (mld_itp(mod(t, 364days)) / 2)^2, 0) + 1e-4\n","category":"page"},{"location":"generated/data_forced/#Grid-and-diffusivity-field","page":"Data forced column model","title":"Grid and diffusivity field","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Define the grid (in this case a non uniform grid for better resolution near the surface) and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Nz = 33\nLz = 600meters\nrefinement = 10\nstretching = 5.754\nh(k) = (k - 1) / Nz\nζ₀(k) = 1 + (h(k) - 1) / refinement\nΣ(k) = (1 - exp(-stretching * h(k))) / (1 - exp(-stretching))\nz_faces(k) = Lz * (ζ₀(k) * Σ(k) - 1)\n\ngrid = RectilinearGrid(size = (1, 1, Nz), x = (0, 20meters), y = (0, 20meters), z = z_faces)\n\nclock = Clock(; time = 0.0)\n\nκ = FunctionField{Center, Center, Center}(κₜ, grid; clock)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"FunctionField located at (Center, Center, Center)\n├── func: κₜ (generic function with 1 method)\n├── grid: 1×1×33 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── clock: Clock(time=0 seconds, iteration=0)\n└── parameters: nothing","category":"page"},{"location":"generated/data_forced/#Biogeochemical-and-Oceananigans-model","page":"Data forced column model","title":"Biogeochemical and Oceananigans model","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Here we instantiate the LOBSTER model with carbonate chemistry and a surface flux of DIC (CO₂)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = surface_PAR,\n                            carbonates = true,\n                            scale_negatives = true)\n\nCO₂_flux = GasExchange(; gas = :CO₂)\n\nT = FunctionField{Center, Center, Center}(t_function, grid; clock)\nS = FunctionField{Center, Center, Center}(s_function, grid; clock)\n\nmodel = NonhydrostaticModel(; grid, clock,\n                              closure = ScalarDiffusivity(ν = κ, κ = κ),\n                              biogeochemistry,\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux),),\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 11.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2400.0)","category":"page"},{"location":"generated/data_forced/#Simulation","page":"Data forced column model","title":"Simulation","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Show the progress of the simulation\nStore the output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)\nAdapt the timestep length to reduce the run time","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"simulation = Simulation(model, Δt = 1minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, IterationInterval(500))\n\nfilename = \"data_forced\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model,\n                                                        model.tracers,\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)\n\nwizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2,\n                        max_change = 1.5, min_change = 0.75,\n                        cell_advection_timescale = column_advection_timescale)\n\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"","category":"page"},{"location":"generated/data_forced/#Run!","page":"Data forced column model","title":"Run!","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"run!(simulation)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 1 minute, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (4.708 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (6.763 seconds).\nIteration: 0500, time: 6.595 hours, Δt: 47.460 seconds, wall time: 13.434 seconds\nIteration: 1000, time: 13.184 hours, Δt: 47.420 seconds, wall time: 15.376 seconds\nIteration: 1500, time: 19.767 hours, Δt: 47.386 seconds, wall time: 17.324 seconds\nIteration: 2000, time: 1.098 days, Δt: 47.380 seconds, wall time: 19.290 seconds\nIteration: 2500, time: 1.372 days, Δt: 47.427 seconds, wall time: 21.226 seconds\nIteration: 3000, time: 1.647 days, Δt: 47.487 seconds, wall time: 23.164 seconds\nIteration: 3500, time: 1.921 days, Δt: 47.481 seconds, wall time: 25.113 seconds\nIteration: 4000, time: 2.196 days, Δt: 47.312 seconds, wall time: 27.047 seconds\nIteration: 4500, time: 2.470 days, Δt: 47.360 seconds, wall time: 28.987 seconds\nIteration: 5000, time: 2.744 days, Δt: 47.449 seconds, wall time: 30.930 seconds\nIteration: 5500, time: 3.018 days, Δt: 47.405 seconds, wall time: 32.921 seconds\nIteration: 6000, time: 3.292 days, Δt: 47.445 seconds, wall time: 34.892 seconds\nIteration: 6500, time: 3.566 days, Δt: 47.337 seconds, wall time: 36.856 seconds\nIteration: 7000, time: 3.841 days, Δt: 47.312 seconds, wall time: 38.809 seconds\nIteration: 7500, time: 4.115 days, Δt: 47.427 seconds, wall time: 40.795 seconds\nIteration: 8000, time: 4.389 days, Δt: 47.347 seconds, wall time: 42.762 seconds\nIteration: 8500, time: 4.663 days, Δt: 47.314 seconds, wall time: 44.730 seconds\nIteration: 9000, time: 4.937 days, Δt: 47.320 seconds, wall time: 46.700 seconds\nIteration: 9500, time: 5.210 days, Δt: 47.335 seconds, wall time: 48.680 seconds\nIteration: 10000, time: 5.484 days, Δt: 47.349 seconds, wall time: 50.656 seconds\nIteration: 10500, time: 5.758 days, Δt: 47.366 seconds, wall time: 52.624 seconds\nIteration: 11000, time: 6.032 days, Δt: 47.388 seconds, wall time: 54.615 seconds\nIteration: 11500, time: 6.307 days, Δt: 47.442 seconds, wall time: 56.576 seconds\nIteration: 12000, time: 6.581 days, Δt: 47.510 seconds, wall time: 58.549 seconds\nIteration: 12500, time: 6.856 days, Δt: 47.494 seconds, wall time: 1.009 minutes\nIteration: 13000, time: 7.131 days, Δt: 47.500 seconds, wall time: 1.042 minutes\nIteration: 13500, time: 7.406 days, Δt: 47.481 seconds, wall time: 1.074 minutes\nIteration: 14000, time: 7.680 days, Δt: 47.401 seconds, wall time: 1.107 minutes\nIteration: 14500, time: 7.954 days, Δt: 47.345 seconds, wall time: 1.140 minutes\nIteration: 15000, time: 8.228 days, Δt: 47.337 seconds, wall time: 1.173 minutes\nIteration: 15500, time: 8.502 days, Δt: 47.337 seconds, wall time: 1.205 minutes\nIteration: 16000, time: 8.776 days, Δt: 47.337 seconds, wall time: 1.238 minutes\nIteration: 16500, time: 9.049 days, Δt: 47.337 seconds, wall time: 1.271 minutes\nIteration: 17000, time: 9.323 days, Δt: 47.337 seconds, wall time: 1.304 minutes\nIteration: 17500, time: 9.597 days, Δt: 47.337 seconds, wall time: 1.336 minutes\nIteration: 18000, time: 9.871 days, Δt: 47.337 seconds, wall time: 1.369 minutes\nIteration: 18500, time: 10.145 days, Δt: 47.337 seconds, wall time: 1.402 minutes\nIteration: 19000, time: 10.419 days, Δt: 47.337 seconds, wall time: 1.435 minutes\nIteration: 19500, time: 10.693 days, Δt: 47.337 seconds, wall time: 1.468 minutes\nIteration: 20000, time: 10.966 days, Δt: 47.337 seconds, wall time: 1.500 minutes\nIteration: 20500, time: 11.240 days, Δt: 47.338 seconds, wall time: 1.534 minutes\nIteration: 21000, time: 11.514 days, Δt: 47.340 seconds, wall time: 1.566 minutes\nIteration: 21500, time: 11.788 days, Δt: 47.341 seconds, wall time: 1.599 minutes\nIteration: 22000, time: 12.061 days, Δt: 47.330 seconds, wall time: 1.632 minutes\nIteration: 22500, time: 12.335 days, Δt: 47.314 seconds, wall time: 1.665 minutes\nIteration: 23000, time: 12.609 days, Δt: 47.376 seconds, wall time: 1.698 minutes\nIteration: 23500, time: 12.884 days, Δt: 47.531 seconds, wall time: 1.730 minutes\nIteration: 24000, time: 13.158 days, Δt: 47.431 seconds, wall time: 1.763 minutes\nIteration: 24500, time: 13.432 days, Δt: 47.385 seconds, wall time: 1.796 minutes\nIteration: 25000, time: 13.707 days, Δt: 47.349 seconds, wall time: 1.829 minutes\nIteration: 25500, time: 13.981 days, Δt: 47.325 seconds, wall time: 1.861 minutes\nIteration: 26000, time: 14.254 days, Δt: 47.332 seconds, wall time: 1.894 minutes\nIteration: 26500, time: 14.528 days, Δt: 47.345 seconds, wall time: 1.927 minutes\nIteration: 27000, time: 14.802 days, Δt: 47.360 seconds, wall time: 1.960 minutes\nIteration: 27500, time: 15.076 days, Δt: 47.408 seconds, wall time: 1.993 minutes\nIteration: 28000, time: 15.351 days, Δt: 47.467 seconds, wall time: 2.026 minutes\nIteration: 28500, time: 15.625 days, Δt: 47.334 seconds, wall time: 2.059 minutes\nIteration: 29000, time: 15.899 days, Δt: 47.317 seconds, wall time: 2.092 minutes\nIteration: 29500, time: 16.173 days, Δt: 47.337 seconds, wall time: 2.125 minutes\nIteration: 30000, time: 16.447 days, Δt: 47.337 seconds, wall time: 2.157 minutes\nIteration: 30500, time: 16.720 days, Δt: 47.337 seconds, wall time: 2.190 minutes\nIteration: 31000, time: 16.994 days, Δt: 47.337 seconds, wall time: 2.223 minutes\nIteration: 31500, time: 17.268 days, Δt: 47.333 seconds, wall time: 2.256 minutes\nIteration: 32000, time: 17.542 days, Δt: 47.329 seconds, wall time: 2.289 minutes\nIteration: 32500, time: 17.816 days, Δt: 47.326 seconds, wall time: 2.321 minutes\nIteration: 33000, time: 18.089 days, Δt: 47.323 seconds, wall time: 2.354 minutes\nIteration: 33500, time: 18.363 days, Δt: 47.321 seconds, wall time: 2.387 minutes\nIteration: 34000, time: 18.637 days, Δt: 47.319 seconds, wall time: 2.420 minutes\nIteration: 34500, time: 18.911 days, Δt: 47.318 seconds, wall time: 2.453 minutes\nIteration: 35000, time: 19.185 days, Δt: 47.320 seconds, wall time: 2.486 minutes\nIteration: 35500, time: 19.458 days, Δt: 47.325 seconds, wall time: 2.519 minutes\nIteration: 36000, time: 19.732 days, Δt: 47.330 seconds, wall time: 2.551 minutes\nIteration: 36500, time: 20.006 days, Δt: 47.337 seconds, wall time: 2.584 minutes\nIteration: 37000, time: 20.280 days, Δt: 47.337 seconds, wall time: 2.617 minutes\nIteration: 37500, time: 20.554 days, Δt: 47.337 seconds, wall time: 2.650 minutes\nIteration: 38000, time: 20.828 days, Δt: 47.337 seconds, wall time: 2.682 minutes\nIteration: 38500, time: 21.101 days, Δt: 47.337 seconds, wall time: 2.715 minutes\nIteration: 39000, time: 21.375 days, Δt: 47.337 seconds, wall time: 2.748 minutes\nIteration: 39500, time: 21.649 days, Δt: 47.337 seconds, wall time: 2.780 minutes\nIteration: 40000, time: 21.923 days, Δt: 47.337 seconds, wall time: 2.813 minutes\nIteration: 40500, time: 22.197 days, Δt: 47.335 seconds, wall time: 2.846 minutes\nIteration: 41000, time: 22.471 days, Δt: 47.332 seconds, wall time: 2.879 minutes\nIteration: 41500, time: 22.745 days, Δt: 47.329 seconds, wall time: 2.911 minutes\nIteration: 42000, time: 23.018 days, Δt: 47.328 seconds, wall time: 2.945 minutes\nIteration: 42500, time: 23.292 days, Δt: 47.400 seconds, wall time: 2.977 minutes\nIteration: 43000, time: 23.567 days, Δt: 47.522 seconds, wall time: 3.010 minutes\nIteration: 43500, time: 23.842 days, Δt: 47.420 seconds, wall time: 3.043 minutes\nIteration: 44000, time: 24.116 days, Δt: 47.336 seconds, wall time: 3.076 minutes\nIteration: 44500, time: 24.389 days, Δt: 47.312 seconds, wall time: 3.108 minutes\nIteration: 45000, time: 24.663 days, Δt: 47.345 seconds, wall time: 3.141 minutes\nIteration: 45500, time: 24.938 days, Δt: 47.428 seconds, wall time: 3.173 minutes\nIteration: 46000, time: 25.212 days, Δt: 47.461 seconds, wall time: 3.207 minutes\nIteration: 46500, time: 25.487 days, Δt: 47.468 seconds, wall time: 3.239 minutes\nIteration: 47000, time: 25.761 days, Δt: 47.475 seconds, wall time: 3.272 minutes\nIteration: 47500, time: 26.036 days, Δt: 47.482 seconds, wall time: 3.305 minutes\nIteration: 48000, time: 26.310 days, Δt: 47.481 seconds, wall time: 3.338 minutes\nIteration: 48500, time: 26.585 days, Δt: 47.481 seconds, wall time: 3.370 minutes\nIteration: 49000, time: 26.860 days, Δt: 47.480 seconds, wall time: 3.403 minutes\nIteration: 49500, time: 27.135 days, Δt: 47.481 seconds, wall time: 3.436 minutes\nIteration: 50000, time: 27.409 days, Δt: 47.483 seconds, wall time: 3.469 minutes\nIteration: 50500, time: 27.684 days, Δt: 47.485 seconds, wall time: 3.501 minutes\nIteration: 51000, time: 27.959 days, Δt: 47.487 seconds, wall time: 3.534 minutes\nIteration: 51500, time: 28.234 days, Δt: 47.489 seconds, wall time: 3.567 minutes\nIteration: 52000, time: 28.508 days, Δt: 47.491 seconds, wall time: 3.599 minutes\nIteration: 52500, time: 28.783 days, Δt: 47.492 seconds, wall time: 3.632 minutes\nIteration: 53000, time: 29.058 days, Δt: 47.497 seconds, wall time: 3.665 minutes\nIteration: 53500, time: 29.333 days, Δt: 47.515 seconds, wall time: 3.698 minutes\nIteration: 54000, time: 29.608 days, Δt: 47.533 seconds, wall time: 3.730 minutes\nIteration: 54500, time: 29.883 days, Δt: 47.550 seconds, wall time: 3.763 minutes\nIteration: 55000, time: 30.158 days, Δt: 47.502 seconds, wall time: 3.796 minutes\nIteration: 55500, time: 30.433 days, Δt: 47.443 seconds, wall time: 3.828 minutes\nIteration: 56000, time: 30.707 days, Δt: 47.396 seconds, wall time: 3.861 minutes\nIteration: 56500, time: 30.981 days, Δt: 47.360 seconds, wall time: 3.894 minutes\nIteration: 57000, time: 31.255 days, Δt: 47.358 seconds, wall time: 3.927 minutes\nIteration: 57500, time: 31.529 days, Δt: 47.359 seconds, wall time: 3.959 minutes\nIteration: 58000, time: 31.803 days, Δt: 47.360 seconds, wall time: 3.992 minutes\nIteration: 58500, time: 32.077 days, Δt: 47.372 seconds, wall time: 4.025 minutes\nIteration: 59000, time: 32.351 days, Δt: 47.426 seconds, wall time: 4.057 minutes\nIteration: 59500, time: 32.626 days, Δt: 47.499 seconds, wall time: 4.090 minutes\nIteration: 60000, time: 32.901 days, Δt: 47.518 seconds, wall time: 4.123 minutes\nIteration: 60500, time: 33.175 days, Δt: 47.480 seconds, wall time: 4.156 minutes\nIteration: 61000, time: 33.450 days, Δt: 47.466 seconds, wall time: 4.188 minutes\nIteration: 61500, time: 33.725 days, Δt: 47.451 seconds, wall time: 4.221 minutes\nIteration: 62000, time: 33.999 days, Δt: 47.438 seconds, wall time: 4.254 minutes\nIteration: 62500, time: 34.273 days, Δt: 47.454 seconds, wall time: 4.287 minutes\nIteration: 63000, time: 34.548 days, Δt: 47.471 seconds, wall time: 4.319 minutes\nIteration: 63500, time: 34.823 days, Δt: 47.489 seconds, wall time: 4.352 minutes\nIteration: 64000, time: 35.097 days, Δt: 47.433 seconds, wall time: 4.385 minutes\nIteration: 64500, time: 35.371 days, Δt: 47.317 seconds, wall time: 4.418 minutes\nIteration: 65000, time: 35.645 days, Δt: 47.362 seconds, wall time: 4.451 minutes\nIteration: 65500, time: 35.920 days, Δt: 47.487 seconds, wall time: 4.483 minutes\nIteration: 66000, time: 36.194 days, Δt: 47.399 seconds, wall time: 4.516 minutes\nIteration: 66500, time: 36.468 days, Δt: 47.376 seconds, wall time: 4.549 minutes\nIteration: 67000, time: 36.743 days, Δt: 47.357 seconds, wall time: 4.581 minutes\nIteration: 67500, time: 37.016 days, Δt: 47.345 seconds, wall time: 4.614 minutes\nIteration: 68000, time: 37.291 days, Δt: 47.500 seconds, wall time: 4.647 minutes\nIteration: 68500, time: 37.566 days, Δt: 47.382 seconds, wall time: 4.680 minutes\nIteration: 69000, time: 37.839 days, Δt: 47.312 seconds, wall time: 4.712 minutes\nIteration: 69500, time: 38.113 days, Δt: 47.336 seconds, wall time: 4.745 minutes\nIteration: 70000, time: 38.387 days, Δt: 47.367 seconds, wall time: 4.778 minutes\nIteration: 70500, time: 38.661 days, Δt: 47.411 seconds, wall time: 4.811 minutes\nIteration: 71000, time: 38.936 days, Δt: 47.464 seconds, wall time: 4.843 minutes\nIteration: 71500, time: 39.210 days, Δt: 47.480 seconds, wall time: 4.876 minutes\nIteration: 72000, time: 39.485 days, Δt: 47.480 seconds, wall time: 4.909 minutes\nIteration: 72500, time: 39.759 days, Δt: 47.480 seconds, wall time: 4.941 minutes\nIteration: 73000, time: 40.034 days, Δt: 47.480 seconds, wall time: 4.974 minutes\nIteration: 73500, time: 40.309 days, Δt: 47.480 seconds, wall time: 5.007 minutes\nIteration: 74000, time: 40.584 days, Δt: 47.480 seconds, wall time: 5.040 minutes\nIteration: 74500, time: 40.858 days, Δt: 47.480 seconds, wall time: 5.072 minutes\nIteration: 75000, time: 41.133 days, Δt: 47.480 seconds, wall time: 5.105 minutes\nIteration: 75500, time: 41.408 days, Δt: 47.480 seconds, wall time: 5.138 minutes\nIteration: 76000, time: 41.683 days, Δt: 47.480 seconds, wall time: 5.171 minutes\nIteration: 76500, time: 41.957 days, Δt: 47.480 seconds, wall time: 5.203 minutes\nIteration: 77000, time: 42.232 days, Δt: 47.480 seconds, wall time: 5.236 minutes\nIteration: 77500, time: 42.507 days, Δt: 47.480 seconds, wall time: 5.269 minutes\nIteration: 78000, time: 42.781 days, Δt: 47.480 seconds, wall time: 5.302 minutes\nIteration: 78500, time: 43.056 days, Δt: 47.480 seconds, wall time: 5.334 minutes\nIteration: 79000, time: 43.331 days, Δt: 47.480 seconds, wall time: 5.367 minutes\nIteration: 79500, time: 43.606 days, Δt: 47.480 seconds, wall time: 5.400 minutes\nIteration: 80000, time: 43.880 days, Δt: 47.480 seconds, wall time: 5.432 minutes\nIteration: 80500, time: 44.155 days, Δt: 47.421 seconds, wall time: 5.465 minutes\nIteration: 81000, time: 44.429 days, Δt: 47.343 seconds, wall time: 5.498 minutes\nIteration: 81500, time: 44.703 days, Δt: 47.312 seconds, wall time: 5.531 minutes\nIteration: 82000, time: 44.977 days, Δt: 47.333 seconds, wall time: 5.563 minutes\nIteration: 82500, time: 45.250 days, Δt: 47.312 seconds, wall time: 5.596 minutes\nIteration: 83000, time: 45.524 days, Δt: 47.333 seconds, wall time: 5.629 minutes\nIteration: 83500, time: 45.798 days, Δt: 47.401 seconds, wall time: 5.661 minutes\nIteration: 84000, time: 46.073 days, Δt: 47.480 seconds, wall time: 5.694 minutes\nIteration: 84500, time: 46.347 days, Δt: 47.480 seconds, wall time: 5.727 minutes\nIteration: 85000, time: 46.622 days, Δt: 47.480 seconds, wall time: 5.760 minutes\nIteration: 85500, time: 46.897 days, Δt: 47.480 seconds, wall time: 5.792 minutes\nIteration: 86000, time: 47.171 days, Δt: 47.480 seconds, wall time: 5.825 minutes\nIteration: 86500, time: 47.446 days, Δt: 47.480 seconds, wall time: 5.858 minutes\nIteration: 87000, time: 47.721 days, Δt: 47.480 seconds, wall time: 5.890 minutes\nIteration: 87500, time: 47.996 days, Δt: 47.480 seconds, wall time: 5.923 minutes\nIteration: 88000, time: 48.270 days, Δt: 47.475 seconds, wall time: 5.956 minutes\nIteration: 88500, time: 48.545 days, Δt: 47.470 seconds, wall time: 5.989 minutes\nIteration: 89000, time: 48.820 days, Δt: 47.466 seconds, wall time: 6.021 minutes\nIteration: 89500, time: 49.094 days, Δt: 47.461 seconds, wall time: 6.054 minutes\nIteration: 90000, time: 49.369 days, Δt: 47.456 seconds, wall time: 6.087 minutes\nIteration: 90500, time: 49.643 days, Δt: 47.451 seconds, wall time: 6.120 minutes\nIteration: 91000, time: 49.918 days, Δt: 47.446 seconds, wall time: 6.152 minutes\nIteration: 91500, time: 50.192 days, Δt: 47.448 seconds, wall time: 6.185 minutes\nIteration: 92000, time: 50.467 days, Δt: 47.454 seconds, wall time: 6.218 minutes\nIteration: 92500, time: 50.741 days, Δt: 47.459 seconds, wall time: 6.251 minutes\nIteration: 93000, time: 51.016 days, Δt: 47.464 seconds, wall time: 6.284 minutes\nIteration: 93500, time: 51.291 days, Δt: 47.462 seconds, wall time: 6.316 minutes\nIteration: 94000, time: 51.565 days, Δt: 47.460 seconds, wall time: 6.349 minutes\nIteration: 94500, time: 51.840 days, Δt: 47.458 seconds, wall time: 6.382 minutes\nIteration: 95000, time: 52.114 days, Δt: 47.456 seconds, wall time: 6.415 minutes\nIteration: 95500, time: 52.389 days, Δt: 47.452 seconds, wall time: 6.448 minutes\nIteration: 96000, time: 52.663 days, Δt: 47.449 seconds, wall time: 6.481 minutes\nIteration: 96500, time: 52.938 days, Δt: 47.445 seconds, wall time: 6.513 minutes\nIteration: 97000, time: 53.213 days, Δt: 47.445 seconds, wall time: 6.547 minutes\nIteration: 97500, time: 53.487 days, Δt: 47.445 seconds, wall time: 6.579 minutes\nIteration: 98000, time: 53.762 days, Δt: 47.445 seconds, wall time: 6.612 minutes\nIteration: 98500, time: 54.036 days, Δt: 47.445 seconds, wall time: 6.645 minutes\nIteration: 99000, time: 54.310 days, Δt: 47.451 seconds, wall time: 6.678 minutes\nIteration: 99500, time: 54.585 days, Δt: 47.457 seconds, wall time: 6.710 minutes\nIteration: 100000, time: 54.860 days, Δt: 47.463 seconds, wall time: 6.743 minutes\nIteration: 100500, time: 55.134 days, Δt: 47.468 seconds, wall time: 6.776 minutes\nIteration: 101000, time: 55.409 days, Δt: 47.472 seconds, wall time: 6.809 minutes\nIteration: 101500, time: 55.683 days, Δt: 47.475 seconds, wall time: 6.842 minutes\nIteration: 102000, time: 55.958 days, Δt: 47.479 seconds, wall time: 6.875 minutes\nIteration: 102500, time: 56.233 days, Δt: 47.480 seconds, wall time: 6.908 minutes\nIteration: 103000, time: 56.508 days, Δt: 47.480 seconds, wall time: 6.940 minutes\nIteration: 103500, time: 56.783 days, Δt: 47.480 seconds, wall time: 6.973 minutes\nIteration: 104000, time: 57.057 days, Δt: 47.480 seconds, wall time: 7.006 minutes\nIteration: 104500, time: 57.332 days, Δt: 47.480 seconds, wall time: 7.039 minutes\nIteration: 105000, time: 57.607 days, Δt: 47.480 seconds, wall time: 7.072 minutes\nIteration: 105500, time: 57.881 days, Δt: 47.480 seconds, wall time: 7.104 minutes\nIteration: 106000, time: 58.156 days, Δt: 47.456 seconds, wall time: 7.138 minutes\nIteration: 106500, time: 58.431 days, Δt: 47.418 seconds, wall time: 7.170 minutes\nIteration: 107000, time: 58.705 days, Δt: 47.385 seconds, wall time: 7.203 minutes\nIteration: 107500, time: 58.979 days, Δt: 47.358 seconds, wall time: 7.236 minutes\nIteration: 108000, time: 59.253 days, Δt: 47.379 seconds, wall time: 7.269 minutes\nIteration: 108500, time: 59.527 days, Δt: 47.411 seconds, wall time: 7.302 minutes\nIteration: 109000, time: 59.801 days, Δt: 47.449 seconds, wall time: 7.335 minutes\nIteration: 109500, time: 60.076 days, Δt: 47.480 seconds, wall time: 7.368 minutes\nIteration: 110000, time: 60.351 days, Δt: 47.480 seconds, wall time: 7.400 minutes\nIteration: 110500, time: 60.625 days, Δt: 47.480 seconds, wall time: 7.433 minutes\nIteration: 111000, time: 60.900 days, Δt: 47.480 seconds, wall time: 7.466 minutes\nIteration: 111500, time: 61.175 days, Δt: 47.480 seconds, wall time: 7.499 minutes\nIteration: 112000, time: 61.450 days, Δt: 47.480 seconds, wall time: 7.532 minutes\nIteration: 112500, time: 61.724 days, Δt: 47.480 seconds, wall time: 7.565 minutes\nIteration: 113000, time: 61.999 days, Δt: 47.480 seconds, wall time: 7.598 minutes\nIteration: 113500, time: 62.274 days, Δt: 47.480 seconds, wall time: 7.631 minutes\nIteration: 114000, time: 62.548 days, Δt: 47.480 seconds, wall time: 7.663 minutes\nIteration: 114500, time: 62.823 days, Δt: 47.480 seconds, wall time: 7.696 minutes\nIteration: 115000, time: 63.098 days, Δt: 47.480 seconds, wall time: 7.729 minutes\nIteration: 115500, time: 63.373 days, Δt: 47.480 seconds, wall time: 7.762 minutes\nIteration: 116000, time: 63.647 days, Δt: 47.480 seconds, wall time: 7.794 minutes\nIteration: 116500, time: 63.922 days, Δt: 47.480 seconds, wall time: 7.827 minutes\nIteration: 117000, time: 64.197 days, Δt: 47.480 seconds, wall time: 7.860 minutes\nIteration: 117500, time: 64.472 days, Δt: 47.480 seconds, wall time: 7.893 minutes\nIteration: 118000, time: 64.746 days, Δt: 47.480 seconds, wall time: 7.926 minutes\nIteration: 118500, time: 65.021 days, Δt: 47.471 seconds, wall time: 7.959 minutes\nIteration: 119000, time: 65.295 days, Δt: 47.352 seconds, wall time: 7.992 minutes\nIteration: 119500, time: 65.569 days, Δt: 47.311 seconds, wall time: 8.025 minutes\nIteration: 120000, time: 65.843 days, Δt: 47.364 seconds, wall time: 8.057 minutes\nIteration: 120500, time: 66.117 days, Δt: 47.451 seconds, wall time: 8.091 minutes\nIteration: 121000, time: 66.391 days, Δt: 47.346 seconds, wall time: 8.124 minutes\nIteration: 121500, time: 66.665 days, Δt: 47.331 seconds, wall time: 8.156 minutes\nIteration: 122000, time: 66.940 days, Δt: 47.453 seconds, wall time: 8.189 minutes\nIteration: 122500, time: 67.214 days, Δt: 47.313 seconds, wall time: 8.222 minutes\nIteration: 123000, time: 67.488 days, Δt: 47.312 seconds, wall time: 8.255 minutes\nIteration: 123500, time: 67.763 days, Δt: 47.353 seconds, wall time: 8.288 minutes\nIteration: 124000, time: 68.036 days, Δt: 47.480 seconds, wall time: 8.321 minutes\nIteration: 124500, time: 68.311 days, Δt: 47.480 seconds, wall time: 8.353 minutes\nIteration: 125000, time: 68.586 days, Δt: 47.480 seconds, wall time: 8.386 minutes\nIteration: 125500, time: 68.861 days, Δt: 47.480 seconds, wall time: 8.418 minutes\nIteration: 126000, time: 69.135 days, Δt: 47.480 seconds, wall time: 8.451 minutes\nIteration: 126500, time: 69.410 days, Δt: 47.480 seconds, wall time: 8.484 minutes\nIteration: 127000, time: 69.685 days, Δt: 47.480 seconds, wall time: 8.516 minutes\nIteration: 127500, time: 69.959 days, Δt: 47.480 seconds, wall time: 8.549 minutes\nIteration: 128000, time: 70.234 days, Δt: 47.480 seconds, wall time: 8.582 minutes\nIteration: 128500, time: 70.509 days, Δt: 47.480 seconds, wall time: 8.614 minutes\nIteration: 129000, time: 70.784 days, Δt: 47.480 seconds, wall time: 8.647 minutes\nIteration: 129500, time: 71.058 days, Δt: 47.480 seconds, wall time: 8.680 minutes\nIteration: 130000, time: 71.333 days, Δt: 47.480 seconds, wall time: 8.713 minutes\nIteration: 130500, time: 71.608 days, Δt: 47.480 seconds, wall time: 8.745 minutes\nIteration: 131000, time: 71.883 days, Δt: 47.480 seconds, wall time: 8.778 minutes\nIteration: 131500, time: 72.157 days, Δt: 47.480 seconds, wall time: 8.811 minutes\nIteration: 132000, time: 72.432 days, Δt: 47.480 seconds, wall time: 8.844 minutes\nIteration: 132500, time: 72.707 days, Δt: 47.480 seconds, wall time: 8.876 minutes\nIteration: 133000, time: 72.981 days, Δt: 47.480 seconds, wall time: 8.909 minutes\nIteration: 133500, time: 73.256 days, Δt: 47.480 seconds, wall time: 8.942 minutes\nIteration: 134000, time: 73.531 days, Δt: 47.480 seconds, wall time: 8.974 minutes\nIteration: 134500, time: 73.806 days, Δt: 47.480 seconds, wall time: 9.007 minutes\nIteration: 135000, time: 74.080 days, Δt: 47.480 seconds, wall time: 9.040 minutes\nIteration: 135500, time: 74.355 days, Δt: 47.480 seconds, wall time: 9.073 minutes\nIteration: 136000, time: 74.630 days, Δt: 47.480 seconds, wall time: 9.105 minutes\nIteration: 136500, time: 74.905 days, Δt: 47.480 seconds, wall time: 9.138 minutes\nIteration: 137000, time: 75.179 days, Δt: 47.480 seconds, wall time: 9.171 minutes\nIteration: 137500, time: 75.454 days, Δt: 47.480 seconds, wall time: 9.204 minutes\nIteration: 138000, time: 75.729 days, Δt: 47.480 seconds, wall time: 9.236 minutes\nIteration: 138500, time: 76.003 days, Δt: 47.480 seconds, wall time: 9.270 minutes\nIteration: 139000, time: 76.278 days, Δt: 47.480 seconds, wall time: 9.302 minutes\nIteration: 139500, time: 76.553 days, Δt: 47.480 seconds, wall time: 9.335 minutes\nIteration: 140000, time: 76.828 days, Δt: 47.480 seconds, wall time: 9.367 minutes\nIteration: 140500, time: 77.102 days, Δt: 47.480 seconds, wall time: 9.400 minutes\nIteration: 141000, time: 77.377 days, Δt: 47.480 seconds, wall time: 9.433 minutes\nIteration: 141500, time: 77.652 days, Δt: 47.480 seconds, wall time: 9.466 minutes\nIteration: 142000, time: 77.927 days, Δt: 47.480 seconds, wall time: 9.498 minutes\nIteration: 142500, time: 78.201 days, Δt: 47.480 seconds, wall time: 9.531 minutes\nIteration: 143000, time: 78.476 days, Δt: 47.480 seconds, wall time: 9.564 minutes\nIteration: 143500, time: 78.751 days, Δt: 47.480 seconds, wall time: 9.597 minutes\nIteration: 144000, time: 79.025 days, Δt: 47.480 seconds, wall time: 9.630 minutes\nIteration: 144500, time: 79.300 days, Δt: 47.480 seconds, wall time: 9.662 minutes\nIteration: 145000, time: 79.575 days, Δt: 47.480 seconds, wall time: 9.695 minutes\nIteration: 145500, time: 79.850 days, Δt: 47.480 seconds, wall time: 9.728 minutes\nIteration: 146000, time: 80.124 days, Δt: 47.480 seconds, wall time: 9.760 minutes\nIteration: 146500, time: 80.399 days, Δt: 47.480 seconds, wall time: 9.793 minutes\nIteration: 147000, time: 80.674 days, Δt: 47.480 seconds, wall time: 9.826 minutes\nIteration: 147500, time: 80.948 days, Δt: 47.480 seconds, wall time: 9.859 minutes\nIteration: 148000, time: 81.223 days, Δt: 47.480 seconds, wall time: 9.891 minutes\nIteration: 148500, time: 81.498 days, Δt: 47.480 seconds, wall time: 9.924 minutes\nIteration: 149000, time: 81.773 days, Δt: 47.480 seconds, wall time: 9.957 minutes\nIteration: 149500, time: 82.047 days, Δt: 47.480 seconds, wall time: 9.990 minutes\nIteration: 150000, time: 82.322 days, Δt: 47.480 seconds, wall time: 10.022 minutes\nIteration: 150500, time: 82.597 days, Δt: 47.480 seconds, wall time: 10.055 minutes\nIteration: 151000, time: 82.872 days, Δt: 47.480 seconds, wall time: 10.088 minutes\nIteration: 151500, time: 83.146 days, Δt: 47.480 seconds, wall time: 10.121 minutes\nIteration: 152000, time: 83.421 days, Δt: 47.480 seconds, wall time: 10.153 minutes\nIteration: 152500, time: 83.696 days, Δt: 47.480 seconds, wall time: 10.186 minutes\nIteration: 153000, time: 83.970 days, Δt: 47.480 seconds, wall time: 10.218 minutes\nIteration: 153500, time: 84.245 days, Δt: 47.480 seconds, wall time: 10.252 minutes\nIteration: 154000, time: 84.520 days, Δt: 47.480 seconds, wall time: 10.284 minutes\nIteration: 154500, time: 84.795 days, Δt: 47.480 seconds, wall time: 10.317 minutes\nIteration: 155000, time: 85.069 days, Δt: 47.479 seconds, wall time: 10.350 minutes\nIteration: 155500, time: 85.344 days, Δt: 47.477 seconds, wall time: 10.383 minutes\nIteration: 156000, time: 85.619 days, Δt: 47.475 seconds, wall time: 10.416 minutes\nIteration: 156500, time: 85.893 days, Δt: 47.473 seconds, wall time: 10.448 minutes\nIteration: 157000, time: 86.168 days, Δt: 47.322 seconds, wall time: 10.481 minutes\nIteration: 157500, time: 86.442 days, Δt: 47.322 seconds, wall time: 10.514 minutes\nIteration: 158000, time: 86.716 days, Δt: 47.395 seconds, wall time: 10.547 minutes\nIteration: 158500, time: 86.990 days, Δt: 47.353 seconds, wall time: 10.579 minutes\nIteration: 159000, time: 87.264 days, Δt: 47.463 seconds, wall time: 10.612 minutes\nIteration: 159500, time: 87.539 days, Δt: 47.486 seconds, wall time: 10.645 minutes\nIteration: 160000, time: 87.813 days, Δt: 47.524 seconds, wall time: 10.678 minutes\nIteration: 160500, time: 88.087 days, Δt: 47.325 seconds, wall time: 10.711 minutes\nIteration: 161000, time: 88.360 days, Δt: 47.316 seconds, wall time: 10.743 minutes\nIteration: 161500, time: 88.634 days, Δt: 47.312 seconds, wall time: 10.776 minutes\nIteration: 162000, time: 88.908 days, Δt: 47.313 seconds, wall time: 10.809 minutes\nIteration: 162500, time: 89.181 days, Δt: 47.347 seconds, wall time: 10.842 minutes\nIteration: 163000, time: 89.456 days, Δt: 47.465 seconds, wall time: 10.874 minutes\nIteration: 163500, time: 89.730 days, Δt: 47.448 seconds, wall time: 10.907 minutes\nIteration: 164000, time: 90.004 days, Δt: 47.340 seconds, wall time: 10.940 minutes\nIteration: 164500, time: 90.278 days, Δt: 47.339 seconds, wall time: 10.973 minutes\nIteration: 165000, time: 90.552 days, Δt: 47.338 seconds, wall time: 11.005 minutes\nIteration: 165500, time: 90.826 days, Δt: 47.338 seconds, wall time: 11.038 minutes\nIteration: 166000, time: 91.100 days, Δt: 47.337 seconds, wall time: 11.071 minutes\nIteration: 166500, time: 91.374 days, Δt: 47.337 seconds, wall time: 11.103 minutes\nIteration: 167000, time: 91.648 days, Δt: 47.338 seconds, wall time: 11.136 minutes\nIteration: 167500, time: 91.922 days, Δt: 47.338 seconds, wall time: 11.169 minutes\nIteration: 168000, time: 92.195 days, Δt: 47.312 seconds, wall time: 11.202 minutes\nIteration: 168500, time: 92.469 days, Δt: 47.363 seconds, wall time: 11.235 minutes\nIteration: 169000, time: 92.743 days, Δt: 47.526 seconds, wall time: 11.267 minutes\nIteration: 169500, time: 93.018 days, Δt: 47.350 seconds, wall time: 11.300 minutes\nIteration: 170000, time: 93.292 days, Δt: 47.332 seconds, wall time: 11.333 minutes\nIteration: 170500, time: 93.566 days, Δt: 47.320 seconds, wall time: 11.366 minutes\nIteration: 171000, time: 93.840 days, Δt: 47.395 seconds, wall time: 11.398 minutes\nIteration: 171500, time: 94.114 days, Δt: 47.396 seconds, wall time: 11.431 minutes\nIteration: 172000, time: 94.388 days, Δt: 47.396 seconds, wall time: 11.464 minutes\nIteration: 172500, time: 94.662 days, Δt: 47.396 seconds, wall time: 11.497 minutes\nIteration: 173000, time: 94.937 days, Δt: 47.712 seconds, wall time: 11.529 minutes\nIteration: 173500, time: 95.212 days, Δt: 47.396 seconds, wall time: 11.562 minutes\nIteration: 174000, time: 95.486 days, Δt: 47.423 seconds, wall time: 11.595 minutes\nIteration: 174500, time: 95.760 days, Δt: 47.331 seconds, wall time: 11.628 minutes\nIteration: 175000, time: 96.034 days, Δt: 47.313 seconds, wall time: 11.661 minutes\nIteration: 175500, time: 96.308 days, Δt: 47.350 seconds, wall time: 11.693 minutes\nIteration: 176000, time: 96.582 days, Δt: 47.357 seconds, wall time: 11.726 minutes\nIteration: 176500, time: 96.856 days, Δt: 47.325 seconds, wall time: 11.759 minutes\nIteration: 177000, time: 97.131 days, Δt: 47.429 seconds, wall time: 11.792 minutes\nIteration: 177500, time: 97.405 days, Δt: 47.352 seconds, wall time: 11.824 minutes\nIteration: 178000, time: 97.679 days, Δt: 47.316 seconds, wall time: 11.857 minutes\nIteration: 178500, time: 97.953 days, Δt: 47.316 seconds, wall time: 11.890 minutes\nIteration: 179000, time: 98.226 days, Δt: 47.312 seconds, wall time: 11.923 minutes\nIteration: 179500, time: 98.500 days, Δt: 47.320 seconds, wall time: 11.955 minutes\nIteration: 180000, time: 98.774 days, Δt: 47.352 seconds, wall time: 11.987 minutes\nIteration: 180500, time: 99.048 days, Δt: 47.487 seconds, wall time: 12.018 minutes\nIteration: 181000, time: 99.322 days, Δt: 47.314 seconds, wall time: 12.049 minutes\nIteration: 181500, time: 99.596 days, Δt: 47.312 seconds, wall time: 12.082 minutes\nIteration: 182000, time: 99.870 days, Δt: 47.357 seconds, wall time: 12.114 minutes\n[ Info: Simulation is stopping after running for 12.129 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\n","category":"page"},{"location":"generated/data_forced/#Load-output-and-plot","page":"Data forced column model","title":"Load output and plot","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbitrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.func(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], t_function(1, 1, 0, t), s_function(1, 1, 0, t))\n    carbon_export[i] = (sPOM[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:sPOM)).w[1, 1, grid.Nz-20] +\n                        bPOM[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:bPOM)).w[1, 1, grid.Nz-20]) * redfield(Val(:sPOM), model.biogeochemistry)\nend","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, cumsum(air_sea_CO₂_flux) /1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, cumsum(carbon_export) /1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"(Image: )","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/SimpleMultiG_parameters/#SimpleMultiG-default-parameters","page":"SimpleMultiG","title":"SimpleMultiG default parameters","text":"","category":"section"},{"location":"generated/SimpleMultiG_parameters/","page":"SimpleMultiG","title":"SimpleMultiG","text":"Name Value\nfast_decay_rate 2.3148148148148147e-5\nslow_decay_rate 2.3148148148148148e-6\nfast_redfield 0.1509\nslow_redfield 0.13\nfast_fraction 0.74\nslow_fraction 0.26\nrefactory_fraction 0.1\nnitrate_oxidation_params [-1.9785, 0.2261, -0.0615, -0.0289, -0.36109, -0.0232]\ndenitrification_params [-3.079, 1.7509, 0.0593, -0.1923, 0.0604, 0.0662]\nanoxic_params [-3.9476, 2.6269, -0.2426, -1.3349, 0.1826, -0.0143]\nsolid_dep_params [0.233, 0.336, 982.0, -1.548]\nbottom_indices [1;;]","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"EditURL = \"../../../examples/column.jl\"","category":"page"},{"location":"generated/column/#OneD_column","page":"Simple column model","title":"One-dimensional column example","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"In this example we setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. The example demonstrates:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"How to setup OceanBioME's biogeochemical models\nHow to visualise results","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first.","category":"page"},{"location":"generated/column/#Install-dependencies","page":"Simple column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/column/#Model-setup","page":"Simple column model","title":"Model setup","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We load the packages and choose the default LOBSTER parameter set","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using OceanBioME, Oceananigans, Printf\nusing OceanBioME.SLatissimaModel: SLatissima\nusing Oceananigans.Fields: FunctionField, ConstantField\nusing Oceananigans.Units\n\nconst year = years = 365days","category":"page"},{"location":"generated/column/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Simple column model","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t)) / 10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50days) + 10","category":"page"},{"location":"generated/column/#Grid","page":"Simple column model","title":"Grid","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Define the grid.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"grid = RectilinearGrid(size = (1, 1, 50), extent = (20meters, 20meters, 200meters))","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/column/#Model","page":"Simple column model","title":"Model","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we define the biogeochemical model including carbonate chemistry (for which we also define temperature (T) and salinity (S) fields) and scaling of negative tracers(see discussion in the positivity preservation) and then setup the Oceananigans model with the boundary condition for the DIC based on the air-sea CO₂ flux.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            scale_negatives = true)\n\nCO₂_flux = GasExchange(; gas = :CO₂)\n\nclock = Clock(; time = 0.0)\nT = FunctionField{Center, Center, Center}(temp, grid; clock)\nS = ConstantField(35)\n\nmodel = NonhydrostaticModel(; grid,\n                              clock,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/column/#Simulation","page":"Simple column model","title":"Simulation","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Next we setup a simulation and add some callbacks that:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Show the progress of the simulation\nStore the model and particles output","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"simulation = Simulation(model, Δt = 3minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"column\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, model.tracers,\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"","category":"page"},{"location":"generated/column/#Run!","page":"Simple column model","title":"Run!","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"run!(simulation)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (1.657 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (7.282 seconds).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 18.348 seconds\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 27.853 seconds\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 37.411 seconds\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 47.090 seconds\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 56.836 seconds\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 1.109 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 1.271 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 1.432 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 1.594 minutes\n[ Info: Simulation is stopping after running for 1.759 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 1.759 minutes\n","category":"page"},{"location":"generated/column/#Load-saved-output","page":"Simple column model","title":"Load saved output","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Now we can load the results and do some post processing to diagnose the air-sea CO₂ flux. Hopefully, this looks different to the example without kelp!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.func(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = (sPOM[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:sPOM)).w[1, 1, grid.Nz-20] +\n                        bPOM[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:bPOM)).w[1, 1, grid.Nz-20]) * redfield(Val(:sPOM), model.biogeochemistry)\nend","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/column/#Plot","page":"Simple column model","title":"Plot","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Finally, we plot!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N / m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N / m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"(Image: )","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#LOBSTER","page":"LOBSTER","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER is a medium complexity BGC model with seven core prognostic variables: phytoplankton, zooplankton, small and large detritus, nitrates, ammonia, and dissolved organic matter. LOBSTER was originally proposed by Lévy et al. (2005) and subsequently added to by Lévy et al. (2001), Resplandy et al. (2009), Karleskind et al. (2011), and Resplandy et al. (2012).","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"(Image: Diagram of LOBSTER formulation)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, this implementation of LOBSTER optionally models simple carbonate chemistry (DIC and Alkalinity), Oxygen, and variable redfield ratios for the now dissolved and particulate organic groups (which then allows carbon to be conserved). These are activated in the model setup, for example:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"julia> using OceanBioME, Oceananigans\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> bgc_model = LOBSTER(; grid, carbonates = true)\nLOBSTER{Float64} with carbonates ✅, oxygen ❌, variable Redfield ratio ❌and (:sPOM, :bPOM) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Model-equations","page":"LOBSTER","title":"Model equations","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/#Core-components","page":"LOBSTER","title":"Core components","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When no additional components are activated the tracers NO_3, NH_4, P, Z, sPOM, bPOM, and DOM evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Ppartial t = (1-gamma)mu_P L_PARleft(L_NO_3 + L_NH_4right)P - G_P - m_PP^2","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Zpartial t = a_zleft(G_P + G_sPOMright) - m_ZZ^2 - mu_ZZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial NO_3partial t = -mu_PL_PARL_NO_3 + mu_nNH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial NH_4partial t = -mu_PL_PARL_NH_4 - mu_nNH_4 \n     + alpha_Pgammamu_P L_PARleft(L_NO_3 + L_NH_4right)P\n     + alpha_Zmu_ZZ + alpha_dmu_sPOMsPOM + alpha_dmu_bPOMbPOM\n     + mu_DOMDOM","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial sPOMpartial t = f_sleft(1-a_Z)left(G_P + G_sPOMright) + m_PP^2 + m_ZZ^2right - G_sPOM - mu_sPOMsPOM - fracpartialpartial z(sPOM w_s)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial bPOMpartial t = (1-f_s)left(1-a_Z)left(G_P + G_sPOMright) + m_PP^2 + m_ZZ^2right - mu_bPOMbPOM - fracpartialpartial z(bPOM w_b)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DOMpartial t = (1-alpha_P)gammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + (1-alpha_Z)mu_ZR_ZZ + (1-alpha_D)mu_sPOMsPOM + (1-alpha_D)mu_bPOMbPOM - mu_DOMDOM","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Where:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_PAR = 1 - e^-PARk_PAR","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_NO_3 = fracNO_3NO_3 + k_NO_3e^-psi NH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_NH_4 = fracNH_4NH_4 + k_NH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"G_P = g_zfractildepPk_z + tildepP + (1-tildep)sPOMZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"G_sPOM = g_zfrac(1-tildep)sPOMk_z + tildepP + (1-tildep)sPOMZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, the sPOM and bPOM detritus components sink with constant sinking speed.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Carbonate-chemistry","page":"LOBSTER","title":"Carbonate chemistry","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the carbonate chemistry is activated additional tracers DIC and Alk evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DICpartial t = alpha_Pgammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + alpha_Zmu_ZZR_Z + alpha_Dmu_sPOMR_OsPOM\n+ alpha_Dmu_bPOMR_ObPOM + mu_DOMR_ODOM - mu_P L_PARleft(L_NO_3 + L_NH_4right) R_P (1 + rho_CaCO_3(1 - gamma))P\n+ G_Peta R_Prho_CaCO_3","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Alkpartial t = mu_P L_PARL_NO_3P - 2rho_CaCO_3mu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Oxygen-chemistry","page":"LOBSTER","title":"Oxygen chemistry","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the oxygen chemistry is activated additional tracer O_2 evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial O_2partial t = mu_P L_PARleft(L_NO_3 + L_NH_4right)R_O_2P - (R_O_2 - R_nit)fracpartial NH_4partial t - R_O_2mu_nNH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Variable-Redfield","page":"LOBSTER","title":"Variable Redfield","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the variable Redfield modification is activated the organic components are modified to evolve their nitrogen and carbon content separately. This means that the waste from non-Redfield models (e.g. loss from the kelp) can be accounted for.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"In this case the organic components are split into nitrogen and carbon compartments, so the tracers sPOM, bPOM, and DOM are replaced with sPON, sPOC, bPON, bPOC, DON, and DOC. The nitrogen compartments evolve as per the organic matter equations above (i.e. replacing each XOM with XON), while the carbon compartments evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial sPOCpartial t = f_sleft(1-a_Z)left(G_P + G_sPOMright)R_Z + m_PP^2 + m_ZR_ZZ^2right - G_sPONR_Z - mu_sPOMsPOC - fracpartialpartial z(sPOC w_s)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial bPOCpartial t = (1-f_s)left(1-a_Z)left(G_P + G_sPOMright)R_Z + m_PR_PP^2 + m_ZR_ZZ^2right + (G_P(1 - eta) + m_PP^2)R_Prho_CaCO_3 - mu_bPOMbPOC - fracpartialpartial z(bPOC w_b)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DOCpartial t = (1-alpha_P)gammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + (1-alpha_Z)mu_ZR_ZZ + (1-alpha_D)mu_sPOMsPOC + (1-alpha_D)mu_bPOMbPOC - mu_DOMDOC","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, the DIC and Alk equations are modified to replace each XOM cdot R_O with the corresponding XOC.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Parameter-variable-names","page":"LOBSTER","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Symbol Variable name Units\ntildep phytoplankton_preference -\ng_z maximum_grazing_rate 1 / s\nk_z grazing_half_saturation mmol N / m³\nk_PAR light_half_saturation W / m²\npsi nitrate_ammonia_inhibition -\nk_NO_3 nitrate_half_saturation mmol N / m³\nk_NH_4 ammonia_half_saturation mmol N / m³\nmu_P maximum_phytoplankton_growthrate 1 / s\na_z zooplankton_assimilation_fraction -\nm_Z zooplankton_mortality 1 / s / mmol N/m³\nmu_z zooplankton_excretion_rate 1 / s\nm_P phytoplankton_mortality 1 / s\nmu_sPOM small_detritus_remineralisation_rate 1 / s\nmu_bPOM large_detritus_remineralisation_rate 1 / s\ngamma phytoplankton_exudation_fraction -\nmu_n nitrification_rate 1 / 2\nalpha_P ammonia_fraction_of_exudate -\nalpha_Z ammonia_fraction_of_excriment -\nalpha_d ammonia_fraction_of_detritus -\nR_P phytoplankton_redfield mmol C / mmol N\nR_O organic_redfield mmol C / mmol N\nR_ChlN phytoplankton_chlorophyll_ratio mg Chl / mmol N\nrho_CaCO_3 organic_carbon_calcate_ratio mmol CaCO₃/ mmol C\nR_O_2 respiration_oxygen_nitrogen_ratio mmol O / mmol N\nR_nit nitrification_oxygen_nitrogen_ratio mmol O / mmol N\nf_s slow_sinking_mortality_fraction -\nmu_DOM dissolved_organic_breakdown_rate 1 / s\neta zooplankton_calcite_dissolution -","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"All default parameter values are given in Parameters; and a more thorough explanation of new terms will be included in a publication that is in prep.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Model-conservations","page":"LOBSTER","title":"Model conservations","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"In the core configuration nitrogen is conserved in the evolution of the equations (excluding external sources and sinking), i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"partial_t NO_3 + partial_t NH_4 + partial_t P + partial_t Z + partial_t sPOM + partial_t bPOM + partial_t DOM = 0 ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the carbonate chemistry component is activated carbon is also conserved, i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"R(partial_t P + partial_t Z + partial_t sPOM + partial_t bPOM + partial_t DOM) + partial_t DIC = 0 ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Trivially, this is also the case when the variable Redfield component is also activated, i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"R(partial_t P + partial_t Z) + partial_t sPOC + partial_t bPOC + partial_t DOC + partial_t DIC = 0","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"EditURL = \"../../../examples/kelp.jl\"","category":"page"},{"location":"generated/kelp/#Simple-active-particle-example","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simple active particle example","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Here, we setup a simple 1D column example with the LOBSTER biogeochemical model and active particles modelling the growth of sugar kelp. This example demonstrates:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"How to setup OceanBioME's biogeochemical models\nHow to add biologically active particles which interact with the biodeochemical model\nHow to visualise results","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first.","category":"page"},{"location":"generated/kelp/#Install-dependencies","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Install dependencies","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie, JLD2\"","category":"page"},{"location":"generated/kelp/#Model-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First load the required packages","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Fields: FunctionField, ConstantField\nusing Oceananigans.Units\nusing Oceananigans.Architectures: arch_array\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/kelp/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic).","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t))/10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50day) + 10\n\narchitecture = CPU()","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Oceananigans.Architectures.CPU()","category":"page"},{"location":"generated/kelp/#Grid-and-PAR-field","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Define the grid and an extra Oceananigans' field that the PAR will be stored in","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Lx, Ly = 20meters, 20meters\ngrid = RectilinearGrid(architecture, size=(1, 1, 50), extent=(Lx, Ly, 200))","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CO₂_flux = GasExchange(; gas = :CO₂)\n\nclock = Clock(; time = 0.0)\nT = FunctionField{Center, Center, Center}(temp, grid; clock)\nS = ConstantField(35)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"ConstantField(35)","category":"page"},{"location":"generated/kelp/#Kelp-Particle-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Kelp Particle setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@info \"Setting up kelp particles\"\n\nn = 5 # number of kelp fronds\nz₀ = [-21:5:-1;] * 1.0 # depth of kelp fronds\n\nparticles = SLatissima(; architecture,\n                         x = arch_array(architecture, ones(n) * Lx / 2),\n                         y = arch_array(architecture, ones(n) * Ly / 2),\n                         z = arch_array(architecture, z₀),\n                         A = arch_array(architecture, ones(n) * 10.0),\n                         latitude = 57.5,\n                         scalefactor = 500.0)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"5 BiogeochemicalParticles with eltype Any:\n└── 61 properties: (:architecture, :growth_rate_adjustment, :photosynthetic_efficiency, :minimum_carbon_reserve, :structural_carbon, :exudation, :erosion, :saturation_irradiance, :structural_dry_weight_per_area, :structural_dry_to_wet_weight, :carbon_reserve_per_carbon, :nitrogen_reserve_per_nitrogen, :minimum_nitrogen_reserve, :maximum_nitrogen_reserve, :growth_adjustment_2, :growth_adjustment_1, :maximum_specific_growth_rate, :structural_nitrogen, :photosynthesis_at_ref_temp_1, :photosynthesis_at_ref_temp_2, :photosynthesis_ref_temp_1, :photosynthesis_ref_temp_2, :photoperiod_1, :photoperiod_2, :respiration_at_ref_temp_1, :respiration_at_ref_temp_2, :respiration_ref_temp_1, :respiration_ref_temp_2, :photosynthesis_arrhenius_temp, :photosynthesis_low_temp, :photosynthesis_high_temp, :photosynthesis_high_arrhenius_temp, :photosynthesis_low_arrhenius_temp, :respiration_arrhenius_temp, :current_speed_for_0p65_uptake, :nitrate_half_saturation, :ammonia_half_saturation, :maximum_nitrate_uptake, :maximum_ammonia_uptake, :current_1, :current_2, :current_3, :respiration_reference_A, :respiration_reference_B, :exudation_redfield_ratio, :prescribed_velocity, :x, :y, :z, :A, :N, :C, :nitrate_uptake, :ammonia_uptake, :primary_production, :frond_exudation, :nitrogen_erosion, :carbon_erosion, :custom_dynamics, :scalefactor, :latitude)\n","category":"page"},{"location":"generated/kelp/#Setup-BGC-model","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Setup BGC model","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            variable_redfield = true,\n                            scale_negatives = true,\n                            particles)\n\nmodel = NonhydrostaticModel(; grid,\n                              clock,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/kelp/#Simulation","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simulation","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"simulation = Simulation(model, Δt = 3minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"kelp\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, model.tracers,\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)\n\nsimulation.output_writers[:particles] = JLD2OutputWriter(model, (; particles),\n                                                         filename = \"$(filename)_particles.jld2\",\n                                                         schedule = TimeInterval(1day),\n                                                         overwrite_existing = true)\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"","category":"page"},{"location":"generated/kelp/#Run!","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Run!","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Finally we run the simulation","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"run!(simulation)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (16.136 minutes)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (10.397 seconds).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 16.498 minutes\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 16.684 minutes\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 16.870 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 17.055 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 17.240 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 17.425 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 17.610 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 17.794 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 17.979 minutes\n[ Info: Simulation is stopping after running for 18.159 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 18.159 minutes\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux - hopefully this looks different to the example without kelp!","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOC = FieldTimeSeries(\"$filename.jld2\", \"sPOC\")\nbPOC = FieldTimeSeries(\"$filename.jld2\", \"bPOC\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.func(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = sPOC[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(biogeochemistry, Val(:sPOC)).w[1, 1, grid.Nz-20] +\n                       bPOC[1, 1, grid.Nz-20, i] * biogeochemical_drift_velocity(biogeochemistry, Val(:bPOC)).w[1, 1, grid.Nz-20]\nend","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-85meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol C/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOC, 1, 1, :, :)' .+ interior(bPOC, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We can also have a look at how the kelp particles evolve","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using JLD2\n\nfile = jldopen(\"$(filename)_particles.jld2\")\n\niterations = keys(file[\"timeseries/t\"])\n\nA, N, C = ntuple(n -> zeros(5, length(iterations)), 3)\n\ntimes = zeros(length(iterations))\n\nfor (i, iter) in enumerate(iterations)\n    particles = file[\"timeseries/particles/$iter\"]\n    A[:, i] = particles.A\n    N[:, i] = particles.N\n    C[:, i] = particles.C\n\n    times[i] = file[\"timeseries/t/$iter\"]\nend\n\nfig = Figure(resolution = (1000, 800), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", limits = ((0, times[end] / days), nothing))\n\nax1 = Axis(fig[1, 1]; ylabel = \"Frond area (dm²)\", axis_kwargs...)\n[lines!(ax1, times / day, A[n, :], linewidth = 3) for n in 1:5]\n\nax2 = Axis(fig[2, 1]; ylabel = \"Total Carbon (gC)\", axis_kwargs...)\n[lines!(ax2, times / day, (@. A * (N + particles.structural_nitrogen) * particles.structural_dry_weight_per_area)[n, :], linewidth = 3) for n in 1:5]\n\nax3 = Axis(fig[3, 1]; ylabel = \"Total Nitrogen (gN)\", axis_kwargs...)\n[lines!(ax3, times / day, (@. A * (C + particles.structural_carbon) * particles.structural_dry_weight_per_area)[n, :], linewidth = 3) for n in 1:5]\n\nfig","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/SLatissima_parameters/#SLatissima-default-parameters","page":"SLatissima","title":"SLatissima default parameters","text":"","category":"section"},{"location":"generated/SLatissima_parameters/","page":"SLatissima","title":"SLatissima","text":"Name Value\ngrowth_rate_adjustment 4.5\nphotosynthetic_efficiency 0.011527777777777776\nminimum_carbon_reserve 0.01\nstructural_carbon 0.2\nexudation 0.5\nerosion 0.22\nsaturation_irradiance 7.776\nstructural_dry_weight_per_area 0.5\nstructural_dry_to_wet_weight 0.0785\ncarbon_reserve_per_carbon 2.1213\nnitrogen_reserve_per_nitrogen 2.72\nminimum_nitrogen_reserve 0.0126\nmaximum_nitrogen_reserve 0.0216\ngrowth_adjustment_2 0.046799999999999994\ngrowth_adjustment_1 0.16919999999999996\nmaximum_specific_growth_rate 0.18\nstructural_nitrogen 0.0146\nphotosynthesis_at_ref_temp_1 0.02928\nphotosynthesis_at_ref_temp_2 0.0312\nphotosynthesis_ref_temp_1 285.0\nphotosynthesis_ref_temp_2 288.0\nphotoperiod_1 0.85\nphotoperiod_2 0.3\nrespiration_at_ref_temp_1 0.006684\nrespiration_at_ref_temp_2 0.0130296\nrespiration_ref_temp_1 285.0\nrespiration_ref_temp_2 290.0\nphotosynthesis_arrhenius_temp 1737.7267805628196\nphotosynthesis_low_temp 271.0\nphotosynthesis_high_temp 296.0\nphotosynthesis_high_arrhenius_temp 1414.87\nphotosynthesis_low_arrhenius_temp 4547.89\nrespiration_arrhenius_temp 11033.8920579234\ncurrent_speed_for_0p65_uptake 0.03\nnitrate_half_saturation 4.0\nammonia_half_saturation 1.3\nmaximum_nitrate_uptake 0.00168\nmaximum_ammonia_uptake 0.002016\ncurrent_1 0.72\ncurrent_2 0.28\ncurrent_3 0.045\nrespiration_reference_A 0.002664\nrespiration_reference_B 0.0013368\nexudation_redfield_ratio Inf\nprescribed_velocity 0.1\nlatitude 57.5","category":"page"},{"location":"numerical_implementation/positivity-preservation/#pos-preservation","page":"Positivity preservation","title":"Positivity Preservation","text":"","category":"section"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"It is common in BGC models to behave badly if any tracers go bellow zero, analytically this is fine because they (usually) can not get below zero, and it is unphysical for the concentration of something to be negative. Issues arise when the inaccuracy in numerical integration making some tracer become negative, usually leading to explosions (e.g. exp(-C) to inf), or bounds errors (e.g. log(C)). Essentially this occurs when the local error in the numerical scheme is sufficiently large that more than the available amount of tracer is consumed.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"There exists a set of numerical schemes which overcome this and guarantee positivity (provided a positivity preserving advection scheme and well-behaved diffusion scheme are used) but are complex to implement. Although we may do this in the future we have not yet done so in the meantime have provided some utilities which maintain positivity. The simplest option is to reset any negative tracers to zero, but this causes the model to gain mass. A slightly more complex version is to increase negative tracers to zero and remove the difference from other tracers with in the same conserved system.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"We have found this to be a satisfactory solution (when balanced against using much smaller time steps), as it tends to cause only a small and local transient change to the solution.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"See model components page for usage.","category":"page"},{"location":"generated/InstantRemineralisation_parameters/#InstantRemineralisation-default-parameters","page":"InstantRemineralisation","title":"InstantRemineralisation default parameters","text":"","category":"section"},{"location":"generated/InstantRemineralisation_parameters/","page":"InstantRemineralisation","title":"InstantRemineralisation","text":"Name Value\nburial_efficiency_constant1 0.013\nburial_efficiency_constant2 0.53\nburial_efficiency_half_saturation 7.0\nbottom_indices [1;;]","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"EditURL = \"../../../examples/box.jl\"","category":"page"},{"location":"generated/box/#box_example","page":"Box model","title":"Box model","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"In this example we setup a LOBSTER biogeochemical model in a single box configuration. This example demonstrates:","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"How to setup OceanBioME's biogeochemical models as a stand-alone box model","category":"page"},{"location":"generated/box/#Install-dependencies","page":"Box model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using Pkg\npkg\"add OceanBioME\"","category":"page"},{"location":"generated/box/#Model-setup","page":"Box model","title":"Model setup","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Load the packages and setup the initial and forcing conditions","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using OceanBioME, Oceananigans, Oceananigans.Units\n\nconst year = years = 365day","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This is forced by a prescribed time-dependent photosynthetically available radiation (PAR)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"PAR⁰(t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nz = -10 # specify the nominal depth of the box for the PAR profile\nPAR(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Set up the model. Here, first specify the biogeochemical model, followed by initial conditions and the start and end times","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"model = BoxModel(biogeochemistry = LOBSTER(grid = BoxModelGrid, light_attenuation_model = nothing), forcing = (; PAR))\n\nset!(model, NO₃ = 10.0, NH₄ = 0.1, P = 0.1, Z = 0.01)\n\nsimulation = Simulation(model; Δt = 5minutes, stop_time = 5years)\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, model.fields; filename = \"box.jld2\", schedule = TimeInterval(10days), overwrite_existing = true)\n\nprog(sim) = @info \"$(prettytime(time(sim))) in $(prettytime(simulation.run_wall_time))\"\n\nsimulation.callbacks[:progress] = Callback(prog, IterationInterval(1000000))","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Callback of prog on IterationInterval(1000000)","category":"page"},{"location":"generated/box/#Run-the-model-(should-only-take-a-few-seconds)","page":"Box model","title":"Run the model (should only take a few seconds)","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"@info \"Running the model...\"\nrun!(simulation)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"[ Info: Running the model...\n[ Info: Initializing simulation...\n[ Info: 0 seconds in 0 seconds\n[ Info:     ... simulation initialization complete (2.711 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (4.251 seconds).\n[ Info: Simulation is stopping after running for 1.461 minutes.\n[ Info: Simulation time 1825 days equals or exceeds stop time 1825 days.\n","category":"page"},{"location":"generated/box/#Load-the-output","page":"Box model","title":"Load the output","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"times = FieldTimeSeries(\"box.jld2\", \"P\").times\n\ntimeseries = NamedTuple{keys(model.fields)}(FieldTimeSeries(\"box.jld2\", \"$field\")[1, 1, 1, :] for field in keys(model.fields))","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(NO₃ = [10.0, 10.014827328036342, 9.958973722158486, 9.803510613808989, 9.442779928636611, 8.662609382795122, 7.509425754602352, 6.280822990087396, 4.72964598342781, 2.60376563787048, 0.49699245130690484, 0.021499125644528348, 0.0014896011075734008, 0.0005181109260939956, 0.00040413734004946515, 0.0003788278285530152, 0.0003887009996099481, 0.00042747049764951914, 0.0004989264981384905, 0.0006143667401393277, 0.0007996744617200363, 0.0011245889370245369, 0.0018425573642498626, 0.004405509633903554, 0.01911625310848332, 0.091782679605407, 0.327540467654243, 0.8143759978230607, 1.542605606091747, 2.4462135555801874, 3.442251294822056, 4.453429066785595, 5.419350008140919, 6.299293076164257, 7.070689878415742, 7.725664026511056, 8.266854599031836, 8.703203191150706, 9.045788752042684, 9.301924499885569, 9.453762432649627, 9.216421551483684, 7.959939159824289, 5.998084570219725, 4.28953200287165, 2.442860379072048, 0.5708245715584293, 0.0306981328260291, 0.002071954242987756, 0.0006018210738275528, 0.00043249079507352124, 0.00038597753207941885, 0.00038064927837311036, 0.00040470869928793825, 0.00045877394696732806, 0.0005501210285213777, 0.0006956583075939321, 0.0009366208575302122, 0.0013998926123158584, 0.002654946672196228, 0.008666991688567202, 0.042882136134533386, 0.18162706047438126, 0.5381699877098738, 1.1517100495687758, 1.9775946185313515, 2.9378276650214317, 3.9501808624390957, 4.94504899256489, 5.87187034201607, 6.699349137811017, 7.412761296280663, 8.01002330561914, 8.497440705478187, 8.885568371027006, 9.184658154411359, 9.394839414103416, 9.444413641562223, 8.720569569452355, 6.9834598066344995, 5.122056150068306, 3.4110657579534136, 1.428294290636611, 0.14268764963323058, 0.007129342725698602, 0.0009154630696496236, 0.00048744553357680414, 0.00040228576990209607, 0.00037936309135572785, 0.00038913197666488994, 0.000427694366324418, 0.0004990406478852701, 0.0006144300158900835, 0.0007997139734987333, 0.0011246178678065931, 0.0018425854560273854, 0.004405557746235684, 0.01911638527139062, 0.09178299480176938, 0.3275410069249186, 0.8143766819797427, 1.5426063342260086, 2.446214254918701, 3.442251922851148, 4.453429605003178, 5.419350453963609, 6.299293436093876, 7.070690163256804, 7.7256642483683935, 8.266854769590836, 8.703203320791898, 9.045788849418326, 9.301924571462832, 9.45376247993165, 9.21642154445438, 7.959939152729437, 5.998084618588147, 4.289532090443462, 2.442860467985809, 0.570824616137189, 0.03069813541724399, 0.00207195434751721, 0.0006018210788715833, 0.0004324907954193273, 0.00038597753205726713, 0.00038064927834007613, 0.0004047086992702137, 0.00045877394695857475, 0.0005501210285167718, 0.0006956583075912505, 0.0009366208575283944, 0.001399892612314388, 0.0026549466721945605, 0.00866699168856429, 0.04288213613452907, 0.18162706047438337, 0.5381699877098968, 1.1517100495688306, 1.977594618531437, 2.9378276650215485, 3.950180862439242, 4.945048992565061, 5.871870342016265, 6.699349137811226, 7.41276129628089, 8.01002330561937, 8.497440705478425, 8.885568371027253, 9.18465815441161, 9.394839414103672, 9.44441364156248, 8.72056956945262, 6.983459806634755, 5.122056150068542, 3.411065757953626, 1.4282942906367526, 0.1426876496332488, 0.007129342725698915, 0.0009154630696496406, 0.00048744553357681287, 0.0004022857699021012, 0.00037936309135573273, 0.0003891319766648952, 0.00042769436632442533, 0.00049904064788528, 0.0006144300158900987, 0.0007997139734987594, 0.0011246178678066489, 0.0018425854560275361, 0.004405557746236374, 0.019116385271394448, 0.09178299480178499, 0.3275410069249627, 0.814376681979826, 1.542606334226133, 2.446214254918859, 3.4422519228513324, 4.453429605003386, 5.419350453963843, 6.299293436094123, 7.070690163257065, 7.72566424836867, 8.26685476959112], NH₄ = [0.1, 0.0429582890330365, 0.00011986427161373265, 0.00011058897630403457, 0.00011421810633911734, 0.00016773932977895092, 0.00039090731865110416, 0.0006881709883381712, 0.000723787713398929, 0.0007002828210278221, 0.0009715622841216237, 0.00375225260449936, 0.004422686072333562, 0.0034332984891264707, 0.003073380204650147, 0.0030041283130320976, 0.0031198248565745897, 0.0034144080371837186, 0.00392195527277727, 0.004722585204112483, 0.006003470461756716, 0.008297214280880722, 0.013672569383402108, 0.03430206265864529, 0.12991630212006997, 0.37993283514471804, 0.7782343168966351, 1.2474386169136964, 1.6591985540572867, 1.9245091213920758, 2.0266230249020825, 1.989860557311546, 1.852348760915549, 1.6526621426425778, 1.4239443006404315, 1.1914905071529218, 0.9722262228106043, 0.7752810195372752, 0.6026427938455962, 0.44728724822668614, 0.276612385789445, 0.00016003442989589675, 0.0001333428051395724, 0.00036336697940908314, 0.0008385950046111356, 0.0009364129008430666, 0.0011684658418621768, 0.004090860059211937, 0.005123289845045959, 0.003748397762686903, 0.0032042917889704594, 0.003022753836685745, 0.0030460911092266133, 0.0032461175336479238, 0.0036392434787109367, 0.0042784109303052225, 0.005283518683830382, 0.006960444388030244, 0.010309577774781462, 0.020124865383445417, 0.06635681484449642, 0.23405667327569227, 0.5636929983953934, 1.0116998566227362, 1.4679362633959663, 1.8126019315584714, 1.9950060897634734, 2.023333784300051, 1.9312058750550407, 1.758038478139596, 1.5401538313429464, 1.3069334906173364, 1.0794669557148893, 0.8706733098368288, 0.6860883155986398, 0.5238106177820798, 0.3683577913172081, 0.14620672317305738, 0.00012419659618374468, 0.00019899518659947734, 0.0006177780651194434, 0.0009296899730929487, 0.0009630321661548783, 0.0020232185723510414, 0.005609064592257526, 0.004302454982485625, 0.003410106537723544, 0.0030831096730591593, 0.0030120104709649006, 0.003123758138505032, 0.0034162368954868756, 0.003922843178576464, 0.004723055832293128, 0.006003750043005159, 0.008297410672706234, 0.013672759845839922, 0.03430239182218353, 0.1299169019330968, 0.37993342655546314, 0.7782347061535266, 1.2474387948269956, 1.6591985591344167, 1.9245090127324478, 2.0266228578465992, 1.9898603717031715, 1.8523485810860023, 1.65266198129837, 1.42394416287355, 1.1914903935245187, 0.9722261314598075, 0.7752809475166759, 0.602642737878776, 0.44728720491685453, 0.2766123502903783, 0.00016003442142511397, 0.00013334280810298427, 0.00036336699546756895, 0.0008385950077148259, 0.0009364128832291671, 0.0011684657931048802, 0.004090859853954218, 0.0051232898475925505, 0.003748397766689627, 0.003204291788543509, 0.0030227538360692256, 0.003046091108902222, 0.003246117533499343, 0.0036392434786414315, 0.004278410930270191, 0.005283518683810929, 0.006960444388017655, 0.010309577774771848, 0.020124865383434453, 0.06635681484448126, 0.23405667327568663, 0.5636929983954151, 1.0116998566227828, 1.4679362633960285, 1.812601931558535, 1.9950060897635322, 2.0233337843001036, 1.9312058750550838, 1.758038478139633, 1.5401538313429755, 1.3069334906173597, 1.0794669557149068, 0.8706733098368424, 0.6860883155986496, 0.5238106177820867, 0.36835779131721397, 0.14620672317306385, 0.00012419659618374463, 0.00019899518659947466, 0.0006177780651194362, 0.000929689973092941, 0.0009630321661548585, 0.0020232185723508987, 0.005609064592257677, 0.004302454982485805, 0.003410106537723667, 0.003083109673059259, 0.003012010470964998, 0.003123758138505136, 0.0034162368954869966, 0.003922843178576621, 0.004723055832293342, 0.006003750043005477, 0.00829741067270681, 0.013672759845841407, 0.034302391822189374, 0.12991690193311828, 0.3799334265555059, 0.7782347061535871, 1.2474387948270678, 1.6591985591344887, 1.9245090127325095, 2.0266228578466507, 1.9898603717032146, 1.852348581086037, 1.6526619812983965, 1.4239441628735723, 1.191490393524535, 0.9722261314598197], P = [0.1, 0.13042681734904557, 0.20609139803132112, 0.3110711781253064, 0.5239167045413942, 0.7814020308924767, 0.7339014265987658, 0.6936252452851789, 0.8497739554125505, 1.075597847906643, 1.047271036841658, 0.6935202050735458, 0.6849914959388652, 0.718301335203714, 0.7318313219089114, 0.7358121073607162, 0.7369656272397335, 0.7373128677965975, 0.7373827817111485, 0.7373169578571498, 0.7371252082836974, 0.7366747273905552, 0.7352574494373261, 0.7279762951440113, 0.6939691041697943, 0.620471278008448, 0.5107722381886843, 0.38963357233842755, 0.29277714613644473, 0.2225169310854292, 0.16985299456713915, 0.1289918935232332, 0.09730384974639009, 0.07345459816302471, 0.056447770459082135, 0.04539401174607546, 0.03971261999521631, 0.03976209475270268, 0.04856622953271261, 0.07819723296308925, 0.18235249861644995, 0.6523274654356559, 1.2134788190605372, 1.0639390093047323, 0.8541514477248169, 0.9869958889321279, 1.0134963449159886, 0.7099952580848314, 0.6876881036245189, 0.7183602669983684, 0.7317608114070526, 0.7358072747590195, 0.736986472621208, 0.7373450880994423, 0.7374286165963603, 0.7373872406516192, 0.7372494392451813, 0.7369549574807294, 0.7361959857049382, 0.7331582544037252, 0.7159920270115891, 0.6618388533718985, 0.5696971725605593, 0.4486829499266895, 0.3374009194840814, 0.25491142761999275, 0.19444705890787717, 0.14815991927547714, 0.11209917955120326, 0.08446429909006786, 0.06415459610039338, 0.050225084083548095, 0.04189293255913974, 0.038929592019488424, 0.04267220189461618, 0.059214942566557974, 0.11320219381295629, 0.3357701389318626, 0.9427752253978972, 1.263583636194221, 0.8955761318613746, 0.9006602618641318, 1.0542822236194498, 0.8389922815049043, 0.6779425662666211, 0.7048365358732486, 0.726900080235993, 0.7343969294187773, 0.7365683588676171, 0.7372186348433785, 0.7374076374745837, 0.7374199338689056, 0.737331587305171, 0.7371309262209627, 0.7366769429041611, 0.7352582888969386, 0.7279765535142821, 0.6939691197597528, 0.6204712687440371, 0.5107722208815905, 0.3896335599541822, 0.2927771427327144, 0.2225169315452201, 0.16985299577372703, 0.12899189450361642, 0.0973038503891582, 0.07345459856476236, 0.056447770717283234, 0.04539401192777766, 0.03971262015820262, 0.039762094993024626, 0.048566230118196545, 0.07819723492364382, 0.18235250752270715, 0.6523274749324705, 1.2134788036664492, 1.0639389715592473, 0.8541514367168013, 0.986995888194102, 1.0134963579186391, 0.7099952623864759, 0.6876881022168725, 0.7183602661987157, 0.7317608111558794, 0.7358072746865849, 0.7369864725980368, 0.7373450880910124, 0.7374286165930909, 0.737387240650335, 0.7372494392446888, 0.7369549574805517, 0.7361959857048784, 0.7331582544037107, 0.7159920270115913, 0.6618388533719034, 0.5696971725605606, 0.44868294992668867, 0.33740091948408096, 0.25491142761999297, 0.1944470589078772, 0.14815991927547734, 0.1120991795512035, 0.08446429909006806, 0.0641545961003935, 0.05022508408354817, 0.04189293255913974, 0.03892959201948841, 0.04267220189461609, 0.059214942566557675, 0.11320219381295524, 0.3357701389318567, 0.9427752253978952, 1.2635836361942319, 0.8955761318613834, 0.9006602618641413, 1.0542822236194753, 0.8389922815049404, 0.6779425662666336, 0.7048365358732603, 0.7269000802360068, 0.7343969294187919, 0.7365683588676317, 0.7372186348433931, 0.7374076374745985, 0.7374199338689202, 0.7373315873051857, 0.7371309262209775, 0.7366769429041756, 0.7352582888969527, 0.7279765535142949, 0.693969119759761, 0.6204712687440402, 0.5107722208815892, 0.38963355995418003, 0.292777142732714, 0.22251693154522026, 0.16985299577372723, 0.12899189450361653, 0.0973038503891582, 0.07345459856476236, 0.05644777071728321, 0.04539401192777764, 0.03971262015820259], Z = [0.01, 0.010361601387122854, 0.01334976200461896, 0.022914478898235967, 0.05925460456369314, 0.22158645834390728, 0.5632218806089939, 0.7326152461819432, 0.8514434424346776, 1.025440136513349, 1.1385186212944585, 0.9785510650432487, 0.8516144894712743, 0.8390449084789052, 0.8513263206683405, 0.8599944106222872, 0.8638565131664905, 0.8653374876438058, 0.8658534269586143, 0.8659818845691015, 0.8659201995972378, 0.8656766370407782, 0.8649802525803972, 0.8620099096418136, 0.8465665357971653, 0.8009541541053926, 0.7169097722865657, 0.5979580020958725, 0.4711791260162822, 0.35949589912365404, 0.2683858080818041, 0.19612821221495882, 0.14010721753192787, 0.09793174044946563, 0.06724778763308926, 0.04567970863146478, 0.030999063701455158, 0.021328673287372167, 0.01527815785879512, 0.012102610131428307, 0.012613000830267302, 0.03061914569982122, 0.1993934932265541, 0.7825743275789577, 0.958497437640365, 1.0127965607944596, 1.096345013489955, 0.9769718011974896, 0.8566010255803916, 0.8410231479725632, 0.8518320456440145, 0.8601090195517744, 0.8638952503107048, 0.8653673340901853, 0.8658895144839146, 0.8660332041423461, 0.8660032115914936, 0.8658402973132594, 0.8654317794468942, 0.8640806815104057, 0.8570666764943558, 0.8282279541397298, 0.7640365399529108, 0.6604833609991329, 0.5336382988485657, 0.4128095037888941, 0.311419621822674, 0.23006919887419822, 0.16624127156592422, 0.11743456733684887, 0.08130263172020777, 0.05546963993800406, 0.037605958782456664, 0.025637074968866642, 0.01791589382486426, 0.013341499757618582, 0.011696517870931011, 0.016550914952796966, 0.07390533353181356, 0.4759839423320325, 0.926056544522687, 0.9752743200979926, 1.064493958536547, 1.0633857434256981, 0.8993756133351918, 0.8415044003590044, 0.8460263656528593, 0.8566446214623558, 0.8624204220022345, 0.8648105507775447, 0.8656989254174494, 0.8659906841630143, 0.8660345500397189, 0.8659405507288949, 0.8656845213025383, 0.8649833010795847, 0.8620110604781162, 0.8465669125316165, 0.8009542541205412, 0.7169097905951446, 0.5979579955029141, 0.47117911789387995, 0.3594958948792663, 0.2683858066537192, 0.19612821205753717, 0.14010721778583682, 0.09793174076518558, 0.0672477879016698, 0.04567970883502288, 0.030999063851107785, 0.021328673402494516, 0.01527815796461966, 0.01210261027625701, 0.012613001215087702, 0.03061914835969584, 0.199393507267221, 0.7825743294050418, 0.9584974246504667, 1.0127965548238838, 1.096345016070897, 0.976971808436934, 0.8566010273322392, 0.8410231476296068, 0.8518320452235187, 0.8601090193414284, 0.8638952502256487, 0.8653673340578211, 0.8658895144716648, 0.8660332041376684, 0.8660032115896983, 0.8658402973125725, 0.8654317794466324, 0.8640806815103157, 0.8570666764943281, 0.8282279541397268, 0.7640365399529121, 0.6604833609991331, 0.5336382988485648, 0.4128095037888937, 0.3114196218226739, 0.2300691988741981, 0.16624127156592428, 0.11743456733684902, 0.08130263172020791, 0.05546963993800413, 0.03760595878245671, 0.025637074968866667, 0.017915893824864273, 0.013341499757618582, 0.011696517870930971, 0.016550914952796692, 0.07390533353181165, 0.4759839423320273, 0.9260565445226919, 0.9752743200979995, 1.0644939585365596, 1.0633857434257237, 0.8993756133352109, 0.8415044003590175, 0.8460263656528726, 0.8566446214623699, 0.8624204220022487, 0.8648105507775589, 0.8656989254174637, 0.8659906841630285, 0.8660345500397333, 0.8659405507289089, 0.8656845213025525, 0.8649833010795986, 0.8620110604781298, 0.8465669125316277, 0.8009542541205482, 0.716909790595147, 0.5979579955029132, 0.4711791178938788, 0.3594958948792658, 0.26838580665371936, 0.1961282120575373, 0.14010721778583693, 0.09793174076518565, 0.06724778790166984, 0.04567970883502288, 0.030999063851107785], sPOM = [0.0, 0.0035731186448263756, 0.009635274677877023, 0.022307224649144884, 0.059000170676833094, 0.17683856884050475, 0.37913611724179513, 0.4661927168444273, 0.569496107468523, 0.7631527846745173, 0.8850254020391377, 0.6406364141323029, 0.5343838945254372, 0.5363081968002114, 0.5497901757538959, 0.5571796378437099, 0.5601804103686484, 0.5612833477938454, 0.5616522467625787, 0.5617239805984532, 0.5616370714340521, 0.5613707237345055, 0.5606057445751249, 0.5572201722003479, 0.5399005328688183, 0.493237007926375, 0.41649437529091404, 0.32241830071252997, 0.23768512973005673, 0.1729345508754494, 0.12503922598374478, 0.0894156647242185, 0.06296255829975328, 0.04362374172662932, 0.02982167228210834, 0.02022563357622506, 0.013720390789440923, 0.009433844288963223, 0.006775324109888336, 0.005605016750011857, 0.007789107398017925, 0.04433937833242238, 0.25883346151139364, 0.6455707442802989, 0.670912397487115, 0.7297868079040407, 0.8283772507484993, 0.6453545159929678, 0.5391706224367667, 0.5377135203160259, 0.5500904013380359, 0.5572452023549138, 0.5602094546659347, 0.5613113049843801, 0.5616881006366121, 0.5617759711053796, 0.5617226934780847, 0.5615440605912382, 0.5611026212691506, 0.5595915654003961, 0.5515667469815849, 0.5205019749281573, 0.4583677734443749, 0.36988588414729257, 0.2776890165058598, 0.20288483927621467, 0.14719814922649146, 0.10592062506127685, 0.0751874264438212, 0.05250953922009686, 0.03611865141788603, 0.024572919521640438, 0.016647232348081905, 0.011343947696285961, 0.007924888264244064, 0.005979524092766631, 0.005911155112380366, 0.014793079789678093, 0.11755424639209565, 0.46965831745553593, 0.6847730808973094, 0.6813927217323128, 0.796407508877059, 0.7614239067638301, 0.569601775155421, 0.5334881431151733, 0.5442727847934299, 0.554372461350838, 0.5590761226946562, 0.5608985644543818, 0.5615530573872697, 0.5617549153238321, 0.561763527556184, 0.5616523869970114, 0.5613766590675118, 0.5606080342145258, 0.5572210209740708, 0.5399007841049424, 0.4932370634589113, 0.4164943800315257, 0.32241829328360405, 0.23768512466921687, 0.17293454901556407, 0.12503922563905248, 0.08941566486763783, 0.06296255852892359, 0.04362374192407601, 0.02982167242909861, 0.020225633680706137, 0.013720390863718873, 0.009433844344816086, 0.006775324160831308, 0.005605016830747399, 0.0077891077678409896, 0.044339382631582255, 0.25883346700271737, 0.6455707316305335, 0.6709123826486774, 0.7297868022637735, 0.8283772559566186, 0.6453545236668111, 0.5391706232885329, 0.5377135197912208, 0.5500904009552641, 0.5572452021868285, 0.5602094546014263, 0.5613113049602104, 0.5616881006274633, 0.5617759711018719, 0.5617226934767368, 0.5615440605907255, 0.5611026212689586, 0.5595915654003313, 0.5515667469815679, 0.520501974928157, 0.45836777344437646, 0.3698858841472926, 0.2776890165058593, 0.20288483927621448, 0.1471981492264914, 0.10592062506127688, 0.07518742644382125, 0.052509539220096935, 0.036118651417886095, 0.024572919521640483, 0.016647232348081936, 0.011343947696285982, 0.007924888264244078, 0.005979524092766636, 0.005911155112380343, 0.014793079789677753, 0.11755424639209361, 0.4696583174555353, 0.6847730808973154, 0.6813927217323208, 0.7964075088770761, 0.7614239067638633, 0.5696017751554379, 0.533488143115185, 0.5442727847934421, 0.5543724613508513, 0.5590761226946698, 0.5608985644543956, 0.5615530573872832, 0.5617549153238459, 0.5617635275561976, 0.5616523869970251, 0.5613766590675254, 0.5606080342145391, 0.5572210209740834, 0.539900784104952, 0.49323706345891694, 0.416494380031527, 0.32241829328360294, 0.23768512466921604, 0.17293454901556393, 0.12503922563905254, 0.08941566486763788, 0.06296255852892362, 0.043623741924076025, 0.02982167242909862, 0.020225633680706144, 0.013720390863718871], bPOM = [0.0, 0.003575305958801214, 0.009651800609259624, 0.022401383365523934, 0.0596797687091954, 0.18684507939472203, 0.5215983997130208, 0.9961959708884252, 1.5059600285228523, 2.199458089610479, 3.035907220393595, 3.3029083820248926, 3.0315898443819997, 2.7793806848433413, 2.6485569681526013, 2.5930643208808024, 2.571250657752506, 2.5627692722264332, 2.5593466039443196, 2.557785034765232, 2.556812775999209, 2.555796627737181, 2.553966247173388, 2.5481680414127625, 2.520363273614085, 2.4235126049727533, 2.214442963939694, 1.8863080282969367, 1.4941529228904324, 1.1155262658377914, 0.7964250258795587, 0.5490740101142605, 0.3678892531215496, 0.24077666283779206, 0.15468103029067565, 0.0980262153645757, 0.06160432866243077, 0.03864206573400825, 0.024484122349732303, 0.016304107810820784, 0.014247194581914594, 0.04831695072892321, 0.26861441737400804, 0.91570426162139, 1.7538809690243427, 2.3882045449498945, 3.0202835871574805, 3.253348126721539, 3.013309568496837, 2.7746216630481584, 2.6474985499939585, 2.592848948161099, 2.571238933255929, 2.5628329414275117, 2.5594629677116165, 2.557962221636066, 2.5570867076865658, 2.5562733254322616, 2.555040010510078, 2.552039326253602, 2.539437668267573, 2.483843645880859, 2.334660220581021, 2.063247679584928, 1.6930092626314404, 1.2993120752283351, 0.9471706037374864, 0.6638797992409972, 0.4508999033635004, 0.29840600898544645, 0.19337560334107592, 0.12330808871652967, 0.07776378810711236, 0.04877663392143528, 0.030681297152604134, 0.019748269360361857, 0.014222679025495817, 0.01982028136708198, 0.12140855169202427, 0.5275421003900705, 1.3605000045108355, 2.081458204575379, 2.708746212578053, 3.2250508218968097, 3.154960977410772, 2.880064634203072, 2.6988143387425154, 2.6140851416121658, 2.579535504198063, 2.5660696286606433, 2.5607845027566913, 2.558581964315843, 2.5574892749316063, 2.556698190112093, 2.555752214457292, 2.5539490153585556, 2.5481612936917353, 2.520360465323183, 2.42351125759733, 2.2144422242646447, 1.8863075800024744, 1.4941526413773405, 1.1155260908911522, 0.7964249191190631, 0.5490739457526045, 0.3678892145426271, 0.24077663975527802, 0.15468101648008117, 0.0980262070968092, 0.0616043237107916, 0.0386420627703076, 0.02448412058529877, 0.0163041067997589, 0.014247194295561046, 0.048316954653611556, 0.26861442371369487, 0.9157042607675561, 1.7538809368731945, 2.3882045036869735, 3.0202835623521604, 3.253348131965756, 3.013309579657692, 2.774621669769039, 2.647498553009815, 2.5928489493650355, 2.571238933718468, 2.562832941604487, 2.5594629677797123, 2.5579622216624283, 2.557086707696822, 2.5562733254362917, 2.5550400105116733, 2.5520393262542593, 2.5394376682678743, 2.48384364588103, 2.334660220581125, 2.0632476795849914, 1.6930092626314772, 1.2993120752283547, 0.9471706037374971, 0.6638797992410042, 0.4508999033635046, 0.298406008985449, 0.19337560334107734, 0.1233080887165308, 0.07776378810711303, 0.0487766339214357, 0.030681297152604377, 0.019748269360362013, 0.014222679025495885, 0.019820281367081735, 0.12140855169202233, 0.5275421003900682, 1.3605000045108426, 2.081458204575401, 2.708746212578097, 3.2250508218969025, 3.154960977410883, 2.880064634203172, 2.6988143387426096, 2.6140851416122532, 2.5795355041981485, 2.566069628660727, 2.560784502756775, 2.5585819643159264, 2.5574892749316898, 2.5566981901121757, 2.555752214457374, 2.5539490153586377, 2.5481612936918157, 2.52036046532326, 2.423511257597394, 2.2144422242646935, 1.8863075800025033, 1.494152641377356, 1.1155260908911602, 0.7964249191190681, 0.5490739457526075, 0.367889214542629, 0.24077663975527921, 0.15468101648008206, 0.09802620709680977, 0.06160432371079189], DOM = [0.0, 0.004277539590798327, 0.012178178246854094, 0.027684532176494327, 0.06525460476598387, 0.1805507404036265, 0.502325513916572, 1.0398596597244283, 1.7029566950203228, 2.5418852206036537, 3.6053137058402904, 4.569132555477131, 5.101507988502744, 5.3330134652588495, 5.425017695971796, 5.460566567151126, 5.474238265616665, 5.479455146004757, 5.481344058852698, 5.481855190266088, 5.481701599762619, 5.48105948087937, 5.479675179486401, 5.475918009308808, 5.460167998321853, 5.4001094402371645, 5.245605865743509, 4.951867481819729, 4.512401515078, 3.9688036761056797, 3.381422625763877, 2.803100595326472, 2.2700383522441916, 1.8022580380164988, 1.407167560279131, 1.0835198970179676, 0.8248827750093163, 0.6223491112492968, 0.4664646202609201, 0.34857928423269197, 0.26262338013455816, 0.2178154738897925, 0.3096073061982626, 0.8037637200156986, 1.6821871502472796, 2.6484194054467753, 3.67950476628797, 4.5895413051180896, 5.106035435773619, 5.333931182828512, 5.425181409033049, 5.46058082380462, 5.474243148758859, 5.479492505165784, 5.481432783146114, 5.482012830506074, 5.4819587710075295, 5.481490293937208, 5.480520132682087, 5.478350360376459, 5.470913074712078, 5.438648762269353, 5.337918234591606, 5.117830281009555, 4.748616189565492, 4.249885603996912, 3.6769308115207595, 3.0884558108091165, 2.52931735145587, 2.0272767652121173, 1.5955455482667178, 1.2367294808425218, 0.9465998268694256, 0.7171987360792189, 0.5391490322382894, 0.4032469920294724, 0.30177024875777664, 0.23244522022344402, 0.23366287693784082, 0.4895732018072362, 1.220420310074562, 2.159219043803882, 3.156812773586338, 4.176436378203436, 4.895380660514351, 5.244888368397668, 5.390088878504191, 5.447015450713181, 5.469008218675417, 5.477489731149214, 5.480711945702589, 5.481830618502356, 5.4820435743195315, 5.48177448192495, 5.4810876337283805, 5.479686015148882, 5.47592212177372, 5.460169431076363, 5.400109734722317, 5.245605671148989, 4.951867094450397, 4.512401079966725, 3.968803266017949, 3.381422272117019, 2.8031003061125843, 2.2700381237042424, 1.8022578615988165, 1.4071674263418856, 1.0835197965671366, 0.8248827003659694, 0.6223490561811388, 0.46646457987433715, 0.3485792547902235, 0.26262335897706335, 0.2178154605470935, 0.3096073028127177, 0.8037637210543306, 1.6821871336600034, 2.648419370162567, 3.6795047257717455, 4.589541278273256, 5.10603542331, 5.333931177766267, 5.425181407071968, 5.460580823052427, 5.474243148469612, 5.479492505054209, 5.4814327831029965, 5.48201283048944, 5.481958771001203, 5.481490293934857, 5.480520132681275, 5.478350360376233, 5.470913074712074, 5.43864876226945, 5.337918234591734, 5.117830281009683, 4.748616189565609, 4.249885603997004, 3.6769308115208275, 3.0884558108091698, 2.5293173514559104, 2.0272767652121493, 1.5955455482667424, 1.236729480842538, 0.946599826869437, 0.7171987360792268, 0.5391490322382947, 0.4032469920294764, 0.30177024875777964, 0.23244522022344588, 0.23366287693784094, 0.4895732018072334, 1.2204203100745614, 2.1592190438038923, 3.1568127735863687, 4.176436378203505, 4.895380660514463, 5.2448883683978025, 5.390088878504344, 5.447015450713339, 5.469008218675577, 5.477489731149376, 5.48071194570275, 5.481830618502517, 5.482043574319692, 5.48177448192511, 5.48108763372854, 5.479686015149042, 5.475922121773879, 5.46016943107652, 5.400109734722463, 5.2456056711491215, 4.951867094450514, 4.512401079966814, 3.968803266018013, 3.3814222721170686, 2.8031003061126216, 2.270038123704273, 1.8022578615988378, 1.407167426341901, 1.0835197965671477, 0.8248827003659781], PAR = [0.5398701925529049, 1.0110819397805315, 1.7004356869824022, 2.5875516326778514, 3.6461939214005348, 4.8450155677225135, 6.148385062529561, 7.517158394742806, 8.909159548747647, 10.279057706496399, 11.577463495590694, 12.749711027075946, 13.736104897679173, 14.476760054508842, 14.923579437961926, 15.057290630471456, 14.900485321633832, 14.515702019404257, 13.98613316493879, 13.38867672360764, 12.772544271019932, 12.150244728892366, 11.50057335392169, 10.780898403651245, 9.946065449287035, 8.969249294545557, 7.856610388331277, 6.648387181065912, 5.406826177450276, 4.1994981117364425, 3.0869749628704164, 2.1178645841091512, 1.328953029034946, 0.7470703624938115, 0.390675580324016, 0.2706705664732254, 0.3906841715701845, 0.7471807901711505, 1.329619742151502, 2.1207839860954185, 3.0972809060164788, 4.230218648345189, 5.4860037949487825, 6.827163463542329, 8.213007868650061, 9.599847855776797, 10.940479248099306, 12.182995753019883, 13.269981245307472, 14.140622179327112, 14.738981830447102, 15.029213602944678, 15.012075811970798, 14.7315615599662, 14.263757938205394, 13.691995799953942, 13.081286061221048, 12.46280532325796, 11.831189520808058, 11.15250098339343, 10.380207848459367, 9.475882520321253, 8.428099117123173, 7.2608727083941735, 6.02749487378896, 4.79484121752788, 3.6280533503240484, 2.581937281544467, 1.6989961047210647, 1.0107962633411687, 0.5398334671322168, 0.30072848073842956, 0.3007294159780846, 0.5398701925529049, 1.0110819397805324, 1.7004356869823951, 2.587551632677853, 3.646193921400537, 4.845015567722503, 6.148385062529564, 7.517158394742795, 8.90915954874765, 10.279057706496399, 11.577463495590683, 12.749711027075946, 13.736104897679173, 14.476760054508842, 14.923579437961926, 15.057290630471451, 14.900485321633832, 14.515702019404257, 13.986133164938794, 13.38867672360764, 12.772544271019928, 12.150244728892366, 11.50057335392168, 10.780898403651248, 9.94606544928705, 8.96924929454556, 7.856610388331288, 6.648387181065916, 5.406826177450267, 4.199498111736446, 3.0869749628704306, 2.117864584109153, 1.3289530290349552, 0.7470703624938124, 0.3906755803240142, 0.2706705664732254, 0.39068417157018087, 0.7471807901711496, 1.3296197421515075, 2.120783986095411, 3.097280906016464, 4.230218648345186, 5.486003794948766, 6.827163463542318, 8.213007868650072, 9.59984785577682, 10.940479248099287, 12.18299575301988, 13.269981245307479, 14.140622179327108, 14.7389818304471, 15.029213602944678, 15.012075811970792, 14.731561559966199, 14.263757938205393, 13.691995799953945, 13.081286061221054, 12.462805323257962, 11.83118952080806, 11.152500983393434, 10.380207848459358, 9.475882520321242, 8.428099117123189, 7.2608727083941895, 6.0274948737889495, 4.794841217527884, 3.628053350324051, 2.58193728154447, 1.6989961047210835, 1.0107962633411767, 0.5398334671322141, 0.30072848073842867, 0.3007294159780837, 0.5398701925529004, 1.0110819397805306, 1.7004356869823931, 2.5875516326778496, 3.646193921400545, 4.845015567722487, 6.148385062529547, 7.517158394742806, 8.909159548747661, 10.279057706496394, 11.577463495590681, 12.749711027075945, 13.73610489767916, 14.476760054508839, 14.92357943796193, 15.05729063047145, 14.90048532163383, 14.515702019404257, 13.986133164938794, 13.388676723607643, 12.77254427101993, 12.15024472889237, 11.500573353921704, 10.78089840365125, 9.946065449287032, 8.969249294545563, 7.856610388331291, 6.64838718106592, 5.406826177450298, 4.19949811173645, 3.086974962870412, 2.1178645841091743, 1.3289530290349567, 0.7470703624938143, 0.39067558032401506, 0.2706705664732254, 0.3906841715701855])","category":"page"},{"location":"generated/box/#And-plot","page":"Box model","title":"And plot","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using CairoMakie\n\nfig = Figure(resolution = (1200, 1200), fontsize = 24)\n\naxs = []\nfor (name, tracer) in pairs(timeseries)\n    idx = (length(axs))\n    push!(axs, Axis(fig[floor(Int, idx/2), Int(idx%2)], ylabel = \"$name\", xlabel = \"Year\", xticks=(0:10)))\n    lines!(axs[end], times / year, tracer, linewidth = 3)\nend\n\nfig","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(Image: )","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#*Ocean*-*Bio*geochemical-*M*odelling-*E*nvironment-OceanBioME","page":"Home","title":"Ocean Biogeochemical Modelling Environment - OceanBioME","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is a fast and flexible ocean biogeochemical modelling environment. It is highly modular and is designed to make it easy to implement and use a variety of biogeochemical and physical models. OceanBioME is built to be coupled with physics models from Oceananigans.jl allowing simulations across a wide range of spatial scales ranging from a global hydrostatic free surface model to non-hydrostatic large-eddy simulations. OceanBioME was designed specifically for ocean carbon dioxide removal applications. Notably, it includes active particles which allow individual-based models to be seamlessly coupled with the flow physics, ecosystem models, and carbonate chemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl currently provides a core of several biogeochemical models Nutrient–Phytoplankton–Zooplankton–Detritus (NPZD) and LOBSTER, a medium complexity model, air-sea gas exchange models to provide appropriate top boundary conditions, and sediment models to for the benthic boundary. PISCES and other higher complexity models are in our future development plans.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl includes a framework for integrating the growth of biological/active Lagrangian particles which move around and can interact with the (Eulerian) tracer fields - for example, consuming nutrients and carbon dioxide while releasing dissolved organic material. A growth model for sugar kelp is currently implemented using active particles, and this model can be used in a variety of dynamical scenarios including free-floating or bottom-attached particles.","category":"page"},{"location":"#Quick-install","page":"Home","title":"Quick install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME is a registered Julia package. So to install it,","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download Julia.\nLaunch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"OceanBioME\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"compat: Julia 1.9\nOceanBioME.jl requires Julia version 1.9 or later.","category":"page"},{"location":"#Running-your-first-model","page":"Home","title":"Running your first model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As a simple example lets run a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) model in a two-dimensional simulation of a buoyancy front. This example requires Oceananigans, so we install that first:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"Oceananigans\")\n\nusing OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(CPU(), size = (160, 32), extent = (10000meters, 500meters), topology = (Bounded, Flat, Bounded))\n\nbiogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid) \n\nmodel = NonhydrostaticModel(; grid, biogeochemistry,\n                              advection = WENO(; grid),\n\t\t\t                  closure = AnisotropicMinimumDissipation(),\n\t\t\t                  buoyancy = SeawaterBuoyancy(constant_salinity = true))\n\n@inline front(x, z, μ, δ) = μ + δ * tanh((x - 7000 + 4 * z) / 500)\n\nPᵢ(x, z) = ifelse(z > -50, 0.03, 0.01)\nNᵢ(x, z) = front(x, z, 2.5, -2)\nTᵢ(x, z) = front(x, z, 9, 0.05)\n\nset!(model, N = Nᵢ, P = Pᵢ, Z = Pᵢ, T = Tᵢ)\n\nsimulation = Simulation(model; Δt = 50, stop_time = 4days)\n\nsimulation.output_writers[:tracers] = JLD2OutputWriter(model, model.tracers,\n                                                       filename = \"buoyancy_front.jld2\",\n                                                       schedule = TimeInterval(24minute),\n                                                       overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can then load the saved output and visualize it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T = FieldTimeSeries(\"buoyancy_front.jld2\", \"T\")\nN = FieldTimeSeries(\"buoyancy_front.jld2\", \"N\")\nP = FieldTimeSeries(\"buoyancy_front.jld2\", \"P\")\n\nxc, yc, zc = nodes(T)\n\ntimes = T.times\n\nusing CairoMakie\n\nn = Observable(1)\n\nT_lims = (8.94, 9.06)\nN_lims = (0, 4.5)\nP_lims = (0.007, 0.02)\n\nTₙ = @lift interior(T[$n], :, 1, :)\nNₙ = @lift interior(N[$n], :, 1, :)\nPₙ = @lift interior(P[$n], :, 1, :)\n\nfig = Figure(resolution = (1000, 520), fontsize = 20)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title)\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"z (m)\", width = 770, yticks = [-400, -200, 0])\nax1 = Axis(fig[1, 1]; title = \"Temperature (°C)\", axis_kwargs...)\nax2 = Axis(fig[2, 1]; title = \"Nutrients concentration (mmol N / m³)\",axis_kwargs...)\nax3 = Axis(fig[3, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, xc, zc, Tₙ, colorrange = T_lims, colormap = Reverse(:lajolla), interpolate = true)\nhm2 = heatmap!(ax2, xc, zc, Nₙ, colorrange = N_lims, colormap = Reverse(:bamako), interpolate = true)\nhm3 = heatmap!(ax3, xc, zc, Pₙ, colorrange = P_lims, colormap = Reverse(:bamako), interpolate = true)\n\nColorbar(fig[1, 2], hm1, ticks = [8.95, 9.0, 9.05])\nColorbar(fig[2, 2], hm2, ticks = [0, 2, 4])\nColorbar(fig[3, 2], hm3, ticks = [0.01, 0.02, 0.03])\n\nrowgap!(fig.layout, 0)\n\nrecord(fig, \"buoyancy_front.mp4\", 1:length(times)) do i\n    n[] = i\nend\n\nnothing #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: buoyancy_front)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the example above, OceanBioME.jl provides the biogeochemistry and everything else is taken care of by Oceananigans.jl. For comprehensive documentation of the physics modelling see Oceananigans' Documentation; for biogeochemistry and other features we provide read below.","category":"page"},{"location":"#Places-to-find-OceanBioME-information","page":"Home","title":"Places to find OceanBioME information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation, which provides\ndocumented examples (browse them starting, e.g., from the single-column model),\nexplanations of model implementation methods,\ndetails of currently implemented models, and\na library documenting all user-facing objects and functions.\nDiscussions on the OceanBioME github\nIf you've got a question or something to talk about, don't hesitate to start a new discussion!\nIssues and pull requests also contain lots of information about problems we've found, solutions we're trying to implement, and ideas for the future.","category":"page"},{"location":"#Getting-in-touch","page":"Home","title":"Getting in touch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whether you need help getting started with OceanBioME, found a bug, want OceanBioME to be more expanded, or just want to chat about our project, you can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a discussion. \nOpen an issue. Issues are best if you think the OceanBioME source code needs attention: a bug, a sign error, an important missing feature, or a typo in the documentation.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OceanBioME as part of your research, teaching, or other activities, we would be grateful if you could cite our work below and mention OceanBioME by name, as well as citing and acknowledging Oceananigans as without them this package would not be possible.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{OceanBioMEJOSS,\n  doi = {10.21105/joss.05669},\n  url = {https://doi.org/10.21105/joss.05669},\n  year = {2023},\n  publisher = {The Open Journal},\n  volume = {8},\n  number = {90},\n  pages = {5669},\n  author = {Jago Strong-Wright and Si Chen and Navid C. Constantinou and Simone Silvestri and Gregory LeClaire Wagner and John R. Taylor},\n  title = {{OceanBioME.jl: A flexible environment for modelling the coupled interactions between ocean biogeochemistry and physics}},\n  journal = {Journal of Open Source Software}\n}","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is supported through grants from the Center for Climate Repair at Cambridge and the Gordon and Betty Moore Foundation.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"EditURL = \"../../../examples/eady.jl\"","category":"page"},{"location":"generated/eady/#Biogeochemistry-in-submesoscale-eddies-in-the-Eady-model","page":"Baroclinic instability","title":"Biogeochemistry in submesoscale eddies in the Eady model","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"In this example we setup a 3D model with a constant background buoyancy gradient with associated thermal wind (the Eady model) with the LOBSTER biogeochemical model. This example demonstrates how to use biogeochemistry in a more complicated physical model. The parameters in this example correspond roughly to those used by Taylor (2016) and result to the generation of a single submesoscale eddy.","category":"page"},{"location":"generated/eady/#Install-dependencies","page":"Baroclinic instability","title":"Install dependencies","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"First we ensure we have the required dependencies installed","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/eady/#Model-setup","page":"Baroclinic instability","title":"Model setup","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"We load the required packages. Although not required, we also set the random seed to ensure reproducibility of the results.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units\n\nusing Random\nRandom.seed!(11)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Random.TaskLocalRNG()","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Construct a grid with uniform grid spacing.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"grid = RectilinearGrid(size = (32, 32, 8), extent = (1kilometer, 1kilometer, 100meters))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 1000.0) regularly spaced with Δx=31.25\n├── Periodic y ∈ [0.0, 1000.0) regularly spaced with Δy=31.25\n└── Bounded  z ∈ [-100.0, 0.0] regularly spaced with Δz=12.5","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Set the Coriolis and buoyancy models.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"coriolis = FPlane(f = 1e-4) # [s⁻¹]\nbuoyancy = SeawaterBuoyancy()","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"SeawaterBuoyancy{Float64}:\n├── gravitational_acceleration: 9.80665\n└── equation_of_state: LinearEquationOfState(thermal_expansion=0.000167, haline_contraction=0.00078)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify parameters that are used to construct the background state.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"background_state_parameters = (M = 1e-4,       # s⁻¹, geostrophic shear\n                               f = coriolis.f, # s⁻¹, Coriolis parameter\n                               N = 1e-4,       # s⁻¹, buoyancy frequency\n                               H = grid.Lz,\n                               g = buoyancy.gravitational_acceleration,\n                               α = buoyancy.equation_of_state.thermal_expansion)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(M = 0.0001, f = 0.0001, N = 0.0001, H = 100.0, g = 9.80665, α = 0.000167)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"We assume a background buoyancy B with a constant stratification and also a constant lateral gradient (in the zonal direction). The background velocity components U and V are prescribed so that the thermal wind relationship is satisfied, that is, f partial_z U = - partial_y B and f partial_z V = partial_x B.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"T(x, y, z, t, p) = (p.M^2 * x + p.N^2 * (z + p.H)) / (p.g * p.α)\nV(x, y, z, t, p) = p.M^2 / p.f * (z + p.H)\n\nV_field = BackgroundField(V, parameters = background_state_parameters)\nT_field = BackgroundField(T, parameters = background_state_parameters)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"BackgroundField{typeof(Main.var\"##294\".T), NamedTuple{(:M, :f, :N, :H, :g, :α), NTuple{6, Float64}}}\n├── func: T (generic function with 1 method)\n└── parameters: (M = 0.0001, f = 0.0001, N = 0.0001, H = 100.0, g = 9.80665, α = 0.000167)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify some horizontal and vertical viscosity and diffusivity.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"νᵥ = κᵥ = 1e-4 # [m² s⁻¹]\nvertical_diffusivity = VerticalScalarDiffusivity(ν = νᵥ, κ = κᵥ)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Setup the biogeochemical model with optional carbonate chemistry turned on.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"biogeochemistry = LOBSTER(; grid,\n                            carbonates = true,\n                            open_bottom = true)\n\nDIC_bcs = FieldBoundaryConditions(top = GasExchange(; gas = :CO₂))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── top: FluxBoundaryCondition: ContinuousBoundaryFunction (::GasExchange{Val{:CO₂}, NamedTuple{(:A, :B, :C, :D), NTuple{4, Float64}}, NamedTuple{(:A₁, :A₂, :A₃, :B₁, :B₂, :B₃), NTuple{6, Float64}}, Float64, Float64, Float64, OceanBioME.Boundaries.pCO₂{NamedTuple{(:C, :invT, :logCT, :ClogT, :T², :ST², :ST, :S), NTuple{8, Float64}}, NamedTuple{(:C, :S, :S², :invT, :logT), NTuple{5, Float64}}, NamedTuple{(:C, :S, :S², :invT, :logT), NTuple{5, Float64}}, NamedTuple{(:C, :invT, :invTsqrtS, :invTS, :invTS¹⁵, :invTS², :sqrtS, :S, :logT, :logTsqrtS, :logTS, :TsqrtS), NTuple{12, Float64}}, NamedTuple{(:C, :invT, :logT, :sqrtSinvT, :sqrtS, :sqrtSlogT, :S), NTuple{7, Float64}}, Float64}}) at (Nothing, Nothing, Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Model instantiation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              boundary_conditions = (DIC = DIC_bcs, ),\n                              advection = WENO(grid),\n                              timestepper = :RungeKutta3,\n                              coriolis,\n                              tracers = (:T, :S),\n                              buoyancy,\n                              background_fields = (T = T_field, v = V_field),\n                              closure = vertical_diffusivity)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── timestepper: RungeKutta3TimeStepper\n├── tracers: (T, S, NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk)\n├── closure: VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=(T=0.0001, S=0.0001, NO₃=0.0001, NH₄=0.0001, P=0.0001, Z=0.0001, sPOM=0.0001, bPOM=0.0001, DOM=0.0001, DIC=0.0001, Alk=0.0001))\n├── buoyancy: SeawaterBuoyancy with g=9.80665 and LinearEquationOfState(thermal_expansion=0.000167, haline_contraction=0.00078) with ĝ = NegativeZDirection()\n└── coriolis: FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/#Initial-conditions","page":"Baroclinic instability","title":"Initial conditions","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Start with a bit of random noise added to the background thermal wind and an arbitary biogeochemical state.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Ξ(z) = randn() * z / grid.Lz * (z / grid.Lz + 1)\n\nŨ = 1e-3\nuᵢ(x, y, z) = Ũ * Ξ(z)\nvᵢ(x, y, z) = Ũ * Ξ(z)\n\nset!(model, u=uᵢ, v=vᵢ, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2409.0, S = 35, T = 20)","category":"page"},{"location":"generated/eady/#Setup-the-simulation","page":"Baroclinic instability","title":"Setup the simulation","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Choose an appropriate initial timestep for this resolution and set up the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Δx = minimum_xspacing(grid, Center(), Center(), Center())\nΔy = minimum_yspacing(grid, Center(), Center(), Center())\nΔz = minimum_zspacing(grid, Center(), Center(), Center())\n\nΔt₀ = 0.75 * min(Δx, Δy, Δz) / V(0, 0, 0, 0, background_state_parameters)\n\nsimulation = Simulation(model, Δt = Δt₀, stop_time = 10days)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Simulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── Next time step: 15.625 minutes\n├── Elapsed wall time: 0 seconds\n├── Wall time per iteration: NaN days\n├── Stop time: 10 days\n├── Stop iteration : Inf\n├── Wall time limit: Inf\n├── Callbacks: OrderedDict with 4 entries:\n│   ├── stop_time_exceeded => Callback of stop_time_exceeded on IterationInterval(1)\n│   ├── stop_iteration_exceeded => Callback of stop_iteration_exceeded on IterationInterval(1)\n│   ├── wall_time_limit_exceeded => Callback of wall_time_limit_exceeded on IterationInterval(1)\n│   └── nan_checker => Callback of NaNChecker for u on IterationInterval(100)\n├── Output writers: OrderedDict with no entries\n└── Diagnostics: OrderedDict with no entries","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Adapt the time step while keeping the CFL number fixed.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"wizard = TimeStepWizard(cfl = 0.75, diffusive_cfl = 0.75, max_Δt = 30minutes)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(5))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Create a progress message.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"progress(sim) = @printf(\"i: % 6d, sim time: % 10s, wall time: % 10s, Δt: % 10s, CFL: %.2e\\n\",\n                        sim.model.clock.iteration,\n                        prettytime(sim.model.clock.time),\n                        prettytime(sim.run_wall_time),\n                        prettytime(sim.Δt),\n                        AdvectiveCFL(sim.Δt)(sim.model))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(20))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Callback of progress on IterationInterval(20)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Here, we add some diagnostics to calculate and output.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"u, v, w = model.velocities # unpack velocity `Field`s","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NamedTuple with 3 Fields on 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo:\n├── u: 32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Center, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n├── v: 32×32×8 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n└── w: 32×32×9 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and also calculate the vertical vorticity.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"ζ = Field(∂x(v) - ∂y(u))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── boundary conditions: FieldBoundaryConditions\n│   └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux\n├── operand: BinaryOperation at (Face, Face, Center)\n├── status: time=0.0\n└── data: 38×38×14 OffsetArray(::Array{Float64, 3}, -2:35, -2:35, -2:11) with eltype Float64 with indices -2:35×-2:35×-2:11\n    └── max=0.0, min=0.0, mean=0.0","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Periodically save the velocities and vorticity to a file.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"simulation.output_writers[:fields] = JLD2OutputWriter(model, merge(model.tracers, (; u, v, w, ζ));\n                                                      schedule = TimeInterval(2hours),\n                                                      filename = \"eady_turbulence_bgc\",\n                                                      overwrite_existing = true)\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Run the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"run!(simulation)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"[ Info: Initializing simulation...\ni:      0, sim time:  0 seconds, wall time:  0 seconds, Δt: 17.188 minutes, CFL: 3.27e-01\n[ Info:     ... simulation initialization complete (6.174 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (10.202 seconds).\ni:     20, sim time:    6 hours, wall time: 18.716 seconds, Δt: 25.164 minutes, CFL: 4.74e-01\ni:     40, sim time:   15 hours, wall time: 21.254 seconds, Δt: 30 minutes, CFL: 5.78e-01\ni:     60, sim time: 1.042 days, wall time: 23.785 seconds, Δt: 30 minutes, CFL: 6.15e-01\ni:     80, sim time: 1.458 days, wall time: 26.308 seconds, Δt: 30 minutes, CFL: 6.35e-01\ni:    100, sim time: 1.875 days, wall time: 28.834 seconds, Δt: 30 minutes, CFL: 6.68e-01\ni:    120, sim time: 2.292 days, wall time: 31.360 seconds, Δt: 29.425 minutes, CFL: 7.50e-01\ni:    140, sim time: 2.621 days, wall time: 33.880 seconds, Δt: 26.070 minutes, CFL: 7.50e-01\ni:    160, sim time: 2.933 days, wall time: 36.384 seconds, Δt: 22.899 minutes, CFL: 7.50e-01\ni:    180, sim time: 3.210 days, wall time: 38.874 seconds, Δt: 20.464 minutes, CFL: 7.50e-01\ni:    200, sim time: 3.486 days, wall time: 41.371 seconds, Δt: 18.964 minutes, CFL: 7.50e-01\ni:    220, sim time: 3.715 days, wall time: 43.894 seconds, Δt: 16.861 minutes, CFL: 7.50e-01\ni:    240, sim time: 3.928 days, wall time: 46.427 seconds, Δt: 15.505 minutes, CFL: 7.50e-01\ni:    260, sim time: 4.121 days, wall time: 48.932 seconds, Δt: 13.340 minutes, CFL: 7.50e-01\ni:    280, sim time: 4.295 days, wall time: 51.436 seconds, Δt: 12.893 minutes, CFL: 7.50e-01\ni:    300, sim time: 4.461 days, wall time: 53.966 seconds, Δt: 12.870 minutes, CFL: 7.50e-01\ni:    320, sim time: 4.631 days, wall time: 56.483 seconds, Δt: 13.847 minutes, CFL: 7.50e-01\ni:    340, sim time: 4.814 days, wall time: 58.983 seconds, Δt: 12.996 minutes, CFL: 7.50e-01\ni:    360, sim time: 4.975 days, wall time: 1.025 minutes, Δt: 11.849 minutes, CFL: 7.50e-01\ni:    380, sim time: 5.127 days, wall time: 1.067 minutes, Δt: 10.534 minutes, CFL: 7.50e-01\ni:    400, sim time: 5.265 days, wall time: 1.109 minutes, Δt: 10.396 minutes, CFL: 7.50e-01\ni:    420, sim time: 5.407 days, wall time: 1.150 minutes, Δt: 10.576 minutes, CFL: 7.50e-01\ni:    440, sim time: 5.542 days, wall time: 1.193 minutes, Δt: 10.064 minutes, CFL: 7.50e-01\ni:    460, sim time: 5.674 days, wall time: 1.235 minutes, Δt: 9.861 minutes, CFL: 7.50e-01\ni:    480, sim time: 5.805 days, wall time: 1.277 minutes, Δt: 9.628 minutes, CFL: 7.50e-01\ni:    500, sim time: 5.930 days, wall time: 1.319 minutes, Δt: 9.718 minutes, CFL: 7.50e-01\ni:    520, sim time: 6.062 days, wall time: 1.360 minutes, Δt: 9.949 minutes, CFL: 7.50e-01\ni:    540, sim time: 6.188 days, wall time: 1.403 minutes, Δt: 10.059 minutes, CFL: 7.50e-01\ni:    560, sim time: 6.330 days, wall time: 1.444 minutes, Δt: 10.468 minutes, CFL: 7.50e-01\ni:    580, sim time: 6.469 days, wall time: 1.487 minutes, Δt: 10.910 minutes, CFL: 7.50e-01\ni:    600, sim time: 6.605 days, wall time: 1.529 minutes, Δt: 10.324 minutes, CFL: 7.50e-01\ni:    620, sim time: 6.746 days, wall time: 1.570 minutes, Δt: 10.431 minutes, CFL: 7.50e-01\ni:    640, sim time: 6.885 days, wall time: 1.612 minutes, Δt: 10.639 minutes, CFL: 7.50e-01\ni:    660, sim time: 7.015 days, wall time: 1.654 minutes, Δt: 10.736 minutes, CFL: 7.50e-01\ni:    680, sim time: 7.158 days, wall time: 1.695 minutes, Δt: 10.893 minutes, CFL: 7.50e-01\ni:    700, sim time: 7.295 days, wall time: 1.737 minutes, Δt: 10.534 minutes, CFL: 7.50e-01\ni:    720, sim time: 7.424 days, wall time: 1.779 minutes, Δt: 10.389 minutes, CFL: 7.50e-01\ni:    740, sim time: 7.563 days, wall time: 1.821 minutes, Δt: 9.627 minutes, CFL: 7.50e-01\ni:    760, sim time: 7.685 days, wall time: 1.863 minutes, Δt: 8.875 minutes, CFL: 7.50e-01\ni:    780, sim time: 7.805 days, wall time: 1.905 minutes, Δt: 8.765 minutes, CFL: 7.50e-01\ni:    800, sim time: 7.923 days, wall time: 1.947 minutes, Δt: 8.729 minutes, CFL: 7.50e-01\ni:    820, sim time: 8.044 days, wall time: 1.989 minutes, Δt: 9.355 minutes, CFL: 7.50e-01\ni:    840, sim time: 8.167 days, wall time: 2.031 minutes, Δt: 10.167 minutes, CFL: 7.50e-01\ni:    860, sim time: 8.301 days, wall time: 2.072 minutes, Δt: 10.343 minutes, CFL: 7.50e-01\ni:    880, sim time: 8.440 days, wall time: 2.114 minutes, Δt: 10.806 minutes, CFL: 7.50e-01\ni:    900, sim time: 8.581 days, wall time: 2.156 minutes, Δt: 10.526 minutes, CFL: 7.50e-01\ni:    920, sim time: 8.710 days, wall time: 2.197 minutes, Δt: 10.145 minutes, CFL: 7.50e-01\ni:    940, sim time: 8.847 days, wall time: 2.239 minutes, Δt: 10.212 minutes, CFL: 7.50e-01\ni:    960, sim time: 8.982 days, wall time: 2.281 minutes, Δt: 10.450 minutes, CFL: 7.50e-01\ni:    980, sim time: 9.122 days, wall time: 2.323 minutes, Δt: 11.325 minutes, CFL: 7.50e-01\ni:   1000, sim time: 9.266 days, wall time: 2.364 minutes, Δt: 11.137 minutes, CFL: 7.50e-01\ni:   1020, sim time: 9.416 days, wall time: 2.406 minutes, Δt: 10.677 minutes, CFL: 7.50e-01\ni:   1040, sim time: 9.544 days, wall time: 2.447 minutes, Δt: 10.561 minutes, CFL: 7.50e-01\ni:   1060, sim time: 9.674 days, wall time: 2.489 minutes, Δt: 10.361 minutes, CFL: 7.50e-01\ni:   1080, sim time: 9.813 days, wall time: 2.531 minutes, Δt: 10.004 minutes, CFL: 7.50e-01\ni:   1100, sim time: 9.952 days, wall time: 2.574 minutes, Δt: 10.257 minutes, CFL: 7.50e-01\n[ Info: Simulation is stopping after running for 2.589 minutes.\n[ Info: Simulation time 10 days equals or exceeds stop time 10 days.\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Now load the saved output,","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"  ζ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"ζ\")\n  P = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NO₃\")\nNH₄ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NH₄\")\nDIC = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"DIC\")\n\ntimes = ζ.times\n\nxζ, yζ, zζ = nodes(ζ)\nxc, yc, zc = nodes(P)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and plot.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using CairoMakie\n\nn = Observable(1)\n\n  ζₙ = @lift interior(  ζ[$n], :, :, grid.Nz)\n  Nₙ = @lift interior(NO₃[$n], :, :, grid.Nz) .+ interior(NH₄[$n], :, :, grid.Nz)\n  Pₙ = @lift interior(  P[$n], :, :, grid.Nz)\nDICₙ = @lift interior(DIC[$n], :, :, grid.Nz)\n\nfig = Figure(resolution = (1600, 1600), fontsize = 20)\n\nlims = [(minimum(T), maximum(T)) for T in (  ζ[:, :, grid.Nz, :],\n                                           NO₃[:, :, grid.Nz, :] .+ NH₄[:, :, grid.Nz, :],\n                                             P[:, :, grid.Nz, :],\n                                           DIC[:, :, grid.Nz, :])]\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"y (m)\", aspect = DataAspect())\n\nax1 = Axis(fig[1, 1]; title = \"Vertical vorticity (1 / s)\", axis_kwargs...)\nhm1 = heatmap!(ax1, xζ, yζ, ζₙ, colormap = :balance, colorrange = lims[1])\nColorbar(fig[1, 2], hm1)\n\nax2 = Axis(fig[1, 3]; title = \"Nutrient (NO₃ + NH₄) concentration (mmol N / m³)\", axis_kwargs...)\nhm2 = heatmap!(ax2, xc, yc, Nₙ, colormap = Reverse(:bamako), colorrange = lims[2])\nColorbar(fig[1, 4], hm2)\n\nax3 = Axis(fig[2, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhm3 = heatmap!(ax3, xc, yc, Pₙ, colormap = Reverse(:batlow), colorrange = lims[3])\nColorbar(fig[2, 2], hm3)\n\nax4 = Axis(fig[2, 3]; title = \"Dissolved inorganic carbon (mmol C / m³)\", axis_kwargs...)\nhm4 = heatmap!(ax4, xc, yc, DICₙ, colormap = Reverse(:devon), colorrange = lims[4])\nColorbar(fig[2, 4], hm4)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title, fontsize = 30)\n\nrecord(fig, \"eady.mp4\", 1:length(times), framerate = 12) do i\n    n[] = i\nend","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(Image: )","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"This page was generated using Literate.jl.","category":"page"}]
}
