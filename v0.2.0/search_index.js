var documenterSearchIndex = {"docs":
[{"location":"appendix/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Documenting the user interface.","category":"page"},{"location":"appendix/library/","page":"Library","title":"Library","text":"This page is currently broken and won't show most of the functions for some reason, any suggestions would be appreciated!","category":"page"},{"location":"appendix/library/#OceanBioME.jl","page":"Library","title":"OceanBioME.jl","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.error_on_neg!-Tuple{Any}","page":"Library","title":"OceanBioME.error_on_neg!","text":"error_on_neg(sim; params = (exclude=(), ))\n\nThrows an error if any tracers in sim.model are negative. Use like:\n\nsimulation.callbacks[:neg] = Callback(error_on_neg!)\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.remove_NaN_tendencies!-Tuple{Any}","page":"Library","title":"OceanBioME.remove_NaN_tendencies!","text":"remove_NaN_tendencies!(model)\n\nZeros any NaN value tendencies as a final protection against negative tracer run away.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.warn_on_neg!-Tuple{Any}","page":"Library","title":"OceanBioME.warn_on_neg!","text":"warn_on_neg(sim; params = (exclude=(), ))\n\nRaises a warning if any tracers in sim.model are negative. Use like:\n\nsimulation.callbacks[:neg] = Callback(warn_on_neg!)\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.zero_negative_tracers!-Tuple{Any}","page":"Library","title":"OceanBioME.zero_negative_tracers!","text":"zero_negative_tracers!(sim; params = (exclude=(), ))\n\nSets any tracers in sim.model which are negative to zero. Use like:\n\nsimulation.callbacks[:neg] = Callback(zero_negative_tracers!)\n\nThis is NOT a recommended method to preserve positivity as it strongly does not conserve tracers.\n\nTracers to exclude can be set in the parameters.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Biogeochemical-Models","page":"Library","title":"Biogeochemical Models","text":"","category":"section"},{"location":"appendix/library/#Nutrient-Phytoplankton-Zooplankton-Detritus","page":"Library","title":"Nutrient Phytoplankton Zooplankton Detritus","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.NPZDModel]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.NPZDModel","page":"Library","title":"OceanBioME.NPZDModel","text":"Nutrient-Phytoplankton-Zooplankton-Detritus model of Angela M. Kuhn, Katja Fennel, Jann Paul Mattern (2015)\n\nTracers\n\nNutrients: N (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nDetritus: D (mmol N/m³)\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#The-Lodyc-DAMTP-Ocean-Biogeochemical-Simulation-Tools-for-Ecosystem-and-Resources-(LOBSTER)","page":"Library","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.LOBSTERModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.LOBSTERModel","page":"Library","title":"OceanBioME.LOBSTERModel","text":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model\n\nTracers\n\nNitrates: NO₃ (mmol N/m³)\nAmmonia: NH₄ (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nSmall (slow sinking) particulate organic matter: sPOM (mmol N/m³)\nLarge (fast sinking) particulate organic matter: bPOM (mmol N/m³)\nDisolved organic matter: DOM (mmol N/m³)\n\nOptional tracers\n\nCarbonate chemistry\n\nDisolved inorganic carbon: DIC (mmol C/m³)\nAlkalinity: Alk (meq/m³)\n\nOxygen chemistry\n\nOxygen: O₂ (mmol O₂/m³)\n\nVariable redfield\n\nSmall (slow sinking) particulate organic matter carbon content: sPOC (mmol C/m³)\nLarge (fast sinking) particulate organic matter carbon content: bPOC (mmol C/m³)\nDisolved organic matter carbon content: DOC (mmol C/m³)\nWhen this option is enabled then the usual sPOM and bPOM change to sPON and bPON as they explicitly represent the nitrogen contained in the particulate matter\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\nFor optional tracers:\n\nTemperature: T (ᵒC)\nSalinity: S (‰)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.LOBSTERModel.LOBSTER","page":"Library","title":"OceanBioME.LOBSTERModel.LOBSTER","text":"LOBSTER(; grid,\n          phytoplankton_preference::FT = 0.5,\n          maximum_grazing_rate::FT = 9.26e-6, # 1/s\n          grazing_half_saturation::FT = 1.0, # mmol N/m³\n          light_half_saturation::FT = 33.0, # W/m² (?)\n          nitrate_ammonia_inhibition::FT = 3.0,\n          nitrate_half_saturation::FT = 0.7, # mmol N/m³\n          ammonia_half_saturation::FT = 0.001, # mmol N/m³\n          maximum_phytoplankton_growthrate::FT = 1.21e-5, # 1/s\n          zooplankton_assimilation_fraction::FT = 0.7,\n          zooplankton_mortality::FT = 2.31e-6, # 1/s/mmol N/m³\n          zooplankton_excretion_rate::FT = 5.8e-7, # 1/s\n          phytoplankton_mortality::FT = 5.8e-7, # 1/s\n          small_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          large_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          phytoplankton_exudation_fraction::FT = 0.05,\n          nitrifcaiton_rate::FT = 5.8e-7, # 1/s\n          ammonia_fraction_of_exudate::FT = 0.75, \n          ammonia_fraction_of_excriment::FT = 0.5,\n          ammonia_fraction_of_detritus::FT = 0.0,\n          phytoplankton_redfield::FT = 6.56, # mol C/mol N\n          organic_redfield::FT = 6.56, # mol C/mol N\n          phytoplankton_chlorophyll_ratio::FT = 1.31, # g Chl/mol N\n          organic_carbon_calcate_ratio::FT = 0.1, # mol CaCO₃/mol C\n          respiraiton_oxygen_nitrogen_ratio::FT = 10.75, # mol O/molN\n          nitrifcation_oxygen_nitrogen_ratio::FT = 2.0, # mol O/molN\n          slow_sinking_mortality_fraction::FT = 0.5, \n          fast_sinking_mortality_fraction::FT = 0.5,\n          disolved_organic_breakdown_rate::FT = 3.86e-7, # 1/s\n          zooplankton_calcite_dissolution::FT = 0.3,\n\n          surface_phytosynthetically_active_radiation::SPAR = (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))),\n\n          light_attenuation_model = TwoBandPhotosyntheticallyActiveRatiation(; grid),\n          sediment_model::S = nothing,\n\n          carbonates::Bool = false,\n          oxygen::Bool = false,\n          variable_redfield = false,\n\n          sinking_speed = (sPOM = 3.47e-5, bPOM = 200/day),\n          open_bottom::Bool = true,\n\n          particles::P = nothing)\n\nConstruct an instance of the LOBSTER (LOBSTER) biogeochemical model.\n\nKeywork Arguments\n\ngrid: (required) the geometry to build the model on, required to calculate sinking\nphytoplankton_preference, ..., disolved_organic_breakdown_rate: LOBSTER parameter values\nsurface_phytosynthetically_active_radiation: funciton (or array in the future) for the photosynthetically available radiaiton at the surface, should be shape f(x, y, t)\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for AbstractSediment\ncarbonates, oxygen, and variable_redfield: include models for carbonate chemistry and/or oxygen chemistry and/or variable redfield ratio disolved and particulate organic matter\nsinking_speed: named tuple of constant sinking, of fields (i.e. ZFaceField(...)) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nparticles: slot for BiogeochemicalParticles\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Sugar-kelp-(Saccharina-latissima)","page":"Library","title":"Sugar kelp (Saccharina latissima)","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.SLatissimaModel]\nprivate = true","category":"page"},{"location":"appendix/library/#OceanBioME.SLatissimaModel","page":"Library","title":"OceanBioME.SLatissimaModel","text":"Sugar kelp model of Ole Jacob Broch, Dag Slagstad (2012) and updated by Ole Jacob Broch, Ingrid Helene Ellingsen, Silje Forbord, Xinxin Wang, Zsolt Volent, Morten Omholt Alver, Aleksander Handå, Kjersti Andresen, Dag Slagstad, Kjell Inge Reitan, Yngvar Olsen, Jorunn Skjermo (2013), Julia Fossberg, Silje Forbord, Ole Jacob Broch, Arne M. Malzahn, Henrice Jansen, Aleksander Handå, Henny Førde, Maria Bergvik, Anne Lise Fleddum, Jorunn Skjermo, Yngvar Olsen (2018), and Ole Jacob Broch, Morten Omholt Alver, Trine Bekkby, Hege Gundersen, Silje Forbord, Aleksander Handå, Jorunn Skjermo, Kasper Hancke (2019).\n\nPrognostic properties\n\nArea: A (dm²)\nNitrogen reserve: N (gN/gSW)\nCarbon reserve: C (gC/gSW)\n\nTracer dependencies\n\nNitrates: NO₃ (mmol N/m³)\nPhotosynthetically available radiation: PAR (einstein/m²/day)\n\nOptionally:\n\nAmmonia: NH₄ (mmol N/m³)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.SLatissimaModel.SLatissima","page":"Library","title":"OceanBioME.SLatissimaModel.SLatissima","text":"SLatissima(; architecture :: AR = CPU()\n             growth_rate_adjustement :: FT = 4.5\n             photosynthetic_efficiency :: FT = 4.15e-5 * 24 * 10^6 / (24 * 60 * 60)\n             minimum_carbon_reserve :: FT = 0.01\n             structural_carbon :: FT = 0.2\n             exudation :: FT = 0.5\n             erosion :: FT = 0.22\n             saturation_irradiance :: FT = 90 * day/ (10 ^ 6)\n             structural_dry_weight_per_area :: FT = 0.5\n             structural_dry_to_wet_weight :: FT = 0.0785\n             carbon_reserve_per_carbon :: FT = 2.1213\n             nitrogen_reserve_per_nitrogen :: FT = 2.72\n             minimum_nitrogen_reserve :: FT = 0.0126\n             maximum_nitrogen_reserve :: FT = 0.0216\n             growth_adjustement_2 :: FT = 0.039 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve))\n             growth_adjustement_1 :: FT = 0.18 / (2 * (1 - minimum_nitrogen_reserve / maximum_nitrogen_reserve)) - growth_adjustement_2\n             maximum_specific_growth_rate :: FT = 0.18\n             structural_nitrogen :: FT = 0.0146\n             photosynthesis_at_ref_temp_1 :: FT = 1.22e-3 * 24\n             photosynthesis_at_ref_temp_2 :: FT = 1.3e-3 * 24\n             photosynthesis_ref_temp_1 :: FT = 285.0\n             photosynthesis_ref_temp_2 :: FT = 288.0\n             photoperiod_1 :: FT = 0.85\n             photoperiod_2 :: FT = 0.3\n             respiration_at_ref_temp_1 :: FT = 2.785e-4 * 24\n             respiration_at_ref_temp_2 :: FT = 5.429e-4 * 24\n             respiration_ref_temp_1 :: FT = 285.0\n             respiration_ref_temp_2 :: FT = 290.0\n             photosynthesis_arrhenius_temp :: FT = (1 / photosynthesis_ref_temp_1 - 1 / photosynthesis_ref_temp_2) ^ -1 * log(photosynthesis_at_ref_temp_2 / photosynthesis_at_ref_temp_1)\n             photosynthesis_low_temp :: FT = 271.0\n             photosynthesis_high_temp :: FT = 296.0\n             photosynthesis_high_arrhenius_temp :: FT = 1414.87\n             photosynthesis_low_arrhenius_temp :: FT = 4547.89\n             respiration_arrhenius_temp :: FT = (1 / respiration_ref_temp_1 - 1 / respiration_ref_temp_2) ^ -1 * log(respiration_at_ref_temp_2 / respiration_at_ref_temp_1)\n             current_speed_for_0p65_uptake :: FT = 0.03\n             nitrate_half_saturation :: FT = 4.0\n             ammonia_half_saturation :: FT = 1.3\n             maximum_nitrate_uptake :: FT = 10 * structural_dry_weight_per_area * 24 * 14 / (10^6)\n             maximum_ammonia_uptake :: FT = 12 * structural_dry_weight_per_area * 24 * 14 / (10^6)\n             current_1 :: FT = 0.72\n             current_2 :: FT = 0.28\n             current_3 :: FT = 0.045\n             respiration_reference_A :: FT = 1.11e-4 * 24\n             respiration_reference_B :: FT = 5.57e-5 * 24\n             exudation_redfield_ratio :: FT = Inf\n\n             pescribed_velocity :: U = 0.1\n             pescribed_temperature :: T = nothing\n             pescribed_salinity :: S = nothing\n\n             #position\n             x :: P = arch_array(architecture, [0.0])\n             y :: P = arch_array(architecture, zeros(Float64, length(x)))\n             z :: P = arch_array(architecture, zeros(Float64, length(x)))\n\n             #properties\n             A :: P = arch_array(architecture, ones(Float64, length(x)) * 30)\n             N :: P = arch_array(architecture, ones(Float64, length(x)) * 0.01)\n             C :: P = arch_array(architecture, ones(Float64, length(x)) * 0.1)\n\n             #feedback\n             nitrate_uptake :: P = arch_array(architecture, zeros(Float64, length(x)))\n             ammonia_uptake :: P = arch_array(architecture, zeros(Float64, length(x)))\n             primary_production :: P = arch_array(architecture, zeros(Float64, length(x)))\n             frond_exudation :: P = arch_array(architecture, zeros(Float64, length(x)))\n             nitrogen_erosion :: P = arch_array(architecture, zeros(Float64, length(x)))\n             carbon_erosion :: P = arch_array(architecture, zeros(Float64, length(x)))\n\n             custom_dynamics :: F = no_dynamics\n\n             scalefactor :: FT = 1.0\n             latitude :: FT = 57.5)\n\nKeywork Arguments\n\narchitecture: the architecture to adapt arrays to\ngrowth_rate_adjustement, ..., exudation_redfield_ratio: parameter values\npescribed_velocity, pescribed_temperature and pescribed_salinity: functions for the relative velocity, temperature and salinity in the form f(x, y, z, t)\nx,y and z: positions of the particles\nA, N, and C: area, nitrogen, and carbon reserves\nnitrate_uptake ... carbon_erosion: diagnostic values coupled to tracer fields\ncustom_dynamics: place to add any function of form f!(particles, model, bgc, Δt)\nscalefactor: scalar scaling for tracer coupling\nlatitude: model latitude for seasonal growth modulation\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Light-Attenuation-Models","page":"Library","title":"Light Attenuation Models","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Light]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Light","page":"Library","title":"OceanBioME.Light","text":"Light attenuation by chlorophyll as described by P. Karleskind, M. Lévy, L. Memery (2011) (implimented as twoBand) and André Morel (1988).\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Light.TwoBandPhotosyntheticallyActiveRatiation-Union{Tuple{}, Tuple{SPAR}, Tuple{FT}} where {FT, SPAR}","page":"Library","title":"OceanBioME.Light.TwoBandPhotosyntheticallyActiveRatiation","text":"TwoBandPhotosyntheticallyActiveRatiation(; grid, \n                                           water_red_attenuation::FT = 0.225, # 1/m\n                                           water_blue_attenuation::FT = 0.0232, # 1/m\n                                           chlorophyll_red_attenuation::FT = 0.037, # 1/(m * (mgChl/m³) ^ eʳ)\n                                           chlorophyll_blue_attenuation::FT = 0.074, # 1/(m * (mgChl/m³) ^ eᵇ)\n                                           chlorophyll_red_exponent::FT = 0.629,\n                                           chlorophyll_blue_exponent::FT = 0.674,\n                                           pigment_ratio::FT = 0.7,\n                                           phytoplankton_chlorophyll_ratio::FT = 1.31,\n                                           surface_PAR::SPAR = (x, y, t) -> 100 * max(0.0, cos(t * π / (12hours))))\n\nKeywork Arguments\n\ngrid: grid for building the model on\nwater_red_attenuation, ..., phytoplankton_chlorophyll_ratio: parameter values\nsurface_PAR: function (or array in the future) for the photosynthetically available radiaiton at the surface, should be shape f(x, y, t)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Boundary-Conditions","page":"Library","title":"Boundary Conditions","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries","page":"Library","title":"OceanBioME.Boundaries","text":"Boundary conditions for air/sea and sediment flux. \n\nCurrently implimented:\n\ngasexchange (R. Wanninkhof (1992))\nGeneric air sea flux  model describted by Wanninkhof, 1992 but only setup for CO₂ and O₂\nForces the DIC and ocygen fields, and requires temp (in centigrade) and salinity, plus current DIC and ALK concentration\nSediments\nSoetaert (Karline Soetaert, Jack J Middelburg, Peter M J Herman, Kerst Buis (2000))\nsimple (integrated) sediment model described by Soetaert, Middelburg, Herman and Buis, 2000 \nwhere organic matter (D and DD) that sinks to the bottom is stored and decays into NO₃ and NH₄,    and takes up O₂ in the process. \nExtended to attribute the corresponding release of DIC\nForced by O₂, NO₃, NH₄ and particle concentration in bottom cell\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.Boundaries.Sediments]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.SimpleMultiG","page":"Library","title":"OceanBioME.Boundaries.Sediments.SimpleMultiG","text":"struct SimpleMultiG\n\nHold the parameters and fields for a simple \"multi G\" single layer sediment model. Based on the Level 3 model described in Soetaert et al. 2000; doi:10.1016/S0012-8252(00)00004-0.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Boundaries.Sediments.SimpleMultiG-Union{Tuple{Any}, Tuple{P4}, Tuple{P3}, Tuple{P2}, Tuple{P1}, Tuple{FT}} where {FT, P1, P2, P3, P4}","page":"Library","title":"OceanBioME.Boundaries.Sediments.SimpleMultiG","text":"SimpleMultiG(grid; \n             fast_decay_rate::FT = 2/day,\n             slow_decay_rate::FT = 0.2/day,\n             fast_redfield::FT = 0.1509,\n             slow_redfield::FT = 0.13,\n             fast_fraction::FT = 0.74,\n             slow_fraction::FT = 0.26,\n             refactory_fraction::FT = 0.1,\n             nitrate_oxidation_params::P1 = (A = - 1.9785, B = 0.2261, C = -0.0615, D = -0.0289, E = - 0.36109, F = - 0.0232),\n             denitrifcaiton_params::P2 = (A = - 3.0790, B = 1.7509, C = 0.0593, D = - 0.1923, E = 0.0604, F = 0.0662),\n             anoxic_params::P3 = (A = - 3.9476, B = 2.6269, C = - 0.2426, D = -1.3349, E = 0.1826, F = - 0.0143),\n             depth = abs(znode(1, grid, Face())),\n             solid_dep_params::P4 = (A = 0.233, B = 0.336, C = 982, D = - 1.548, depth = depth))\n\nReturns a single layer \"multi G\" sediment model (SimpleMultiG) on grid where parameters can be optionally specified.\n\nThe model is a single layer (i.e. does not include porous diffusion) model with three classes of sediment organic matter which decay at three different rates (fast, slow, refactory). The nitrifcation/denitrifcation/anoxic mineralisation fractions default to the parameterisation of Soetaert et al. 2000; doi:10.1016/S0012-8252(00)00004-0.\n\nThis model has not yet been validated or compared to observational data. The variety of degridation processes is likely  to be strongly dependent on oxygen availability (see https://bg.copernicus.org/articles/6/1273/2009/bg-6-1273-2009.pdf) so it will therefore be important to also thoghroy validate the oxygen model (also currently limited).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Box-Model","page":"Library","title":"Box Model","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [OceanBioME.BoxModels]\nprivate = false","category":"page"},{"location":"appendix/library/#OceanBioME.BoxModels","page":"Library","title":"OceanBioME.BoxModels","text":"Integrate biogeochemical models on a single point\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.BoxModels.SaveBoxModel","page":"Library","title":"OceanBioME.BoxModels.SaveBoxModel","text":"SaveBoxModel(filepath::FP)\n\nConstruct object to save box model outputs at filepath.\n\nArguments: filepath - path to save results to\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Oceananigans.Fields.set!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Fields.set!","text":"set!(model::BoxModel; kwargs...)\n\nSet the values for a BoxModel\n\nArguments: model - the model to set the arguments for Keyword Arguments: variable and value pairs to set\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.Simulations.run!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Simulations.run!","text":"run!(model::BoxModel; feedback_interval = 1000, save_interval = Inf, save = nothing)\n\nRun a box model\n\nArguments: model - the BoxModel to solve\n\nKeyword Arguments\n\nfeedback_interval: how often (number of iterations) to display progress\nsave_interval: how often (number of iterations) to save output\nsave: SaveBoxModel object to specify how to save output\n\nTODO: should abstract out to simulation like Oceananians to add e.g. callbacks\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"appendix/params/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"These pages contain most of the parameters used in the models included in OceanBioME.jl for ease of reference.","category":"page"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"Units are generally mmol X / m³ for concentration, and SI otherwise.","category":"page"},{"location":"model_components/individuals/#individuals","page":"Overview","title":"Individuals","text":"","category":"section"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"The effects of individuals can be modelled in OceanBioME. We have implemented this through custom dynamics in the Lagrangian Particle tracking feature of Oceananigans. We have extended these functionalities to make it easier to implement \"active\" particles which interact with the tracers. We have then implemented a model of sugar kelp which can be followed as an example of using this functionality.","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"To setup particles first create a particle type with the desired properties, e.g.:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME.Particles: BiogeochemicalParticles\n\nstruct GrowingParticles{FT, VT} <: BiogeochemicalParticles \n    nutrients_half_saturation :: FT\n\n    size :: VT\n    nitrate_uptake :: VT\n\n    x :: VT\n    y :: VT\n    z :: VT\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"You then need to overload particular functions to integrate the growth, so they need to first be imported:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"import Oceananigans.Biogeochemistry: update_tendencies!\nimport Oceananigans.Models.LagrangianParticleTracking: update_lagrangian_particle_properties!, _advect_particles!","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"First, to integrate the particles properties we overload update_particle_properties, in this fictitious case we will have a Mondo-quota nutrient uptake and growth:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using Oceananigans.Fields: interpolate\n\nfunction update_lagrangian_particle_properties!(particles::GrowingParticles, model, bgc, Δt)\n    @inbounds for p in 1:length(particles)\n        nutrients = @inbounds interpolate(model.tracers.NO₃, particle.x[p], particle.y[p], particle.z[p])\n\n        uptake = nutrients / (particle.nutrients_half_saturation + nutrients)\n\n        particles.size[p] += uptake * Δt\n        particles.nitrate_uptake[p] = uptake\n    end\n    return nothing\nend\n\nnothing # hide","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"In this example the particles will not move around, and are only integrated on a single thread. For a more comprehensive example see the Sugar Kelp implementation. We then need to update the tracer tendencies to match the nutrients' uptake:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME.Particles: get_node\n\nfunction update_tendencies!(bgc, particles::GrowingParticles, model)\n    @inbounds for p in 1:length(particles)\n        # here we use an OceanBioME utility to find the nearest nodes to apply the tendency to\n        nodes, normfactor = @inbounds get_nearest_nodes(particles.x[p], particles.y[p], particles.z[p], model.grid, (Center(), Center(), Center()))\n\n        for (i, j, k, d) in nodes \n            # Reflect back on Bounded boundaries or wrap around for Periodic boundaries\n            i, j, k = (get_node(TX(), i, grid.Nx), get_node(TY(), j, grid.Ny), get_node(TZ(), k, grid.Nz))\n\n            node_volume = volume(i, j, k, grid, LX(), LY(), LZ())\n            @inbounds model.timestepper.Gⁿ.NO₃[i, j, k] += particles.nitrate_uptake[p] / (d * node_volume)\n        end\n    end\n    return nothing\nend\n\nnothing # hide","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"Now we can just plug this into any biogeochemical model setup to have particles (currently NPZD and LOBSTER):","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME, Oceananigans\n\nLx, Ly, Lz = 1000, 1000, 100\ngrid = RectilinearGrid(; size = (64, 64, 16), extent = (Lx, Ly, Lz))\n\n# Start the particles randomly distributed, floating on the surface\nparticles = GrowingParticles(0.5, zeros(3), zeros(3), rand(3) * Lx, rand(3) * Ly, zeros(3))\n\nbiogeochemistry = LOBSTER(; grid, particles)","category":"page"},{"location":"generated/O₂ air-sea exchange_parameters/#O-air-sea-exchange-default-parameters","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange default parameters","text":"","category":"section"},{"location":"generated/O₂ air-sea exchange_parameters/","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange","text":"Name Value\ngas Val{:O₂}()\nschmidt_params (A = 1953.4, B = 128.0, C = 3.9918, D = 0.050091)\nsolubility_params (A₁ = -58.3877, A₂ = 85.8079, A₃ = 23.8439, B₁ = -0.034892, B₂ = 0.015568, B₃ = -0.0019387)\nocean_density 1024.5\nair_concentration 9352.7\nair_pressure 1.0\naverage_wind_speed 10.0","category":"page"},{"location":"model_components/individuals/slatissima/#SLatissima","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar kelp (Saccharina latissima) individuals","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"We have implemented a model of sugar kelp growth within this spatially infinitesimal Lagrangian particles framework originally based on the model of Ole Jacob Broch, Dag Slagstad (2012) and updated by Ole Jacob Broch, Ingrid Helene Ellingsen, Silje Forbord, Xinxin Wang, Zsolt Volent, Morten Omholt Alver, Aleksander Handå, Kjersti Andresen, Dag Slagstad, Kjell Inge Reitan, Yngvar Olsen, Jorunn Skjermo (2013), Julia Fossberg, Silje Forbord, Ole Jacob Broch, Arne M. Malzahn, Henrice Jansen, Aleksander Handå, Henny Førde, Maria Bergvik, Anne Lise Fleddum, Jorunn Skjermo, Yngvar Olsen (2018), and Ole Jacob Broch, Morten Omholt Alver, Trine Bekkby, Hege Gundersen, Silje Forbord, Aleksander Handå, Jorunn Skjermo, Kasper Hancke (2019). This is the same model we passively forced in J. Strong-Wright, J.R. Taylor (2022). ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The model tracks three variables, the frond area, A (dm²), carbon reserve, C (gC / gSW), and nitrate reserve, N (gN / gSW). The growth depends on the nitrate (and optionally ammonia) availability in the water, the temperature, and light availability. The minimum required coupling is with nitrates so the model can be coupled with an NPZD model, but can optionally uptake ammonia, DIC (CO₂), oxygen, and release dissolved organic matter (from exudation) and large detritus.  ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Results could look something like this (from J. Strong-Wright, J.R. Taylor (2022)): (Image: Example A, N, and C profiles from [StrongWright2022](@cite))","category":"page"},{"location":"generated/TwoBandPhotosyntheticallyActiveRatiation_parameters/#TwoBandPhotosyntheticallyActiveRatiation-default-parameters","page":"TwoBandPhotosyntheticallyActiveRatiation","title":"TwoBandPhotosyntheticallyActiveRatiation default parameters","text":"","category":"section"},{"location":"generated/TwoBandPhotosyntheticallyActiveRatiation_parameters/","page":"TwoBandPhotosyntheticallyActiveRatiation","title":"TwoBandPhotosyntheticallyActiveRatiation","text":"Name Value\nwater_red_attenuation 0.225\nwater_blue_attenuation 0.0232\nchlorophyll_red_attenuation 0.037\nchlorophyll_blue_attenuation 0.074\nchlorophyll_red_exponent 0.629\nchlorophyll_blue_exponent 0.674\npigment_ratio 0.7\nphytoplankton_chlorophyll_ratio 1.31\nsurface_PAR #3","category":"page"},{"location":"model_components/biogeochemical/NPZ/#NPZD","page":"NPZD","title":"Nutrient Phytoplankton Zooplankton Detritus (NPZD) model","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"The provided NPZD model is the low complexity model of Angela M. Kuhn, Katja Fennel, Jann Paul Mattern (2015).","category":"page"},{"location":"appendix/function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"appendix/function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"visualization/#Visualize-output","page":"Visualization","title":"Visualize output","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"In the examples we use Makie.jl for plotting.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Makie comes with a few backends. In the documented examples we use CairoMakie since this backend works well on headless devices, that is, devices without monitor. Because the documentation is automatically built via GitHub actions the CairoMakie backend is necessary. However, users that want to run the examples on devices with a monitor might want to change to GLMakie that displays figures in an interactive window. To do that you need to install GLMakie, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"using Pkg\npkg\"add GLMakie\"","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"and replace using CairoMakie with using GLMakie.","category":"page"},{"location":"generated/CO₂ air-sea exchange_parameters/#CO-air-sea-exchange-default-parameters","page":"CO₂ air-sea exchange","title":"CO₂ air-sea exchange default parameters","text":"","category":"section"},{"location":"generated/CO₂ air-sea exchange_parameters/","page":"CO₂ air-sea exchange","title":"CO₂ air-sea exchange","text":"Name Value\ngas Val{:CO₂}()\nschmidt_params (A = 2073.1, B = 125.62, C = 3.6276, D = 0.043219)\nsolubility_params (A₁ = -60.2409, A₂ = 93.4517, A₃ = 23.3585, B₁ = 0.023517, B₂ = -0.023656, B₃ = 0.0047036)\nocean_density 1024.5\nair_concentration 413.4\nair_pressure 1.0\naverage_wind_speed 10.0","category":"page"},{"location":"generated/OceanBioME.Boundaries.pCO₂_parameters/#OceanBioME.Boundaries.pCO-default-parameters","page":"OceanBioME.Boundaries.pCO₂","title":"OceanBioME.Boundaries.pCO₂ default parameters","text":"","category":"section"},{"location":"generated/OceanBioME.Boundaries.pCO₂_parameters/","page":"OceanBioME.Boundaries.pCO₂","title":"OceanBioME.Boundaries.pCO₂","text":"Name Value\nsolubility (C = -162.8301, invT = 21829.68, logCT = 0.01, ClogT = 90.9241, T² = -0.000147696, ST² = 4.9867e-7, ST = -0.00025225000000000003, S = 0.025695)\nbicarbonate_dissociation (C = 62.008, S = 0.0118, S² = -0.000116, invT = -3670.7, logT = -9.7944)\ncarbonate_dissociation (C = -4.777, S = 0.0184, S² = -0.000118, invT = -1394.7, logT = 0.0)\nboric_acid_dissociation (C = 148.0248, invT = -8966.9, invTsqrtS = -2890.53, invTS = -77.942, invTS¹⁵ = 1.728, invTS² = -0.0996, sqrtS = 137.1942, S = 1.62142, logT = -24.4344, logTsqrtS = -25.085, logTS = -0.2474, TsqrtS = 0.053105)\nwater_dissociaiton (C = 148.9652, invT = -13847.26, logT = -23.6521, sqrtSinvT = 118.67, sqrtS = -5.977, sqrtSlogT = 1.0495, S = -0.01615)\nlower_pH_bound 0.0\nupper_pH_bound 14.0\nboron_ratio 1.1878787997327509e-5\nthermal_expansion 0.000167\nhaline_contraction 0.00078","category":"page"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/#NutrientPhytoplanktonZooplanktonDetritus-default-parameters","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus default parameters","text":"","category":"section"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus","text":"Name Value\ninitial_photosynthetic_slope 2.2604166666666667e-6\nbase_maximum_growth 8.08912037037037e-6\nnutrient_half_saturation 2.3868\nbase_respiration_rate 7.638888888888889e-7\nphyto_base_mortality_rate 1.1689814814814814e-7\nmaximum_grazing_rate 2.4909722222222224e-5\ngrazing_half_saturation 0.5573\nassimulation_efficiency 0.9116\nbase_excretion_rate 1.1805555555555556e-7\nzoo_base_mortality_rate 3.929398148148148e-6\nremineralization_rate 1.4039351851851852e-6\nP sinking speed 2.9525462962962963e-6\nD sinking speed 3.181597222222222e-5","category":"page"},{"location":"model_components/light/#light","page":"Light attenuation models","title":"Light attenuation models","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Nearly all BGC models require some model of the attenuation of PAR through the water. Usually this depends on the concentration of chlorophyll in the water (in phytoplankton), and may depend on the concentration of coloured dissolved organic matter or particulates.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"We currently have two models of light attenuation, a two band model by P. Karleskind, M. Lévy, L. Memery (2011) and the more widely used three band model by André Morel (1988). As the light level is diagnostic of the phytoplankton concentration these models are implemented with the light level as various auxiliary fields which are updated with callbacks within the biogeochemical model.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Models requiring light attenuation models will set these up automatically, for example LOBSTER sets light_attenuation_model = TwoBandPhotosyntheticallyActiveRatiation(). You may choose others. Additionally, you can pass the surface PAR as a function of horizontal position and time. The default for LOBSTER is (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))).","category":"page"},{"location":"generated/LOBSTER_parameters/#LOBSTER-default-parameters","page":"LOBSTER","title":"LOBSTER default parameters","text":"","category":"section"},{"location":"generated/LOBSTER_parameters/","page":"LOBSTER","title":"LOBSTER","text":"Name Value\nphytoplankton_preference 0.5\nmaximum_grazing_rate 9.26e-6\ngrazing_half_saturation 1.0\nlight_half_saturation 33.0\nnitrate_ammonia_inhibition 3.0\nnitrate_half_saturation 0.7\nammonia_half_saturation 0.001\nmaximum_phytoplankton_growthrate 1.21e-5\nzooplankton_assimilation_fraction 0.7\nzooplankton_mortality 2.31e-6\nzooplankton_excretion_rate 5.8e-7\nphytoplankton_mortality 5.8e-7\nsmall_detritus_remineralisation_rate 5.88e-7\nlarge_detritus_remineralisation_rate 5.88e-7\nphytoplankton_exudation_fraction 0.05\nnitrifcaiton_rate 5.8e-7\nammonia_fraction_of_exudate 0.75\nammonia_fraction_of_excriment 0.5\nammonia_fraction_of_detritus 0.0\nphytoplankton_redfield 6.56\norganic_redfield 6.56\nphytoplankton_chlorophyll_ratio 1.31\norganic_carbon_calcate_ratio 0.1\nrespiraiton_oxygen_nitrogen_ratio 10.75\nnitrifcation_oxygen_nitrogen_ratio 2.0\nslow_sinking_mortality_fraction 0.5\nfast_sinking_mortality_fraction 0.5\ndisolved_organic_breakdown_rate 3.86e-7\nzooplankton_calcite_dissolution 0.3\nsPOM sinking speed 3.47e-5\nbPOM sinking speed 0.0023148148148148147","category":"page"},{"location":"model_components/air-sea-gas/#air-sea-gas","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"We currently have one air-sea gas exchange model implemented. The model, proposed by R. Wanninkhof (1992), calculates the solubility of the gas in the water dependent on the temperature and salinity, and calculates the flux depending on the solubility and mixing from the wind.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Currently, the parameters for CO₂ and oxygen are included, but it would be very straightforward to add the parameters given in the original publication for other gases (e.g. inert tracers of other nutrients such as N₂). We also currently have a very simple formulation of the gas transfer velocity which depends on an average wind speed, but it would straightforwardly be expanded to permit variable wind speed (e.g. to simulate enhanced exchange from storms).","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"It is straightforward to set up a boundary as an air-sea gas exchange:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"CO₂_flux = GasExchange(; gas = :CO₂)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Where the symbol specifies the exchanged gas (currently :CO₂ or :O₂). This can then be passed in the setup of a BGC model, for example:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry = LOBSTER(; grid,\n                                                          carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"If the temperature and salinity are not included in the model they can be passed as functions:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = t_function, salinity = s_function)","category":"page"},{"location":"model_components/biogeochemical/#bgc_models","page":"Overview","title":"Biogeochemical Models","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Biogeochemical (BGC) models can be used within the Oceananigans biogeochemistry framework or as stand alone box models. All BGC models should be setup in the same way so that they can easily be substituted for each other.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"For details of the BGC models currently implemented please see the following pages.","category":"page"},{"location":"model_components/biogeochemical/#Oceananigans-setup","page":"Overview","title":"Oceananigans setup","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"At the simplest level all that is required to setup a BGC model is to pass it to the Oceananigans model setup:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"model = NonhydrostaticModel(; grid,\n                              ...\n                              biogeochemistry = MODEL_NAME(; grid))","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Where MODEL_NAME is the name of the model, you may also need to pass other parameters like:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"MODEL_NAME(; grid, growth_rate = 10.0)","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"This will set up the required tracers and auxiliary fields, and you may also set boundary conditions or additional forcing through the normal Oceananigans setup. ","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Models usually have a default light attenuation model specified, these may be substituted easily by passing different models as parameters as above.","category":"page"},{"location":"quick_start/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides biogeochemical models to plug into Oceananigans, for example this code will run one month of a single column, 7 variable (P, Z, sPOM, bPOM, DOM, NO₃, NH₄) biogeochemical situation with constant forcing.","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(size = 10, extent = 200meters, topology = (Flat, Flat, Bounded))\n\nPAR = CenterField(grid)\n\nmodel = NonhydrostaticModel(; grid, biogeochemistry = LOBSTER(; grid), auxiliary_fields = (; PAR))\n\nset!(model, P = 0.001, Z = 0.001, NO₃ = 1, NH₄ = 0.01)\n\nsimulation = Simulation(model, Δt = 1minute, stop_time = 30days)\n\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, model.tracers,\n                                                        filename = \"quickstart.jld2\",\n                                                        schedule = TimeInterval(0.5days),\n                                                        overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"This isn't quite as simple as it could be as it records the output so that we can visualize it:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using CairoMakie\n\nphytoplankton = FieldTimeSeries(\"quickstart.jld2\", \"P\")\nnitrates = FieldTimeSeries(\"quickstart.jld2\", \"NO₃\")\n\n_, _, z = nodes(nitrates)\n\nfig = Figure()\n\naxis_kwargs = (xlabel = \"Day\", ylabel = \"Depth (m)\")\nax1 = Axis(fig[1, 1]; title = \"Phytoplankton (mmol N/m³)\", axis_kwargs...)\nax2 = Axis(fig[1, 2]; title = \"Nitrate (mmol N/m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, phytoplankton.times / day, z, interior(phytoplankton , 1, 1, :, :)')\nhm2 = heatmap!(ax2,      nitrates.times / day, z, interior(nitrates, 1, 1, :, :)')\n\nfig","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides the tools to add to this, for example adding a carbonate chemistry model, or sediment at the bottom of the model. Please have a look at the rest of the examples to explore these options.","category":"page"},{"location":"model_components/utils/#utils","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We provide some utilities that may be useful.","category":"page"},{"location":"model_components/utils/#Time-step-adaptation","page":"Utilities","title":"Time step adaptation","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We have added a few additional utilities which extend the capabilities of Oceananigans' time step wizard. For column models where there is no water velocity we have added functions to calculate the advection timescale from the biogeochemical model defined sinking velocities. This could be used by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Additionally, in a column model you may have a functional definition for the viscosity, so we define an additional diffusion timescale function:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_diffusion_timescale = column_diffusion_timescale, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Finally, sinking may be more limiting than the normal advective CFL conditions so, we have an additional cell advection timescale defined for 3D models:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.6, diffusive_cfl = 0.5, max_change = 1.5, min_change = 0., cell_advection_timescale = sinking_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/#Negative-tracer-detection","page":"Utilities","title":"Negative tracer detection","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"As a temporary measure we have implemented a callback to either detect negative tracers and either scale a conserved group, force them back to zero, or throw an error. Please see the numerical implementations' page for details. This can be set up by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection! = ScaleNegativeTracers(tracers = (:P, :Z, :N))\nsimulation.callbacks[:neg] = Callback(negativity_protection!; callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"You may also pass a scale factor for each component (e.g. in case they have different redfield ratios):","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection! = ScaleNegativeTracers(tracers = (:P, :Z, :D), scalefactors = (P = 1, Z = 1, D = 2))\nsimulation.callbacks[:neg] = Callback(negativity_protection!; callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Here you should carefully consider which tracers form a conserved group (if at all). Alternatively, force to zero by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"simulation.callbacks[:neg] = Callback(OceanBioME.no_negative_tracers!, callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"or throw an error:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"simulation.callbacks[:neg] = Callback(OceanBioME.error_on_neg!, callsite = UpdateStateCallsite())","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"The latter two both optionally take a named tuple of parameters which may include exclude which can be a tuple of tracer names (Symbols) which are allowed to be negative.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/data_forced.jl\"","category":"page"},{"location":"generated/data_forced/#One-dimensional-column-forced-by-external-data-with-carbonate-chemistry","page":"Data forced column model","title":"One dimensional column forced by external data with carbonate chemistry","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This demonstrates:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"How to setup OceanBioME's biogeochemical models\nHow to load external forcing data\nHow to run with optional tracer sets such as carbonate chemistry\nHow to setup a non-uniform grid for better near surface resolution\nHow to visualise results","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This is forced by mixing layer depth and surface photosynthetically available radiation (PAR) data from the Mercator Ocean model and NASA VIIRS observations","category":"page"},{"location":"generated/data_forced/#Install-dependencies","page":"Data forced column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, NetCDF, Interpolations, DataDeps, CairoMakie\"","category":"page"},{"location":"generated/data_forced/#Model-setup","page":"Data forced column model","title":"Model setup","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First load the required packages","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using OceanBioME\nusing Oceananigans, Random, Printf, NetCDF, Interpolations, DataDeps\nusing Oceananigans.Units\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/data_forced/#Load-external-forcing-data","page":"Data forced column model","title":"Load external forcing data","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Loading the forcing data from our online copy","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"dd = DataDep(\n    \"example_data\",\n    \"example data from subpolar re analysis and observational products\",\n    \"https://github.com/OceanBioME/OceanBioME_example_data/raw/main/subpolar.nc\"\n)\nregister(dd)\nfilename = datadep\"example_data/subpolar.nc\"\ntimes = ncread(filename, \"time\")\ntemp = ncread(filename, \"temp\")\nsalinity = ncread(filename, \"so\")\nmld = ncread(filename, \"mld\")\npar = ncread(filename, \"par\")\n\ntemperature_itp = LinearInterpolation(times, temp)\nsalinity_itp = LinearInterpolation(times, salinity)\nmld_itp = LinearInterpolation(times, mld)\nPAR_itp = LinearInterpolation(times, par)\n\nt_function(x, y, z, t) = temperature_itp(mod(t, 364days))\ns_function(x, y, z, t) = salinity_itp(mod(t, 364days))\nsurface_PAR(x, y, t) = PAR_itp(mod(t, 364days))\nκₜ(x, y, z, t) = 2e-2 * max(1 - (z + mld_itp(mod(t, 364days)) / 2)^2 / (mld_itp(mod(t, 364days)) / 2)^2, 0) + 1e-4","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"┌ Warning: Checksum not provided, add to the Datadep Registration the following hash line\n│   hash = \"1d1bc2734d3269084ff16e529003c1f1610734bca093d474bb205d09b60734bd\"\n└ @ DataDeps ~/.julia/packages/DataDeps/1KjBt/src/verification.jl:44\n","category":"page"},{"location":"generated/data_forced/#Grid-and-PAR-field","page":"Data forced column model","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Define the grid (in this case a non uniform grid for better resolution near the surface) and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Nz = 33\nLz = 600meters\nrefinement = 10\nstretching = 5.754\nh(k) = (k - 1) / Nz\nζ₀(k) = 1 + (h(k) - 1) / refinement\nΣ(k) = (1 - exp(-stretching * h(k))) / (1 - exp(-stretching))\nz_faces(k) = Lz * (ζ₀(k) * Σ(k) - 1)\n\ngrid = RectilinearGrid(size = (1, 1, Nz), x = (0, 20meters), y = (0, 20meters), z = z_faces)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"1×1×33 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-600.0, 0.0] variably spaced with min(Δz)=2.18055, max(Δz)=86.9713","category":"page"},{"location":"generated/data_forced/#Biogeochemical-and-Oceananigans-model","page":"Data forced column model","title":"Biogeochemical and Oceananigans model","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Here we instantiate the LOBSTER model with carbonate chemistry and a surface flux of DIC (CO₂)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = t_function, salinity = s_function)\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry = LOBSTER(; grid,\n                                                          surface_phytosynthetically_active_radiation = surface_PAR,\n                                                          carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux),),\n                              advection = nothing)\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 11.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2400.0)","category":"page"},{"location":"generated/data_forced/#Simulation","page":"Data forced column model","title":"Simulation","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Show the progress of the simulation\nStore the output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implimentation page)\nAdapt the timestep length to reduce the run time","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"simulation = Simulation(model, Δt = 1minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, IterationInterval(500))\n\nfilename = \"data_forced\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model,\n                                                        merge(model.tracers, model.auxiliary_fields),\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"JLD2OutputWriter scheduled on TimeInterval(1 day):\n├── filepath: ./data_forced.jld2\n├── 10 outputs: (NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk, PAR)\n├── array type: Array{Float64}\n├── including: [:grid, :coriolis, :buoyancy, :closure]\n└── max filesize: Inf YiB","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"TODO: make tendency callback to force no NaNs in tendencies","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"scale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())\n\nwizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2,\n                        max_change = 2.0, min_change = 0.5,\n                        cell_diffusion_timescale = column_diffusion_timescale,\n                        cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"generated/data_forced/#Run!","page":"Data forced column model","title":"Run!","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"run!(simulation)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 1 minute, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (7.780 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (38.538 seconds).\nIteration: 0500, time: 1.081 days, Δt: 3.140 minutes, wall time: 48.742 seconds\nIteration: 1000, time: 2.170 days, Δt: 3.140 minutes, wall time: 50.944 seconds\nIteration: 1500, time: 3.259 days, Δt: 3.140 minutes, wall time: 53.163 seconds\nIteration: 2000, time: 4.349 days, Δt: 3.140 minutes, wall time: 55.339 seconds\nIteration: 2500, time: 5.438 days, Δt: 3.140 minutes, wall time: 57.587 seconds\nIteration: 3000, time: 6.528 days, Δt: 3.140 minutes, wall time: 59.789 seconds\nIteration: 3500, time: 7.617 days, Δt: 3.140 minutes, wall time: 1.033 minutes\nIteration: 4000, time: 8.706 days, Δt: 3.140 minutes, wall time: 1.070 minutes\nIteration: 4500, time: 9.796 days, Δt: 3.140 minutes, wall time: 1.106 minutes\nIteration: 5000, time: 10.885 days, Δt: 3.140 minutes, wall time: 1.143 minutes\nIteration: 5500, time: 11.975 days, Δt: 3.140 minutes, wall time: 1.179 minutes\nIteration: 6000, time: 13.063 days, Δt: 3.140 minutes, wall time: 1.216 minutes\nIteration: 6500, time: 14.153 days, Δt: 3.140 minutes, wall time: 1.252 minutes\nIteration: 7000, time: 15.242 days, Δt: 3.140 minutes, wall time: 1.289 minutes\nIteration: 7500, time: 16.331 days, Δt: 3.140 minutes, wall time: 1.326 minutes\nIteration: 8000, time: 17.421 days, Δt: 3.140 minutes, wall time: 1.362 minutes\nIteration: 8500, time: 18.510 days, Δt: 3.140 minutes, wall time: 1.399 minutes\nIteration: 9000, time: 19.600 days, Δt: 3.140 minutes, wall time: 1.435 minutes\nIteration: 9500, time: 20.689 days, Δt: 3.140 minutes, wall time: 1.471 minutes\nIteration: 10000, time: 21.778 days, Δt: 3.140 minutes, wall time: 1.508 minutes\nIteration: 10500, time: 22.868 days, Δt: 3.140 minutes, wall time: 1.543 minutes\nIteration: 11000, time: 23.957 days, Δt: 3.140 minutes, wall time: 1.580 minutes\nIteration: 11500, time: 25.046 days, Δt: 3.140 minutes, wall time: 1.616 minutes\nIteration: 12000, time: 26.135 days, Δt: 3.140 minutes, wall time: 1.652 minutes\nIteration: 12500, time: 27.225 days, Δt: 3.140 minutes, wall time: 1.688 minutes\nIteration: 13000, time: 28.314 days, Δt: 3.140 minutes, wall time: 1.724 minutes\nIteration: 13500, time: 29.403 days, Δt: 3.140 minutes, wall time: 1.760 minutes\nIteration: 14000, time: 30.493 days, Δt: 3.140 minutes, wall time: 1.796 minutes\nIteration: 14500, time: 31.582 days, Δt: 3.140 minutes, wall time: 1.832 minutes\nIteration: 15000, time: 32.672 days, Δt: 3.140 minutes, wall time: 1.868 minutes\nIteration: 15500, time: 33.761 days, Δt: 3.140 minutes, wall time: 1.903 minutes\nIteration: 16000, time: 34.850 days, Δt: 3.140 minutes, wall time: 1.940 minutes\nIteration: 16500, time: 35.940 days, Δt: 3.140 minutes, wall time: 1.975 minutes\nIteration: 17000, time: 37.028 days, Δt: 3.140 minutes, wall time: 2.012 minutes\nIteration: 17500, time: 38.118 days, Δt: 3.140 minutes, wall time: 2.048 minutes\nIteration: 18000, time: 39.207 days, Δt: 3.140 minutes, wall time: 2.084 minutes\nIteration: 18500, time: 40.297 days, Δt: 3.140 minutes, wall time: 2.119 minutes\nIteration: 19000, time: 41.386 days, Δt: 3.140 minutes, wall time: 2.155 minutes\nIteration: 19500, time: 42.475 days, Δt: 3.140 minutes, wall time: 2.192 minutes\nIteration: 20000, time: 43.565 days, Δt: 3.140 minutes, wall time: 2.227 minutes\nIteration: 20500, time: 44.654 days, Δt: 3.140 minutes, wall time: 2.263 minutes\nIteration: 21000, time: 45.744 days, Δt: 3.140 minutes, wall time: 2.299 minutes\nIteration: 21500, time: 46.833 days, Δt: 3.140 minutes, wall time: 2.335 minutes\nIteration: 22000, time: 47.922 days, Δt: 3.140 minutes, wall time: 2.371 minutes\nIteration: 22500, time: 49.011 days, Δt: 3.140 minutes, wall time: 2.407 minutes\nIteration: 23000, time: 50.100 days, Δt: 3.140 minutes, wall time: 2.443 minutes\nIteration: 23500, time: 51.190 days, Δt: 3.140 minutes, wall time: 2.479 minutes\nIteration: 24000, time: 52.279 days, Δt: 3.140 minutes, wall time: 2.516 minutes\nIteration: 24500, time: 53.369 days, Δt: 3.140 minutes, wall time: 2.552 minutes\nIteration: 25000, time: 54.458 days, Δt: 3.140 minutes, wall time: 2.588 minutes\nIteration: 25500, time: 55.547 days, Δt: 3.140 minutes, wall time: 2.624 minutes\nIteration: 26000, time: 56.637 days, Δt: 3.140 minutes, wall time: 2.660 minutes\nIteration: 26500, time: 57.726 days, Δt: 3.140 minutes, wall time: 2.696 minutes\nIteration: 27000, time: 58.816 days, Δt: 3.140 minutes, wall time: 2.732 minutes\nIteration: 27500, time: 59.905 days, Δt: 3.140 minutes, wall time: 2.767 minutes\nIteration: 28000, time: 60.994 days, Δt: 3.140 minutes, wall time: 2.804 minutes\nIteration: 28500, time: 62.083 days, Δt: 3.140 minutes, wall time: 2.840 minutes\nIteration: 29000, time: 63.172 days, Δt: 3.140 minutes, wall time: 2.876 minutes\nIteration: 29500, time: 64.262 days, Δt: 3.140 minutes, wall time: 2.912 minutes\nIteration: 30000, time: 65.351 days, Δt: 3.140 minutes, wall time: 2.948 minutes\nIteration: 30500, time: 66.440 days, Δt: 3.140 minutes, wall time: 2.984 minutes\nIteration: 31000, time: 67.530 days, Δt: 3.140 minutes, wall time: 3.020 minutes\nIteration: 31500, time: 68.619 days, Δt: 3.140 minutes, wall time: 3.056 minutes\nIteration: 32000, time: 69.709 days, Δt: 3.140 minutes, wall time: 3.092 minutes\nIteration: 32500, time: 70.798 days, Δt: 3.140 minutes, wall time: 3.128 minutes\nIteration: 33000, time: 71.887 days, Δt: 3.140 minutes, wall time: 3.164 minutes\nIteration: 33500, time: 72.977 days, Δt: 3.140 minutes, wall time: 3.200 minutes\nIteration: 34000, time: 74.065 days, Δt: 3.140 minutes, wall time: 3.236 minutes\nIteration: 34500, time: 75.155 days, Δt: 3.140 minutes, wall time: 3.272 minutes\nIteration: 35000, time: 76.244 days, Δt: 3.140 minutes, wall time: 3.308 minutes\nIteration: 35500, time: 77.334 days, Δt: 3.140 minutes, wall time: 3.344 minutes\nIteration: 36000, time: 78.423 days, Δt: 3.140 minutes, wall time: 3.381 minutes\nIteration: 36500, time: 79.512 days, Δt: 3.140 minutes, wall time: 3.416 minutes\nIteration: 37000, time: 80.602 days, Δt: 3.140 minutes, wall time: 3.452 minutes\nIteration: 37500, time: 81.691 days, Δt: 3.140 minutes, wall time: 3.488 minutes\nIteration: 38000, time: 82.781 days, Δt: 3.140 minutes, wall time: 3.524 minutes\nIteration: 38500, time: 83.870 days, Δt: 3.140 minutes, wall time: 3.561 minutes\nIteration: 39000, time: 84.959 days, Δt: 3.140 minutes, wall time: 3.596 minutes\nIteration: 39500, time: 86.048 days, Δt: 3.140 minutes, wall time: 3.632 minutes\nIteration: 40000, time: 87.137 days, Δt: 3.140 minutes, wall time: 3.669 minutes\nIteration: 40500, time: 88.227 days, Δt: 3.140 minutes, wall time: 3.704 minutes\nIteration: 41000, time: 89.316 days, Δt: 3.140 minutes, wall time: 3.741 minutes\nIteration: 41500, time: 90.406 days, Δt: 3.140 minutes, wall time: 3.776 minutes\nIteration: 42000, time: 91.495 days, Δt: 3.140 minutes, wall time: 3.812 minutes\nIteration: 42500, time: 92.584 days, Δt: 3.140 minutes, wall time: 3.848 minutes\nIteration: 43000, time: 93.674 days, Δt: 3.140 minutes, wall time: 3.884 minutes\nIteration: 43500, time: 94.629 days, Δt: 1.862 minutes, wall time: 3.920 minutes\nIteration: 44000, time: 95.062 days, Δt: 1.025 minutes, wall time: 3.956 minutes\nIteration: 44500, time: 95.621 days, Δt: 2.412 minutes, wall time: 3.991 minutes\nIteration: 45000, time: 96.674 days, Δt: 3.140 minutes, wall time: 4.027 minutes\nIteration: 45500, time: 97.763 days, Δt: 3.140 minutes, wall time: 4.063 minutes\nIteration: 46000, time: 98.853 days, Δt: 3.140 minutes, wall time: 4.099 minutes\nIteration: 46500, time: 99.919 days, Δt: 2.548 minutes, wall time: 4.135 minutes\n[ Info: Simulation is stopping after running for 4.138 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\n","category":"page"},{"location":"generated/data_forced/#Load-output-and-plot","page":"Data forced column model","title":"Load output and plot","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"101-element Vector{Float64}:\n      0.0\n  86400.0\n 172800.0\n 259200.0\n 345600.0\n 432000.0\n 518400.0\n 604800.0\n 691200.0\n 777600.0\n 864000.0\n 950400.0\n      1.0368e6\n      1.1232e6\n      1.2096e6\n      1.296e6\n      1.3824e6\n      1.4688e6\n      1.5552e6\n      1.6416e6\n      1.728e6\n      1.8144e6\n      1.9008e6\n      1.9872e6\n      2.0736e6\n      2.16e6\n      2.2464e6\n      2.3328e6\n      2.4192e6\n      2.5056e6\n      2.592e6\n      2.6784e6\n      2.7648e6\n      2.8512e6\n      2.9376e6\n      3.024e6\n      3.1104e6\n      3.1968e6\n      3.2832e6\n      3.3696e6\n      3.456e6\n      3.5424e6\n      3.6288e6\n      3.7152e6\n      3.8016e6\n      3.888e6\n      3.9744e6\n      4.0608e6\n      4.1472e6\n      4.2336e6\n      4.32e6\n      4.4064e6\n      4.4928e6\n      4.5792e6\n      4.6656e6\n      4.752e6\n      4.8384e6\n      4.9248e6\n      5.0112e6\n      5.0976e6\n      5.184e6\n      5.2704e6\n      5.3568e6\n      5.4432e6\n      5.5296e6\n      5.616e6\n      5.7024e6\n      5.7888e6\n      5.8752e6\n      5.9616e6\n      6.048e6\n      6.1344e6\n      6.2208e6\n      6.3072e6\n      6.3936e6\n      6.48e6\n      6.5664e6\n      6.6528e6\n      6.7392e6\n      6.8256e6\n      6.912e6\n      6.9984e6\n      7.0848e6\n      7.1712e6\n      7.2576e6\n      7.344e6\n      7.4304e6\n      7.5168e6\n      7.6032e6\n      7.6896e6\n      7.776e6\n      7.8624e6\n      7.9488e6\n      8.0352e6\n      8.1216e6\n      8.208e6\n      8.2944e6\n      8.3808e6\n      8.4672e6\n      8.5536e6\n      8.64e6","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], t_function(1, 1, 0, t), s_function(1, 1, 0, t))\n    carbon_export[i] = (sPOM[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, grid.Nz-20] +\n                        bPOM[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, grid.Nz-20]) * model.biogeochemistry.organic_redfield\nend","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, cumsum(air_sea_CO₂_flux) /1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, cumsum(carbon_export) /1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"(Image: )","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/SimpleMultiG_parameters/#SimpleMultiG-default-parameters","page":"SimpleMultiG","title":"SimpleMultiG default parameters","text":"","category":"section"},{"location":"generated/SimpleMultiG_parameters/","page":"SimpleMultiG","title":"SimpleMultiG","text":"Name Value\nfast_decay_rate 2.3148148148148147e-5\nslow_decay_rate 2.3148148148148148e-6\nfast_redfield 0.1509\nslow_redfield 0.13\nfast_fraction 0.74\nslow_fraction 0.26\nrefactory_fraction 0.1\nnitrate_oxidation_params (A = -1.9785, B = 0.2261, C = -0.0615, D = -0.0289, E = -0.36109, F = -0.0232)\ndenitrifcaiton_params (A = -3.079, B = 1.7509, C = 0.0593, D = -0.1923, E = 0.0604, F = 0.0662)\nanoxic_params (A = -3.9476, B = 2.6269, C = -0.2426, D = -1.3349, E = 0.1826, F = -0.0143)\nsolid_dep_params (A = 0.233, B = 0.336, C = 982, D = -1.548, depth = 1000)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/column.jl\"","category":"page"},{"location":"generated/column/#One-dimensional-column-example","page":"Simple column model","title":"One dimensional column example","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This demonstrates:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"How to setup OceanBioME's biogeochemical models\nHow to visualise results","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first","category":"page"},{"location":"generated/column/#Install-dependencies","page":"Simple column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/column/#Model-setup","page":"Simple column model","title":"Model setup","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We load the packages and choose the default LOBSTER parameter set","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using OceanBioME, Oceananigans, Printf\nusing OceanBioME.SLatissimaModel: SLatissima\nusing Oceananigans.Units\n\nconst year = years = 365days","category":"page"},{"location":"generated/column/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Simple column model","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t)) / 10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50days) + 10","category":"page"},{"location":"generated/column/#Grid-and-PAR-field","page":"Simple column model","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Define the grid and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Lx, Ly = 20meters, 20meters\ngrid = RectilinearGrid(size=(1, 1, 50), extent=(Lx, Ly, 200meters))","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = temp, salinity = (args...) -> 35)\n\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry = LOBSTER(; grid,\n                                                          surface_phytosynthetically_active_radiation = PAR⁰,\n                                                          carbonates = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              advection = nothing)\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/column/#Simulation","page":"Simple column model","title":"Simulation","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implimentation page)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"simulation = Simulation(model, Δt = 3minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                                        iteration(sim),\n                                                        prettytime(sim),\n                                                        prettytime(sim.Δt),\n                                                        prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"column\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, merge(model.tracers, model.auxiliary_fields),\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)\n\nscale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/column/#Run!","page":"Simple column model","title":"Run!","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"run!(simulation)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (7.531 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (49.262 seconds).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 1.202 minutes\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 1.443 minutes\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 1.683 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 1.930 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 2.169 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 2.408 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 2.649 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 2.900 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 3.154 minutes\n[ Info: Simulation is stopping after running for 3.398 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 3.398 minutes\n","category":"page"},{"location":"generated/column/#Load-saved-output","page":"Simple column model","title":"Load saved output","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Now we can load the results and do some post processing to diagnose the air-sea CO₂ flux. Hopefully, this looks different to the example without kelp!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"101-element Vector{Float64}:\n      0.0\n  86400.0\n 172800.0\n 259200.0\n 345600.0\n 432000.0\n 518400.0\n 604800.0\n 691200.0\n 777600.0\n 864000.0\n 950400.0\n      1.0368e6\n      1.1232e6\n      1.2096e6\n      1.296e6\n      1.3824e6\n      1.4688e6\n      1.5552e6\n      1.6416e6\n      1.728e6\n      1.8144e6\n      1.9008e6\n      1.9872e6\n      2.0736e6\n      2.16e6\n      2.2464e6\n      2.3328e6\n      2.4192e6\n      2.5056e6\n      2.592e6\n      2.6784e6\n      2.7648e6\n      2.8512e6\n      2.9376e6\n      3.024e6\n      3.1104e6\n      3.1968e6\n      3.2832e6\n      3.3696e6\n      3.456e6\n      3.5424e6\n      3.6288e6\n      3.7152e6\n      3.8016e6\n      3.888e6\n      3.9744e6\n      4.0608e6\n      4.1472e6\n      4.2336e6\n      4.32e6\n      4.4064e6\n      4.4928e6\n      4.5792e6\n      4.6656e6\n      4.752e6\n      4.8384e6\n      4.9248e6\n      5.0112e6\n      5.0976e6\n      5.184e6\n      5.2704e6\n      5.3568e6\n      5.4432e6\n      5.5296e6\n      5.616e6\n      5.7024e6\n      5.7888e6\n      5.8752e6\n      5.9616e6\n      6.048e6\n      6.1344e6\n      6.2208e6\n      6.3072e6\n      6.3936e6\n      6.48e6\n      6.5664e6\n      6.6528e6\n      6.7392e6\n      6.8256e6\n      6.912e6\n      6.9984e6\n      7.0848e6\n      7.1712e6\n      7.2576e6\n      7.344e6\n      7.4304e6\n      7.5168e6\n      7.6032e6\n      7.6896e6\n      7.776e6\n      7.8624e6\n      7.9488e6\n      8.0352e6\n      8.1216e6\n      8.208e6\n      8.2944e6\n      8.3808e6\n      8.4672e6\n      8.5536e6\n      8.64e6","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = (sPOM[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, grid.Nz-20] +\n                        bPOM[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, grid.Nz-20]) * model.biogeochemistry.organic_redfield\nend","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/column/#Plot","page":"Simple column model","title":"Plot","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Finally, we plot!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N / m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N / m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"(Image: )","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#LOBSTER","page":"LOBSTER","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER is a medium complexity BGC model with seven core prognostic variables: phytoplankton, zooplankton, small and large detritus, nitrates, ammonia, and dissolved organic matter. LOBSTER was originally proposed by in Marina Lévy, M. Gavart, L. Mémery, Guy Caniaux, Alexandre Paci (2005) and subsequently added to by Marina Levy, Anne-Marie Treguier, Marina Lévy, Patrice Klein (2001), L. Resplandy, M. Lévy, F. D'Ovidio, L. Merlivat (2009), P. Karleskind, M. Lévy, L. Memery (2011), and L. Resplandy, A. P. Martin, F. Le Moigne, P. Martin, A. Aquilina, L. Mémery, M. Lévy, R. Sanders (2012). ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, this implementation of LOBSTER optionally models simple carbonate chemistry (DIC and Alkalinity), Oxygen, and variable redfield ratios for the now dissolved and particulate organic groups (which then allows carbon to be conserved). For details see  (2023). These are activated in the model setup, for example:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER(; grid, carbonates = true)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/kelp.jl\"","category":"page"},{"location":"generated/kelp/#Simple-active-particle-example","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simple active particle example","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"In this example we will setup a simple 1D column with the LOBSTER biogeochemical model and active particles modelling the growth of sugar kelp. This demonstrates:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"How to setup OceanBioME's biogeochemical models\nHow to add biologically active particles which interact with the biodeochemical model\nHow to visualise results","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first","category":"page"},{"location":"generated/kelp/#Install-dependencies","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Install dependencies","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie, JLD2\"","category":"page"},{"location":"generated/kelp/#Model-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First load the required packages","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units\nusing Oceananigans.Architectures: arch_array\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/kelp/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days) ^ 2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t))/10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50day) + 10\n\narchitecture = CPU()","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Oceananigans.Architectures.CPU()","category":"page"},{"location":"generated/kelp/#Grid-and-PAR-field","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Define the grid and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Lx, Ly = 20meters, 20meters\ngrid = RectilinearGrid(architecture, size=(1, 1, 50), extent=(Lx, Ly, 200))","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CO₂_flux = GasExchange(; gas = :CO₂, temperature = temp, salinity = (args...) -> 35)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"FluxBoundaryCondition: ContinuousBoundaryFunction gasexchange_function at (Nothing, Nothing, Nothing)","category":"page"},{"location":"generated/kelp/#Kelp-Particle-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Kelp Particle setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@info \"Setting up kelp particles\"\n\nn = 5 # number of kelp fronds\nz₀ = [-21:5:-1;] * 1.0 # depth of kelp fronds\n\nparticles = SLatissima(; architecture,\n                         x = arch_array(architecture, ones(n) * Lx / 2),\n                         y = arch_array(architecture, ones(n) * Ly / 2),\n                         z = arch_array(architecture, z₀),\n                         A = arch_array(architecture, ones(n) * 10.0),\n                         latitude = 57.5,\n                         scalefactor = 500.0,\n                         pescribed_temperature = temp)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"5 BiogeochemicalParticles with eltype Any:\n└── 63 properties: (:architecture, :growth_rate_adjustement, :photosynthetic_efficiency, :minimum_carbon_reserve, :structural_carbon, :exudation, :erosion, :saturation_irradiance, :structural_dry_weight_per_area, :structural_dry_to_wet_weight, :carbon_reserve_per_carbon, :nitrogen_reserve_per_nitrogen, :minimum_nitrogen_reserve, :maximum_nitrogen_reserve, :growth_adjustement_2, :growth_adjustement_1, :maximum_specific_growth_rate, :structural_nitrogen, :photosynthesis_at_ref_temp_1, :photosynthesis_at_ref_temp_2, :photosynthesis_ref_temp_1, :photosynthesis_ref_temp_2, :photoperiod_1, :photoperiod_2, :respiration_at_ref_temp_1, :respiration_at_ref_temp_2, :respiration_ref_temp_1, :respiration_ref_temp_2, :photosynthesis_arrhenius_temp, :photosynthesis_low_temp, :photosynthesis_high_temp, :photosynthesis_high_arrhenius_temp, :photosynthesis_low_arrhenius_temp, :respiration_arrhenius_temp, :current_speed_for_0p65_uptake, :nitrate_half_saturation, :ammonia_half_saturation, :maximum_nitrate_uptake, :maximum_ammonia_uptake, :current_1, :current_2, :current_3, :respiration_reference_A, :respiration_reference_B, :exudation_redfield_ratio, :pescribed_velocity, :pescribed_temperature, :pescribed_salinity, :x, :y, :z, :A, :N, :C, :nitrate_uptake, :ammonia_uptake, :primary_production, :frond_exudation, :nitrogen_erosion, :carbon_erosion, :custom_dynamics, :scalefactor, :latitude)\n","category":"page"},{"location":"generated/kelp/#Setup-BGC-model","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Setup BGC model","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_phytosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            variable_redfield = true,\n                            particles)\n\nmodel = NonhydrostaticModel(; grid,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              advection = nothing)\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/kelp/#Simulation","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simulation","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"simulation = Simulation(model, Δt = 3minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                                        iteration(sim),\n                                                        prettytime(sim),\n                                                        prettytime(sim.Δt),\n                                                        prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"kelp\"\nsimulation.output_writers[:profiles] = JLD2OutputWriter(model, merge(model.tracers, model.auxiliary_fields),\n                                                        filename = \"$filename.jld2\",\n                                                        schedule = TimeInterval(1day),\n                                                        overwrite_existing = true)\n\nsimulation.output_writers[:particles] = JLD2OutputWriter(model, (; particles),\n                                                         filename = \"$(filename)_particles.jld2\",\n                                                         schedule = TimeInterval(1day),\n                                                         overwrite_existing = true)\n\nscale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPON, :bPON, :DON))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/kelp/#Run!","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Run!","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Finally we run the simulation","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"run!(simulation)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (6.285 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (1.154 minutes).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 1.568 minutes\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 1.875 minutes\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 2.191 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 2.516 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 2.848 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 3.188 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 3.536 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 3.891 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 4.256 minutes\n[ Info: Simulation is stopping after running for 4.628 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 4.628 minutes\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux - hopefully this looks different to the example without kelp!","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOC = FieldTimeSeries(\"$filename.jld2\", \"sPOC\")\nbPOC = FieldTimeSeries(\"$filename.jld2\", \"bPOC\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"101-element Vector{Float64}:\n      0.0\n  86400.0\n 172800.0\n 259200.0\n 345600.0\n 432000.0\n 518400.0\n 604800.0\n 691200.0\n 777600.0\n 864000.0\n 950400.0\n      1.0368e6\n      1.1232e6\n      1.2096e6\n      1.296e6\n      1.3824e6\n      1.4688e6\n      1.5552e6\n      1.6416e6\n      1.728e6\n      1.8144e6\n      1.9008e6\n      1.9872e6\n      2.0736e6\n      2.16e6\n      2.2464e6\n      2.3328e6\n      2.4192e6\n      2.5056e6\n      2.592e6\n      2.6784e6\n      2.7648e6\n      2.8512e6\n      2.9376e6\n      3.024e6\n      3.1104e6\n      3.1968e6\n      3.2832e6\n      3.3696e6\n      3.456e6\n      3.5424e6\n      3.6288e6\n      3.7152e6\n      3.8016e6\n      3.888e6\n      3.9744e6\n      4.0608e6\n      4.1472e6\n      4.2336e6\n      4.32e6\n      4.4064e6\n      4.4928e6\n      4.5792e6\n      4.6656e6\n      4.752e6\n      4.8384e6\n      4.9248e6\n      5.0112e6\n      5.0976e6\n      5.184e6\n      5.2704e6\n      5.3568e6\n      5.4432e6\n      5.5296e6\n      5.616e6\n      5.7024e6\n      5.7888e6\n      5.8752e6\n      5.9616e6\n      6.048e6\n      6.1344e6\n      6.2208e6\n      6.3072e6\n      6.3936e6\n      6.48e6\n      6.5664e6\n      6.6528e6\n      6.7392e6\n      6.8256e6\n      6.912e6\n      6.9984e6\n      7.0848e6\n      7.1712e6\n      7.2576e6\n      7.344e6\n      7.4304e6\n      7.5168e6\n      7.6032e6\n      7.6896e6\n      7.776e6\n      7.8624e6\n      7.9488e6\n      8.0352e6\n      8.1216e6\n      8.208e6\n      8.2944e6\n      8.3808e6\n      8.4672e6\n      8.5536e6\n      8.64e6","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nfor (i, t) in enumerate(times)\n    air_sea_CO₂_flux[i] = CO₂_flux.condition.parameters(0.0, 0.0, t, DIC[1, 1, grid.Nz, i], Alk[1, 1, grid.Nz, i], temp(1, 1, 0, t), 35)\n    carbon_export[i] = sPOC[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.sPOM.w[1, 1, grid.Nz-20] +\n                       bPOC[1, 1, grid.Nz-20, i] * model.biogeochemistry.sinking_velocities.bPOM.w[1, 1, grid.Nz-20]\nend","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using CairoMakie\n\nfig = Figure(resolution = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-85meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol C/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOC, 1, 1, :, :)' .+ interior(bPOC, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We can also have a look at how the kelp particles evolve","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using JLD2\n\nfile = jldopen(\"$(filename)_particles.jld2\")\n\niterations = keys(file[\"timeseries/t\"])\n\nA, N, C = ntuple(n -> zeros(5, length(iterations)), 3)\n\ntimes = zeros(length(iterations))\n\nfor (i, iter) in enumerate(iterations)\n    particles = file[\"timeseries/particles/$iter\"]\n    A[:, i] = particles.A\n    N[:, i] = particles.N\n    C[:, i] = particles.C\n\n    times[i] = file[\"timeseries/t/$iter\"]\nend\n\nfig = Figure(resolution = (1000, 800), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", limits = ((0, times[end] / days), nothing))\n\nax1 = Axis(fig[1, 1]; ylabel = \"Frond area (dm²)\", axis_kwargs...)\n[lines!(ax1, times / day, A[n, :], linewidth = 3) for n in 1:5]\n\nax2 = Axis(fig[2, 1]; ylabel = \"Total Carbon (gC)\", axis_kwargs...)\n[lines!(ax2, times / day, (@. A * (N + particles.structural_nitrogen) * particles.structural_dry_weight_per_area)[n, :], linewidth = 3) for n in 1:5]\n\nax3 = Axis(fig[3, 1]; ylabel = \"Total Nitrogen (gN)\", axis_kwargs...)\n[lines!(ax3, times / day, (@. A * (C + particles.structural_carbon) * particles.structural_dry_weight_per_area)[n, :], linewidth = 3) for n in 1:5]\n\nfig","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This page was generated using Literate.jl.","category":"page"},{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"Coming soon","category":"page"},{"location":"generated/SLatissima_parameters/#SLatissima-default-parameters","page":"SLatissima","title":"SLatissima default parameters","text":"","category":"section"},{"location":"generated/SLatissima_parameters/","page":"SLatissima","title":"SLatissima","text":"Name Value\ngrowth_rate_adjustement 4.5\nphotosynthetic_efficiency 0.011527777777777776\nminimum_carbon_reserve 0.01\nstructural_carbon 0.2\nexudation 0.5\nerosion 0.22\nsaturation_irradiance 7.776\nstructural_dry_weight_per_area 0.5\nstructural_dry_to_wet_weight 0.0785\ncarbon_reserve_per_carbon 2.1213\nnitrogen_reserve_per_nitrogen 2.72\nminimum_nitrogen_reserve 0.0126\nmaximum_nitrogen_reserve 0.0216\ngrowth_adjustement_2 0.046799999999999994\ngrowth_adjustement_1 0.16919999999999996\nmaximum_specific_growth_rate 0.18\nstructural_nitrogen 0.0146\nphotosynthesis_at_ref_temp_1 0.02928\nphotosynthesis_at_ref_temp_2 0.0312\nphotosynthesis_ref_temp_1 285.0\nphotosynthesis_ref_temp_2 288.0\nphotoperiod_1 0.85\nphotoperiod_2 0.3\nrespiration_at_ref_temp_1 0.006684\nrespiration_at_ref_temp_2 0.0130296\nrespiration_ref_temp_1 285.0\nrespiration_ref_temp_2 290.0\nphotosynthesis_arrhenius_temp 1737.7267805628196\nphotosynthesis_low_temp 271.0\nphotosynthesis_high_temp 296.0\nphotosynthesis_high_arrhenius_temp 1414.87\nphotosynthesis_low_arrhenius_temp 4547.89\nrespiration_arrhenius_temp 11033.8920579234\ncurrent_speed_for_0p65_uptake 0.03\nnitrate_half_saturation 4.0\nammonia_half_saturation 1.3\nmaximum_nitrate_uptake 0.00168\nmaximum_ammonia_uptake 0.002016\ncurrent_1 0.72\ncurrent_2 0.28\ncurrent_3 0.045\nrespiration_reference_A 0.002664\nrespiration_reference_B 0.0013368\nexudation_redfield_ratio Inf\npescribed_velocity 0.1\nlatitude 57.5","category":"page"},{"location":"numerical_implementation/positivity-preservation/#pos-preservation","page":"Positivity preservation","title":"Positivity Preservation","text":"","category":"section"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"It is common in BGC models to behave badly if any tracers go bellow zero, analytically this is fine because they (usually) can not get below zero, and it is unphysical for the concentration of something to be negative. Issues arise when the inaccuracy in numerical integration making some tracer become negative, usually leading to explosions (e.g. exp(-C) to inf), or bounds errors (e.g. log(C)). Essentially this occurs when the local error in the numerical scheme is sufficiently large that more than the available amount of tracer is consumed.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"There exists a set of numerical schemes which overcome this and guarantee positivity (provided a positivity preserving advection scheme and well-behaved diffusion scheme are used) but are complex to implement. Although we may do this in the future we have not yet done so in the meantime have provided some utilities which maintain positivity. The simplest option is to reset any negative tracers to zero, but this causes the model to gain mass. A slightly more complex version is to increase negative tracers to zero and remove the difference from other tracers with in the same conserved system.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"We have found this to be a satisfactory solution (when balanced against using much smaller time steps), as it tends to cause only a small and local transient change to the solution.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"See model components page for usage.","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/box.jl\"","category":"page"},{"location":"generated/box/#Box-model","page":"Box model","title":"Box model","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"In this example we will setup a LOBSTER biogeochemical model in a single box configuration. This demonstrates:","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"How to setup OceanBioME's biogeochemical models as a stand-alone box model","category":"page"},{"location":"generated/box/#Install-dependencies","page":"Box model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using Pkg\npkg\"add OceanBioME, CairoMakie, JLD2\"","category":"page"},{"location":"generated/box/#Model-setup","page":"Box model","title":"Model setup","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Load the packages and setup the initial and forcing conditions","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using OceanBioME\n\nconst minute = minutes = 60\nconst hour = hours = 60 * minutes\nconst day = days = hours * 24  # define the length of a day in seconds\nconst year = years = day * 365 # define the length of a year in days","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This is forced by a prescribed time-dependent photosynthetically available radiation (PAR)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"PAR⁰(t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nz = -10 # specify the nominal depth of the box for the PAR profile\nPAR(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Set up the model. Here, first specify the biogeochemical model, followed by initial conditions and the start and end times","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"model = BoxModel(biogeochemistry = LOBSTER(grid = BoxModelGrid()), forcing = (; PAR))\nmodel.Δt = 5minutes\nmodel.stop_time = 5years\n\nset!(model, NO₃ = 10.0, NH₄ = 0.1, P = 0.1, Z = 0.01)","category":"page"},{"location":"generated/box/#Run-the-model-(should-only-take-a-few-seconds)","page":"Box model","title":"Run the model (should only take a few seconds)","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"@info \"Running the model...\"\nrun!(model, save_interval = 100, save = SaveBoxModel(\"box.jld2\"))","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"[ Info: Running the model...\n[ Info: Reached 0 seconds\n[ Info: Reached 34.722 days\n[ Info: Reached 69.444 days\n[ Info: Reached 104.167 days\n[ Info: Reached 138.889 days\n[ Info: Reached 173.611 days\n[ Info: Reached 208.333 days\n[ Info: Reached 243.056 days\n[ Info: Reached 277.778 days\n[ Info: Reached 312.500 days\n[ Info: Reached 347.222 days\n[ Info: Reached 381.944 days\n[ Info: Reached 416.667 days\n[ Info: Reached 451.389 days\n[ Info: Reached 486.111 days\n[ Info: Reached 520.833 days\n[ Info: Reached 555.556 days\n[ Info: Reached 590.278 days\n[ Info: Reached 625 days\n[ Info: Reached 659.722 days\n[ Info: Reached 694.444 days\n[ Info: Reached 729.167 days\n[ Info: Reached 763.889 days\n[ Info: Reached 798.611 days\n[ Info: Reached 833.333 days\n[ Info: Reached 868.056 days\n[ Info: Reached 902.778 days\n[ Info: Reached 937.500 days\n[ Info: Reached 972.222 days\n[ Info: Reached 1006.944 days\n[ Info: Reached 1041.667 days\n[ Info: Reached 1076.389 days\n[ Info: Reached 1111.111 days\n[ Info: Reached 1145.833 days\n[ Info: Reached 1180.556 days\n[ Info: Reached 1215.278 days\n[ Info: Reached 1250 days\n[ Info: Reached 1284.722 days\n[ Info: Reached 1319.444 days\n[ Info: Reached 1354.167 days\n[ Info: Reached 1388.889 days\n[ Info: Reached 1423.611 days\n[ Info: Reached 1458.333 days\n[ Info: Reached 1493.056 days\n[ Info: Reached 1527.778 days\n[ Info: Reached 1562.500 days\n[ Info: Reached 1597.222 days\n[ Info: Reached 1631.944 days\n[ Info: Reached 1666.667 days\n[ Info: Reached 1701.389 days\n[ Info: Reached 1736.111 days\n[ Info: Reached 1770.833 days\n[ Info: Reached 1805.556 days\n","category":"page"},{"location":"generated/box/#Load-the-output","page":"Box model","title":"Load the output","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using JLD2\n\nvars = (:NO₃, :NH₄, :P, :Z, :DOM, :sPOM, :bPOM, :PAR)\nfile = jldopen(\"box.jld2\")\ntimes = parse.(Float64, keys(file[\"values\"]))\n\ntimeseries = NamedTuple{vars}(ntuple(t -> zeros(length(times)), length(vars)))\n\nfor (idx, time) in enumerate(times)\n    values = file[\"values/$time\"]\n    for tracer in vars\n        getproperty(timeseries, tracer)[idx] = values[tracer]\n    end\nend\n\nclose(file)","category":"page"},{"location":"generated/box/#And-plot","page":"Box model","title":"And plot","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using CairoMakie\n\nfig = Figure(resolution = (800, 1600), fontsize = 24)\n\naxs = []\nfor (idx, tracer) in enumerate(vars)\n    push!(axs, Axis(fig[idx, 1], ylabel = \"$tracer\", xlabel = \"Year\", xticks=(0:10)))\n    lines!(axs[end], times / year, timeseries[tracer], linewidth = 3)\nend\n\nfig","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(Image: )","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/biogeochemical/PISCES/#PISCES","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"WARNING: Our implementation of PISCES is very early in its development and has not yet been validated (we can't even promise that it will run properly). If you are going to run experiments with it, we strongly recommend validating it against other implementations and would be very excited if you could share the results and any changes you have to make with us.","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"PISCES (O. Aumont, C. Ethé, A. Tagliabue, L. Bopp, M. Gehlen (2015)) is a more complex mixed Mondo-quota BGC model with multiple classes of phyto and zoo plankton with variable composition (C, Fe, and Chl), multiple nutrients (NO₃, NH₄, PO₄, Fe, and Si), dissolved organic matter, and the option for either a two size class or continuum size particulate model. With a total of 24 prognostic variables the complexity of PISCES is significantly higher than other models so far implemented in this package. This diagram shows the high level architecture of the PISCES model:","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"(Image: Diagram of PISCES architecture)","category":"page"},{"location":"model_components/biogeochemical/PISCES/","page":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies volume 2) (PISCES)","text":"PISCES is considered to be a state of the art BGC model and is widely used. It is part of CMIP6 and so it often used in climate modelling but with this implementation we intended to make it easier to use it for smaller scale ecosystem modelling.","category":"page"},{"location":"#*Ocean*-*Bio*geochemical-*M*odelling-*E*nvironment-OceanBioME","page":"Home","title":"Ocean Biogeochemical Modelling Environment - OceanBioME","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is a fast and flexible ocean biogeochemical modelling environment. It is highly modular and is designed to make it easy to implement and use a varitey of biogeochemical and physical models. OceanBioME is built to be coupled with physics models from Oceananigans.jl allowing simulations across a wide range of spatial scales ranging from a global hydrostatic free surface model to nonhydrostatic large-eddy simulations. OceanBioME was designed specifically for ocean CDR applications. Notably, it includes active particles which allow individual-based models to be seamlessly coupled with the flow physics, ecosystem models, and carbonate chemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is supported through grants from the Center for Climate Repair at Cambridge and the Gordon and Betty Moore Foundation. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl currently provides a core of several biogeochemical models (NPZD and LOBSTER, a medium complexity model, and PISCES in an early stage of testing), air-sea gas exchange models to provide appropriate top boundary conditions, and sediment models for the benthic boundary (under development).","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME includes a framework for integrating the growth of biological/active Lagrangian particles which move around and can interact with the (Eulerian) tracer fields - for example, consuming nutrients and carbon dioxide while releasing dissolved organic material. A growth model for sugar kelp is currently implemented using active particles, and this model can be used in a variety of dynamical scenarios including free-floating or bottom-attached particles.","category":"page"},{"location":"#Quick-install","page":"Home","title":"Quick install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME is a registered Julia package. So to install it,","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download Julia.\nLaunch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"OceanBioME\")","category":"page"},{"location":"#Running-your-first-model","page":"Home","title":"Running your first model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As a simple example let's run a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) model in a two-dimensional simulation of a buoyancy front:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(CPU(), size=(256, 32), extent=(500meters, 100meters), topology=(Bounded, Flat, Bounded))\n\nbiogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid, open_bottom=true)\n\nmodel = NonhydrostaticModel(; grid, biogeochemistry,\n                              buoyancy=BuoyancyTracer(), tracers=:b,\n                              advection=WENO(; grid),\n                              closure = AnisotropicMinimumDissipation())\n\nbᵢ(x, y, z) = ifelse(x < 250, 1e-4, 1e-3)\n\nset!(model, b = bᵢ, N = 5.0, P = 0.1, Z = 0.1, T = 18.0)\n\nsimulation = Simulation(model; Δt = 1.0, stop_time = 3hours)\n\nwizard = TimeStepWizard(cfl = 0.3, max_change = 1.5)\n\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(5))\n\nsimulation.output_writers[:tracers] = JLD2OutputWriter(model, model.tracers,\n                                                       filename = \"buoyancy_front.jld2\",\n                                                       schedule = TimeInterval(1minute),\n                                                       overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can then load the saved output and visualize it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"b = FieldTimeSeries(\"buoyancy_front.jld2\", \"b\")\nP = FieldTimeSeries(\"buoyancy_front.jld2\", \"P\")\n\nxb, yb, zb = nodes(b)\nxP, yP, zP = nodes(P)\n\ntimes = b.times\n\nusing CairoMakie\n\nn = Observable(1)\n\nb_lims = (minimum(b), maximum(b))\nP_lims = (minimum(P), maximum(P))\n\nbₙ = @lift interior(b[$n], :, 1, :)\nPₙ = @lift interior(P[$n], :, 1, :)\n\nfig = Figure(resolution = (1200, 480), fontsize = 20)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title)\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"z (m)\", width = 970)\nax1 = Axis(fig[1, 1]; title = \"Buoyancy perturbation (m / s)\", axis_kwargs...)\nax2 = Axis(fig[2, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, xb, zb, bₙ, colorrange = b_lims, colormap = :batlow)\nhm2 = heatmap!(ax2, xP, zP, Pₙ, colorrange = P_lims, colormap = Reverse(:bamako))\n\nColorbar(fig[1, 2], hm1)\nColorbar(fig[2, 2], hm2)\n\nrecord(fig, \"buoyancy_front.mp4\", 1:length(times)) do i\n    n[] = i\nend\n\nnothing #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: buoyancy_front)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this example OceanBioME is providing the biogeochemistry and the remainder is taken care of by Oceananigans. For comprehensive documentation of the physics modelling see Oceananigans' Documentation; for biogeochemistry and other features we provide read below.","category":"page"},{"location":"#Places-to-find-OceanBioME-information","page":"Home","title":"Places to find OceanBioME information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation, which provides\nexample scripts,\nexplanations of model implementation methods,\ndetails of currently implemented models, and\na library documenting all user-facing objects and functions.\nDiscussions on the OceanBioME github\nIf you've got a question or something to talk about, don't hesitate to start a new discussion!\nIssues and pull requests also contain lots of information about problems we've found, solutions we're trying to implement, and ideas for the future.","category":"page"},{"location":"#Getting-in-touch","page":"Home","title":"Getting in touch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whether you need help getting started with OceanBioME, found a bug, want OceanBioME to be more expanded, or just want to chat about our project, you can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a discussion. \nOpen an issue. Issues are best if you think the OceanBioME source code needs attention: a bug, a sign error, an important missing feature, or a typo in the documentation.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OceanBioME as part of your research, teaching, or other activities, we would be grateful if you could cite our work and mention OceanBioME by name, as well as citing and acknowledging Oceananigans as without them this package would not be possible.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We do not currently have a citation for OceanBioME so please reach out if you wish to cite it, and we will expedite the process of making it citable.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"EditURL = \"https://oceanbiome.github.io/OceanBioME.jl/examples/eady.jl\"","category":"page"},{"location":"generated/eady/#Biogeochemistry-in-submesoscale-eddies-in-the-Eady-model","page":"Baroclinic instability","title":"Biogeochemistry in submesoscale eddies in the Eady model","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"In this example we will setup a 3D model with a constant background buoyancy gradient with associated thermal wind (the Eady model) with the LOBSTER biogeochemical model. This demonstrates how to use biogeochemistry in a more complicated physical model. The parameters correspond roughly to those in J. R. Taylor (2016) and will generate a single submesoscale eddy","category":"page"},{"location":"generated/eady/#Install-dependencies","page":"Baroclinic instability","title":"Install dependencies","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"First we will check we have the dependencies installed","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/eady/#Model-setup","page":"Baroclinic instability","title":"Model setup","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"First load the required packages","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Construct a grid with uniform grid spacing","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Lz = 100meters\ngrid = RectilinearGrid(size=(32, 32, 8), extent = (1kilometer, 1kilometer, Lz))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 1000.0) regularly spaced with Δx=31.25\n├── Periodic y ∈ [0.0, 1000.0) regularly spaced with Δy=31.25\n└── Bounded  z ∈ [-100.0, 0.0] regularly spaced with Δz=12.5","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Set the Coriolis parameter","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"coriolis = FPlane(f = 1e-4) # [s⁻¹]","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify parameters that are used to construct the background state","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"background_state_parameters = ( M2 = 1e-8,       # s⁻¹, geostrophic shear\n                                 f = coriolis.f, # s⁻¹, Coriolis parameter\n                                 N = 1e-4,       # s⁻¹, buoyancy frequency\n                                Lz = Lz )","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(M2 = 1.0e-8, f = 0.0001, N = 0.0001, Lz = 100.0)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Here, B is the background buoyancy field and V is the corresponding thermal wind","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"V(x, y, z, t, p) = p.M2 / p.f * (z - p.Lz/2)\nB(x, y, z, t, p) = p.M2 * x + p.N^2 * (z - p.Lz/2)\n\nV_field = BackgroundField(V, parameters = background_state_parameters)\nB_field = BackgroundField(B, parameters = background_state_parameters)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"BackgroundField{typeof(Main.var\"##6078\".B), NamedTuple{(:M2, :f, :N, :Lz), NTuple{4, Float64}}}\n├── func: B (generic function with 1 method)\n└── parameters: (M2 = 1.0e-8, f = 0.0001, N = 0.0001, Lz = 100.0)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify some horizontal and vertical viscosity/diffusivity","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"νᵥ = κᵥ = 1e-4 # [m² s⁻¹]\nvertical_diffusivity = VerticalScalarDiffusivity(ν = νᵥ, κ = κᵥ)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Setup the biogeochemical model with optional carbonate chemistry turned on","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"biogeochemistry = LOBSTER(; grid,\n                            carbonates = true,\n                            open_bottom = true)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model (Float64) \n Light Attenuation Model: \n    └── Two-band light attenuation model (Float64)\n Optional components:\n    ├── Carbonates ✅ \n    ├── Oxygen ❌ \n    └── Variable Redfield Ratio ❌\n Sinking Velocities:\n    ├── sPOM: 0.0 to -3.47e-5 m/s \n    └── bPOM: 0.0 to -0.0023148148148148147 m/s","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"To-do: change to a buoyancy parameterisation so we don't have to fake the temperature and salinity","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"DIC_bcs = FieldBoundaryConditions(top = GasExchange(; gas = :CO₂, temperature = (args...) -> 12, salinity = (args...) -> 35))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── top: FluxBoundaryCondition: ContinuousBoundaryFunction gasexchange_function at (Nothing, Nothing, Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Model instantiation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              boundary_conditions = (DIC = DIC_bcs, ),\n                              advection = WENO(grid),\n                              timestepper = :RungeKutta3,\n                              coriolis,\n                              tracers = :b,\n                              buoyancy = BuoyancyTracer(),\n                              background_fields = (b = B_field, v = V_field),\n                              closure = vertical_diffusivity)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── timestepper: RungeKutta3TimeStepper\n├── tracers: (b, NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk)\n├── closure: VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=(b=0.0001, NO₃=0.0001, NH₄=0.0001, P=0.0001, Z=0.0001, sPOM=0.0001, bPOM=0.0001, DOM=0.0001, DIC=0.0001, Alk=0.0001))\n├── buoyancy: Oceananigans.BuoyancyModels.BuoyancyTracer with ĝ = NegativeZDirection()\n└── coriolis: FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/#Initial-conditions","page":"Baroclinic instability","title":"Initial conditions","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Start with a bit of random noise added to the background thermal wind and an arbitary biogeochemical state","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Ξ(z) = randn() * z / grid.Lz * (z / grid.Lz + 1)\n\nŨ = 1e-3\nuᵢ(x, y, z) = Ũ * Ξ(z)\nvᵢ(x, y, z) = Ũ * Ξ(z)\n\nset!(model, u=uᵢ, v=vᵢ, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2409.0)\n\nsimulation = Simulation(model, Δt = 15minutes, stop_time = 10days)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Simulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── Next time step: 15 minutes\n├── Elapsed wall time: 0 seconds\n├── Wall time per iteration: NaN days\n├── Stop time: 10 days\n├── Stop iteration : Inf\n├── Wall time limit: Inf\n├── Callbacks: OrderedDict with 4 entries:\n│   ├── stop_time_exceeded => Callback of stop_time_exceeded on IterationInterval(1)\n│   ├── stop_iteration_exceeded => Callback of stop_iteration_exceeded on IterationInterval(1)\n│   ├── wall_time_limit_exceeded => Callback of wall_time_limit_exceeded on IterationInterval(1)\n│   └── nan_checker => Callback of NaNChecker for u on IterationInterval(100)\n├── Output writers: OrderedDict with no entries\n└── Diagnostics: OrderedDict with no entries","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Adapt the time step while keeping the CFL number fixed","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"wizard = TimeStepWizard(cfl = 0.5, diffusive_cfl = 0.5, max_Δt = 30minutes)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(1))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Create a progress message","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"progress(sim) = @printf(\"i: % 6d, sim time: % 10s, wall time: % 10s, Δt: % 10s, CFL: %.2e\\n\",\n                        sim.model.clock.iteration,\n                        prettytime(sim.model.clock.time),\n                        prettytime(sim.run_wall_time),\n                        prettytime(sim.Δt),\n                        AdvectiveCFL(sim.Δt)(sim.model))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Callback of progress on IterationInterval(10)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Here, add some diagnostics to calculate and output","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"u, v, w = model.velocities # unpack velocity `Field`s","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NamedTuple with 3 Fields on 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo:\n├── u: 32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Center, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n├── v: 32×32×8 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n└── w: 32×32×9 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and also calculate the vertical vorticity [s⁻¹].","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"ζ = Field(∂x(v) - ∂y(u))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on Oceananigans.Grids.RectilinearGrid on Oceananigans.Architectures.CPU\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── boundary conditions: FieldBoundaryConditions\n│   └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux\n├── operand: BinaryOperation at (Face, Face, Center)\n├── status: time=0.0\n└── data: 38×38×14 OffsetArray(::Array{Float64, 3}, -2:35, -2:35, -2:11) with eltype Float64 with indices -2:35×-2:35×-2:11\n    └── max=0.0, min=0.0, mean=0.0","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Periodically write the velocity and vorticity out to a file","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"simulation.output_writers[:fields] = JLD2OutputWriter(model, merge(model.tracers, (; u, v, w, ζ));\n                                                      schedule = TimeInterval(2hours),\n                                                      filename = \"eady_turbulence_bgc\",\n                                                      overwrite_existing = true)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"JLD2OutputWriter scheduled on TimeInterval(2 hours):\n├── filepath: ./eady_turbulence_bgc.jld2\n├── 14 outputs: (b, NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk, u, v, w, ζ)\n├── array type: Array{Float64}\n├── including: [:grid, :coriolis, :buoyancy, :closure]\n└── max filesize: Inf YiB","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Prevent the tracer values going negative - this is especially important in this model while no positivity preserving diffusion is implimented","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"scale_negative_tracers = ScaleNegativeTracers(; model, tracers = (:NO₃, :NH₄, :P, :Z, :sPOM, :bPOM, :DOM))\nsimulation.callbacks[:neg] = Callback(scale_negative_tracers; callsite = UpdateStateCallsite())\nsimulation.callbacks[:nan_tendencies] = Callback(remove_NaN_tendencies!; callsite = TendencyCallsite())\nsimulation.callbacks[:abort_zeros] = Callback(zero_negative_tracers!; callsite = UpdateStateCallsite())","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Run the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"run!(simulation)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"[ Info: Initializing simulation...\ni:      0, sim time:  0 seconds, wall time:  0 seconds, Δt: 16.500 minutes, CFL: 5.82e-02\n[ Info:     ... simulation initialization complete (10.413 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (1.494 minutes).\ni:     10, sim time: 3.987 hours, wall time: 1.716 minutes, Δt: 30 minutes, CFL: 4.94e-02\ni:     20, sim time: 8.500 hours, wall time: 1.775 minutes, Δt: 30 minutes, CFL: 4.94e-02\ni:     30, sim time: 13.500 hours, wall time: 1.834 minutes, Δt: 30 minutes, CFL: 6.20e-02\ni:     40, sim time: 18.500 hours, wall time: 1.893 minutes, Δt: 30 minutes, CFL: 6.21e-02\ni:     50, sim time: 23.500 hours, wall time: 1.952 minutes, Δt: 30 minutes, CFL: 6.81e-02\ni:     60, sim time: 1.188 days, wall time: 2.011 minutes, Δt: 30 minutes, CFL: 8.42e-02\ni:     70, sim time: 1.396 days, wall time: 2.068 minutes, Δt: 30 minutes, CFL: 9.68e-02\ni:     80, sim time: 1.604 days, wall time: 2.127 minutes, Δt: 30 minutes, CFL: 1.09e-01\ni:     90, sim time: 1.812 days, wall time: 2.186 minutes, Δt: 30 minutes, CFL: 1.19e-01\ni:    100, sim time: 2.021 days, wall time: 2.245 minutes, Δt: 30 minutes, CFL: 1.54e-01\ni:    110, sim time: 2.229 days, wall time: 2.304 minutes, Δt: 30 minutes, CFL: 2.03e-01\ni:    120, sim time: 2.438 days, wall time: 2.363 minutes, Δt: 30 minutes, CFL: 2.68e-01\ni:    130, sim time: 2.646 days, wall time: 2.420 minutes, Δt: 30 minutes, CFL: 3.58e-01\ni:    140, sim time: 2.854 days, wall time: 2.479 minutes, Δt: 30 minutes, CFL: 4.95e-01\ni:    150, sim time: 3.016 days, wall time: 2.538 minutes, Δt: 22.948 minutes, CFL: 5.00e-01\ni:    160, sim time: 3.155 days, wall time: 2.596 minutes, Δt: 20.137 minutes, CFL: 5.00e-01\ni:    170, sim time: 3.275 days, wall time: 2.655 minutes, Δt: 18.194 minutes, CFL: 5.00e-01\ni:    180, sim time: 3.393 days, wall time: 2.712 minutes, Δt: 16.417 minutes, CFL: 5.00e-01\ni:    190, sim time: 3.491 days, wall time: 2.771 minutes, Δt: 14.732 minutes, CFL: 5.00e-01\ni:    200, sim time: 3.583 days, wall time: 2.829 minutes, Δt: 13.442 minutes, CFL: 5.00e-01\ni:    210, sim time: 3.667 days, wall time: 2.888 minutes, Δt: 12.317 minutes, CFL: 5.00e-01\ni:    220, sim time: 3.749 days, wall time: 2.946 minutes, Δt: 11.358 minutes, CFL: 5.00e-01\ni:    230, sim time: 3.812 days, wall time: 3.005 minutes, Δt: 10.728 minutes, CFL: 5.00e-01\ni:    240, sim time: 3.885 days, wall time: 3.062 minutes, Δt: 10.462 minutes, CFL: 5.00e-01\ni:    250, sim time: 3.953 days, wall time: 3.121 minutes, Δt: 10.276 minutes, CFL: 5.00e-01\ni:    260, sim time: 4.022 days, wall time: 3.179 minutes, Δt: 10.272 minutes, CFL: 5.00e-01\ni:    270, sim time: 4.083 days, wall time: 3.238 minutes, Δt: 10.709 minutes, CFL: 5.00e-01\ni:    280, sim time: 4.157 days, wall time: 3.296 minutes, Δt: 10.689 minutes, CFL: 5.00e-01\ni:    290, sim time: 4.227 days, wall time: 3.354 minutes, Δt: 10.827 minutes, CFL: 5.00e-01\ni:    300, sim time: 4.296 days, wall time: 3.412 minutes, Δt: 11.094 minutes, CFL: 5.00e-01\ni:    310, sim time: 4.373 days, wall time: 3.471 minutes, Δt: 11.657 minutes, CFL: 5.00e-01\ni:    320, sim time: 4.450 days, wall time: 3.529 minutes, Δt: 12.521 minutes, CFL: 5.00e-01\ni:    330, sim time: 4.536 days, wall time: 3.588 minutes, Δt: 13.228 minutes, CFL: 5.00e-01\ni:    340, sim time: 4.620 days, wall time: 3.646 minutes, Δt: 12.920 minutes, CFL: 5.00e-01\ni:    350, sim time: 4.701 days, wall time: 3.704 minutes, Δt: 12.285 minutes, CFL: 5.00e-01\ni:    360, sim time: 4.783 days, wall time: 3.762 minutes, Δt: 11.576 minutes, CFL: 5.00e-01\ni:    370, sim time: 4.857 days, wall time: 3.821 minutes, Δt: 11.419 minutes, CFL: 5.00e-01\ni:    380, sim time: 4.932 days, wall time: 3.879 minutes, Δt: 11.264 minutes, CFL: 5.00e-01\ni:    390, sim time: 5.008 days, wall time: 3.937 minutes, Δt: 11.138 minutes, CFL: 5.00e-01\ni:    400, sim time: 5.083 days, wall time: 3.994 minutes, Δt: 11.740 minutes, CFL: 5.00e-01\ni:    410, sim time: 5.167 days, wall time: 4.053 minutes, Δt: 12.751 minutes, CFL: 5.00e-01\ni:    420, sim time: 5.250 days, wall time: 4.111 minutes, Δt: 12.914 minutes, CFL: 5.00e-01\ni:    430, sim time: 5.333 days, wall time: 4.169 minutes, Δt: 13.469 minutes, CFL: 5.00e-01\ni:    440, sim time: 5.417 days, wall time: 4.227 minutes, Δt: 12.896 minutes, CFL: 5.00e-01\ni:    450, sim time: 5.500 days, wall time: 4.286 minutes, Δt: 12.890 minutes, CFL: 5.00e-01\ni:    460, sim time: 5.583 days, wall time: 4.343 minutes, Δt: 12.379 minutes, CFL: 5.00e-01\ni:    470, sim time: 5.667 days, wall time: 4.401 minutes, Δt: 12.474 minutes, CFL: 5.00e-01\ni:    480, sim time: 5.750 days, wall time: 4.459 minutes, Δt: 12.745 minutes, CFL: 5.00e-01\ni:    490, sim time: 5.833 days, wall time: 4.518 minutes, Δt: 12.585 minutes, CFL: 5.00e-01\ni:    500, sim time: 5.917 days, wall time: 4.576 minutes, Δt: 11.822 minutes, CFL: 5.00e-01\ni:    510, sim time: 5.987 days, wall time: 4.633 minutes, Δt: 10.865 minutes, CFL: 5.00e-01\ni:    520, sim time: 6.059 days, wall time: 4.692 minutes, Δt: 10.349 minutes, CFL: 5.00e-01\ni:    530, sim time: 6.126 days, wall time: 4.750 minutes, Δt: 10.143 minutes, CFL: 5.00e-01\ni:    540, sim time: 6.195 days, wall time: 4.808 minutes, Δt: 10.029 minutes, CFL: 5.00e-01\ni:    550, sim time: 6.257 days, wall time: 4.867 minutes, Δt: 9.987 minutes, CFL: 5.00e-01\ni:    560, sim time: 6.326 days, wall time: 4.925 minutes, Δt: 10.158 minutes, CFL: 5.00e-01\ni:    570, sim time: 6.389 days, wall time: 4.983 minutes, Δt: 9.906 minutes, CFL: 5.00e-01\ni:    580, sim time: 6.457 days, wall time: 5.041 minutes, Δt: 9.549 minutes, CFL: 5.00e-01\ni:    590, sim time: 6.519 days, wall time: 5.100 minutes, Δt: 8.801 minutes, CFL: 5.00e-01\ni:    600, sim time: 6.578 days, wall time: 5.158 minutes, Δt: 8.145 minutes, CFL: 5.00e-01\ni:    610, sim time: 6.633 days, wall time: 5.217 minutes, Δt: 7.873 minutes, CFL: 5.00e-01\ni:    620, sim time: 6.682 days, wall time: 5.274 minutes, Δt: 7.340 minutes, CFL: 5.00e-01\ni:    630, sim time: 6.733 days, wall time: 5.333 minutes, Δt: 7.211 minutes, CFL: 5.00e-01\ni:    640, sim time: 6.780 days, wall time: 5.391 minutes, Δt: 7.148 minutes, CFL: 5.00e-01\ni:    650, sim time: 6.830 days, wall time: 5.449 minutes, Δt: 7.444 minutes, CFL: 5.00e-01\ni:    660, sim time: 6.881 days, wall time: 5.508 minutes, Δt: 7.718 minutes, CFL: 5.00e-01\ni:    670, sim time: 6.933 days, wall time: 5.566 minutes, Δt: 7.965 minutes, CFL: 5.00e-01\ni:    680, sim time: 6.989 days, wall time: 5.624 minutes, Δt: 7.882 minutes, CFL: 5.00e-01\ni:    690, sim time: 7.038 days, wall time: 5.682 minutes, Δt: 7.815 minutes, CFL: 5.00e-01\ni:    700, sim time: 7.089 days, wall time: 5.741 minutes, Δt: 7.762 minutes, CFL: 5.00e-01\ni:    710, sim time: 7.142 days, wall time: 5.799 minutes, Δt: 7.678 minutes, CFL: 5.00e-01\ni:    720, sim time: 7.193 days, wall time: 5.857 minutes, Δt: 7.507 minutes, CFL: 5.00e-01\ni:    730, sim time: 7.244 days, wall time: 5.914 minutes, Δt: 7.298 minutes, CFL: 5.00e-01\ni:    740, sim time: 7.290 days, wall time: 5.973 minutes, Δt: 7.186 minutes, CFL: 5.00e-01\ni:    750, sim time: 7.338 days, wall time: 6.031 minutes, Δt: 6.930 minutes, CFL: 5.00e-01\ni:    760, sim time: 7.386 days, wall time: 6.090 minutes, Δt: 6.771 minutes, CFL: 5.00e-01\ni:    770, sim time: 7.431 days, wall time: 6.148 minutes, Δt: 6.687 minutes, CFL: 5.00e-01\ni:    780, sim time: 7.477 days, wall time: 6.205 minutes, Δt: 6.654 minutes, CFL: 5.00e-01\ni:    790, sim time: 7.518 days, wall time: 6.264 minutes, Δt: 6.674 minutes, CFL: 5.00e-01\ni:    800, sim time: 7.565 days, wall time: 6.322 minutes, Δt: 6.664 minutes, CFL: 5.00e-01\ni:    810, sim time: 7.607 days, wall time: 6.381 minutes, Δt: 6.714 minutes, CFL: 5.00e-01\ni:    820, sim time: 7.654 days, wall time: 6.439 minutes, Δt: 6.872 minutes, CFL: 5.00e-01\ni:    830, sim time: 7.701 days, wall time: 6.497 minutes, Δt: 7.193 minutes, CFL: 5.00e-01\ni:    840, sim time: 7.750 days, wall time: 6.555 minutes, Δt: 7.291 minutes, CFL: 5.00e-01\ni:    850, sim time: 7.800 days, wall time: 6.613 minutes, Δt: 7.166 minutes, CFL: 5.00e-01\ni:    860, sim time: 7.848 days, wall time: 6.672 minutes, Δt: 7.115 minutes, CFL: 5.00e-01\ni:    870, sim time: 7.897 days, wall time: 6.730 minutes, Δt: 7.082 minutes, CFL: 5.00e-01\ni:    880, sim time: 7.946 days, wall time: 6.789 minutes, Δt: 7.135 minutes, CFL: 5.00e-01\ni:    890, sim time: 7.996 days, wall time: 6.846 minutes, Δt: 7.238 minutes, CFL: 5.00e-01\ni:    900, sim time: 8.046 days, wall time: 6.904 minutes, Δt: 7.488 minutes, CFL: 5.00e-01\ni:    910, sim time: 8.094 days, wall time: 6.963 minutes, Δt: 7.741 minutes, CFL: 5.00e-01\ni:    920, sim time: 8.149 days, wall time: 7.021 minutes, Δt: 8.064 minutes, CFL: 5.00e-01\ni:    930, sim time: 8.199 days, wall time: 7.080 minutes, Δt: 7.827 minutes, CFL: 5.00e-01\ni:    940, sim time: 8.250 days, wall time: 7.138 minutes, Δt: 7.771 minutes, CFL: 5.00e-01\ni:    950, sim time: 8.304 days, wall time: 7.195 minutes, Δt: 7.856 minutes, CFL: 5.00e-01\ni:    960, sim time: 8.355 days, wall time: 7.254 minutes, Δt: 7.965 minutes, CFL: 5.00e-01\ni:    970, sim time: 8.411 days, wall time: 7.312 minutes, Δt: 8.036 minutes, CFL: 5.00e-01\ni:    980, sim time: 8.461 days, wall time: 7.371 minutes, Δt: 7.935 minutes, CFL: 5.00e-01\ni:    990, sim time: 8.511 days, wall time: 7.429 minutes, Δt: 7.915 minutes, CFL: 5.00e-01\ni:   1000, sim time: 8.566 days, wall time: 7.486 minutes, Δt: 7.950 minutes, CFL: 5.00e-01\ni:   1010, sim time: 8.617 days, wall time: 7.545 minutes, Δt: 8.071 minutes, CFL: 5.00e-01\ni:   1020, sim time: 8.672 days, wall time: 7.603 minutes, Δt: 8.358 minutes, CFL: 5.00e-01\ni:   1030, sim time: 8.731 days, wall time: 7.662 minutes, Δt: 8.711 minutes, CFL: 5.00e-01\ni:   1040, sim time: 8.787 days, wall time: 7.720 minutes, Δt: 8.967 minutes, CFL: 5.00e-01\ni:   1050, sim time: 8.846 days, wall time: 7.777 minutes, Δt: 8.855 minutes, CFL: 5.00e-01\ni:   1060, sim time: 8.907 days, wall time: 7.835 minutes, Δt: 8.695 minutes, CFL: 5.00e-01\ni:   1070, sim time: 8.964 days, wall time: 7.894 minutes, Δt: 8.520 minutes, CFL: 5.00e-01\ni:   1080, sim time: 9.018 days, wall time: 7.952 minutes, Δt: 8.436 minutes, CFL: 5.00e-01\ni:   1090, sim time: 9.076 days, wall time: 8.011 minutes, Δt: 8.380 minutes, CFL: 5.00e-01\ni:   1100, sim time: 9.130 days, wall time: 8.069 minutes, Δt: 8.236 minutes, CFL: 5.00e-01\ni:   1110, sim time: 9.184 days, wall time: 8.126 minutes, Δt: 8.129 minutes, CFL: 5.00e-01\ni:   1120, sim time: 9.240 days, wall time: 8.185 minutes, Δt: 8.155 minutes, CFL: 5.00e-01\ni:   1130, sim time: 9.296 days, wall time: 8.243 minutes, Δt: 8.308 minutes, CFL: 5.00e-01\ni:   1140, sim time: 9.350 days, wall time: 8.302 minutes, Δt: 8.216 minutes, CFL: 5.00e-01\ni:   1150, sim time: 9.407 days, wall time: 8.360 minutes, Δt: 7.975 minutes, CFL: 5.00e-01\ni:   1160, sim time: 9.461 days, wall time: 8.417 minutes, Δt: 7.882 minutes, CFL: 5.00e-01\ni:   1170, sim time: 9.511 days, wall time: 8.476 minutes, Δt: 7.986 minutes, CFL: 5.00e-01\ni:   1180, sim time: 9.567 days, wall time: 8.534 minutes, Δt: 7.994 minutes, CFL: 5.00e-01\ni:   1190, sim time: 9.616 days, wall time: 8.593 minutes, Δt: 7.923 minutes, CFL: 5.00e-01\ni:   1200, sim time: 9.667 days, wall time: 8.651 minutes, Δt: 7.941 minutes, CFL: 5.00e-01\ni:   1210, sim time: 9.722 days, wall time: 8.710 minutes, Δt: 8.100 minutes, CFL: 5.00e-01\ni:   1220, sim time: 9.778 days, wall time: 8.767 minutes, Δt: 8.217 minutes, CFL: 5.00e-01\ni:   1230, sim time: 9.833 days, wall time: 8.825 minutes, Δt: 8.170 minutes, CFL: 5.00e-01\ni:   1240, sim time: 9.890 days, wall time: 8.883 minutes, Δt: 8.063 minutes, CFL: 5.00e-01\ni:   1250, sim time: 9.944 days, wall time: 8.941 minutes, Δt: 8.025 minutes, CFL: 5.00e-01\n[ Info: Simulation is stopping after running for 8.999 minutes.\n[ Info: Simulation time 10 days equals or exceeds stop time 10 days.\ni:   1260, sim time:    10 days, wall time: 8.999 minutes, Δt: 8.083 minutes, CFL: 5.00e-01\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Now load the saved output","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"  ζ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"ζ\")\n  P = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NO₃\")\nNH₄ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NH₄\")\nDIC = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"DIC\")\n\ntimes = ζ.times\n\nxζ, yζ, zζ = nodes(ζ)\nxc, yc, zc = nodes(P)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"([15.625, 46.875, 78.125, 109.375, 140.625, 171.875, 203.125, 234.375, 265.625, 296.875, 328.125, 359.375, 390.625, 421.875, 453.125, 484.375, 515.625, 546.875, 578.125, 609.375, 640.625, 671.875, 703.125, 734.375, 765.625, 796.875, 828.125, 859.375, 890.625, 921.875, 953.125, 984.375], [15.625, 46.875, 78.125, 109.375, 140.625, 171.875, 203.125, 234.375, 265.625, 296.875, 328.125, 359.375, 390.625, 421.875, 453.125, 484.375, 515.625, 546.875, 578.125, 609.375, 640.625, 671.875, 703.125, 734.375, 765.625, 796.875, 828.125, 859.375, 890.625, 921.875, 953.125, 984.375], [-93.75, -81.25, -68.75, -56.25, -43.75, -31.25, -18.75, -6.25])","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and plot","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using CairoMakie\n\nn = Observable(1)\n\n  ζₙ = @lift interior(  ζ[$n], :, :, grid.Nz)\n  Nₙ = @lift interior(NO₃[$n], :, :, grid.Nz) .+ interior(NH₄[$n], :, :, grid.Nz)\n  Pₙ = @lift interior(  P[$n], :, :, grid.Nz)\nDICₙ = @lift interior(DIC[$n], :, :, grid.Nz)\n\nfig = Figure(resolution = (1600, 1600), fontsize = 20)\n\nlims = [(minimum(T), maximum(T)) for T in (  ζ[:, :, grid.Nz, :],\n                                           NO₃[:, :, grid.Nz, :] .+ NH₄[:, :, grid.Nz, :],\n                                             P[:, :, grid.Nz, :],\n                                           DIC[:, :, grid.Nz, :])]\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"y (m)\", aspect = DataAspect())\n\nax1 = Axis(fig[1, 1]; title = \"Vertical vorticity (1 / s)\", axis_kwargs...)\nhm1 = heatmap!(ax1, xζ, yζ, ζₙ, levels = 33, colormap = :balance, colorrange = lims[1])\nColorbar(fig[1, 2], hm1)\n\nax2 = Axis(fig[1, 3]; title = \"Nutrient (NO₃ + NH₄) concentration (mmol N / m³)\", axis_kwargs...)\nhm2 = heatmap!(ax2, xc, yc, Nₙ, levels = 33, colormap = Reverse(:bamako), colorrange = lims[2])\nColorbar(fig[1, 4], hm2)\n\nax3 = Axis(fig[2, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhm3 = heatmap!(ax3, xc, yc, Pₙ, levels = 33, colormap = Reverse(:batlow), colorrange = lims[3])\nColorbar(fig[2, 2], hm3)\n\nax4 = Axis(fig[2, 3]; title = \"Dissolved inorganic carbon (mmol C / m³)\", axis_kwargs...)\nhm4 = heatmap!(ax4, xc, yc, DICₙ, levels = 33, colormap = Reverse(:devon), colorrange = lims[4])\nColorbar(fig[2, 4], hm4)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title, fontsize = 30)\n\nrecord(fig, \"eady.mp4\", 1:length(times), framerate = 12) do i\n    @info string(\"Plotting frame \", i, \" of \", length(times))\n    n[] = i\nend","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"[ Info: Plotting frame 1 of 121\n[ Info: Plotting frame 2 of 121\n[ Info: Plotting frame 3 of 121\n[ Info: Plotting frame 4 of 121\n[ Info: Plotting frame 5 of 121\n[ Info: Plotting frame 6 of 121\n[ Info: Plotting frame 7 of 121\n[ Info: Plotting frame 8 of 121\n[ Info: Plotting frame 9 of 121\n[ Info: Plotting frame 10 of 121\n[ Info: Plotting frame 11 of 121\n[ Info: Plotting frame 12 of 121\n[ Info: Plotting frame 13 of 121\n[ Info: Plotting frame 14 of 121\n[ Info: Plotting frame 15 of 121\n[ Info: Plotting frame 16 of 121\n[ Info: Plotting frame 17 of 121\n[ Info: Plotting frame 18 of 121\n[ Info: Plotting frame 19 of 121\n[ Info: Plotting frame 20 of 121\n[ Info: Plotting frame 21 of 121\n[ Info: Plotting frame 22 of 121\n[ Info: Plotting frame 23 of 121\n[ Info: Plotting frame 24 of 121\n[ Info: Plotting frame 25 of 121\n[ Info: Plotting frame 26 of 121\n[ Info: Plotting frame 27 of 121\n[ Info: Plotting frame 28 of 121\n[ Info: Plotting frame 29 of 121\n[ Info: Plotting frame 30 of 121\n[ Info: Plotting frame 31 of 121\n[ Info: Plotting frame 32 of 121\n[ Info: Plotting frame 33 of 121\n[ Info: Plotting frame 34 of 121\n[ Info: Plotting frame 35 of 121\n[ Info: Plotting frame 36 of 121\n[ Info: Plotting frame 37 of 121\n[ Info: Plotting frame 38 of 121\n[ Info: Plotting frame 39 of 121\n[ Info: Plotting frame 40 of 121\n[ Info: Plotting frame 41 of 121\n[ Info: Plotting frame 42 of 121\n[ Info: Plotting frame 43 of 121\n[ Info: Plotting frame 44 of 121\n[ Info: Plotting frame 45 of 121\n[ Info: Plotting frame 46 of 121\n[ Info: Plotting frame 47 of 121\n[ Info: Plotting frame 48 of 121\n[ Info: Plotting frame 49 of 121\n[ Info: Plotting frame 50 of 121\n[ Info: Plotting frame 51 of 121\n[ Info: Plotting frame 52 of 121\n[ Info: Plotting frame 53 of 121\n[ Info: Plotting frame 54 of 121\n[ Info: Plotting frame 55 of 121\n[ Info: Plotting frame 56 of 121\n[ Info: Plotting frame 57 of 121\n[ Info: Plotting frame 58 of 121\n[ Info: Plotting frame 59 of 121\n[ Info: Plotting frame 60 of 121\n[ Info: Plotting frame 61 of 121\n[ Info: Plotting frame 62 of 121\n[ Info: Plotting frame 63 of 121\n[ Info: Plotting frame 64 of 121\n[ Info: Plotting frame 65 of 121\n[ Info: Plotting frame 66 of 121\n[ Info: Plotting frame 67 of 121\n[ Info: Plotting frame 68 of 121\n[ Info: Plotting frame 69 of 121\n[ Info: Plotting frame 70 of 121\n[ Info: Plotting frame 71 of 121\n[ Info: Plotting frame 72 of 121\n[ Info: Plotting frame 73 of 121\n[ Info: Plotting frame 74 of 121\n[ Info: Plotting frame 75 of 121\n[ Info: Plotting frame 76 of 121\n[ Info: Plotting frame 77 of 121\n[ Info: Plotting frame 78 of 121\n[ Info: Plotting frame 79 of 121\n[ Info: Plotting frame 80 of 121\n[ Info: Plotting frame 81 of 121\n[ Info: Plotting frame 82 of 121\n[ Info: Plotting frame 83 of 121\n[ Info: Plotting frame 84 of 121\n[ Info: Plotting frame 85 of 121\n[ Info: Plotting frame 86 of 121\n[ Info: Plotting frame 87 of 121\n[ Info: Plotting frame 88 of 121\n[ Info: Plotting frame 89 of 121\n[ Info: Plotting frame 90 of 121\n[ Info: Plotting frame 91 of 121\n[ Info: Plotting frame 92 of 121\n[ Info: Plotting frame 93 of 121\n[ Info: Plotting frame 94 of 121\n[ Info: Plotting frame 95 of 121\n[ Info: Plotting frame 96 of 121\n[ Info: Plotting frame 97 of 121\n[ Info: Plotting frame 98 of 121\n[ Info: Plotting frame 99 of 121\n[ Info: Plotting frame 100 of 121\n[ Info: Plotting frame 101 of 121\n[ Info: Plotting frame 102 of 121\n[ Info: Plotting frame 103 of 121\n[ Info: Plotting frame 104 of 121\n[ Info: Plotting frame 105 of 121\n[ Info: Plotting frame 106 of 121\n[ Info: Plotting frame 107 of 121\n[ Info: Plotting frame 108 of 121\n[ Info: Plotting frame 109 of 121\n[ Info: Plotting frame 110 of 121\n[ Info: Plotting frame 111 of 121\n[ Info: Plotting frame 112 of 121\n[ Info: Plotting frame 113 of 121\n[ Info: Plotting frame 114 of 121\n[ Info: Plotting frame 115 of 121\n[ Info: Plotting frame 116 of 121\n[ Info: Plotting frame 117 of 121\n[ Info: Plotting frame 118 of 121\n[ Info: Plotting frame 119 of 121\n[ Info: Plotting frame 120 of 121\n[ Info: Plotting frame 121 of 121\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(Image: )","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/sediment/#sediment","page":"Overview","title":"Sediment","text":"","category":"section"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"We currently have one single layer sediment model implemented. The model, proposed by Karline Soetaert, Jack J Middelburg, Peter M J Herman, Kerst Buis (2000), is a \"G class\" model that evolves carbon and nitrogen in three classes (fast, slow and refectory). The model is also only compatible with the LOBSTER biogeochemical model with carbonate chemistry, oxygen, and variable redfield options on. You also must ensure that the open_bottom option is on for particles to leave the bottom of the domain to the sediment model.","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"It is straightforward to set up:","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"sediment_model = SimpleMultiG(grid)","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"You may optionally specify the model parameters. This can then be passed in the setup of a BGC model:","category":"page"},{"location":"model_components/sediment/","page":"Overview","title":"Overview","text":"biogeochemistry = LOBSTER(; grid, \n                            carbonates = true, oxygen = true, variable_redfield = true, \n                            open_bottom = true, \n                            sediment_model)","category":"page"}]
}
