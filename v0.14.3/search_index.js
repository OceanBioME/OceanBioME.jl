var documenterSearchIndex = {"docs":
[{"location":"appendix/library/#library_api","page":"Library","title":"Library","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Documenting the user interface.","category":"page"},{"location":"appendix/library/#OceanBioME.jl","page":"Library","title":"OceanBioME.jl","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.OceanBioME","page":"Library","title":"OceanBioME.OceanBioME","text":"A fast and flexible modelling environment for modelling the coupled interactions between ocean biogeochemistry, carbonate chemistry, and physics.\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.CBMDayLength","page":"Library","title":"OceanBioME.CBMDayLength","text":"(day_length::CBMDayLength)(t, φ)\n\nReturns the length of day in seconds at the latitude φ, t seconds after the start of the year.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.ScaleNegativeTracers-Tuple{Any}","page":"Library","title":"OceanBioME.ScaleNegativeTracers","text":"ScaleNegativeTracers(; tracers, scalefactors = ones(length(tracers)), warn = false, invalid_fill_value = NaN)\n\nConstructs a modifier to scale tracers so that none are negative. Use like:\n\nmodifier = ScaleNegativeTracers((:P, :Z, :N))\nbiogeochemistry = Biogeochemistry(...; modifier)\n\nThis method is better, though still imperfect, method to prevent numerical errors that lead to negative tracer values compared to ZeroNegativeTracers. Please see discussion in github.\n\nFuture plans include implement a positivity-preserving timestepping scheme as the ideal alternative.\n\n~~If warn is true then scaling will raise a warning.~~\n\ninvalid_fill_value specifies the value to set the total cell content to if the total is less than 0 (meaning that total tracer conservation can not be enforced). If the value is set to anything other than NaN this scheme no longer conserves mass. While this may be useful to prevent spurious numerics leading to crashing care should be taken that the mass doesn't deviate too much.\n\nThis scheme is similar to that used by NEMO-PISCES, although they scale the tendency rather than the value, while other Earth system models simply set negative tracers to zero, for example NCAR's MARBL and NEMO-TOPAZ2, which does not conserve mass. More complicated schemes exist, for example ROMS-BECS uses an implicite-itterative approach where each component is updated in sequence to garantee mass conservation, possibly at the expense of numerical precision.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.ScaleNegativeTracers-Tuple{Oceananigans.Biogeochemistry.AbstractBiogeochemistry, Any}","page":"Library","title":"OceanBioME.ScaleNegativeTracers","text":"ScaleNegativeTracers(bgc::AbstractBiogeochemistry; warn = false)\n\nConstruct a modifier to scale the conserved tracers in bgc biogeochemistry.\n\nIf warn is true then scaling will raise a warning.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.ZeroNegativeTracers","page":"Library","title":"OceanBioME.ZeroNegativeTracers","text":"ZeroNegativeTracers(; exclude = ())\n\nConstruct a modifier that zeroes any negative tracers excluding those listed in exclude.\n\ndanger: Tracer conservation\nThis method is not recommended as a way to preserve positivity of tracers since it does not conserve the total tracer.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Biogeochemistry-Tuple{Any}","page":"Library","title":"OceanBioME.Biogeochemistry","text":"Biogeochemistry(underlying_biogeochemistry;\n                light_attenuation = nothing,\n                sediment = nothing,\n                particles = nothing,\n                modifiers = nothing)\n\nConstruct a biogeochemical model based on underlying_biogeochemistry which may have a light_attenuation model, sediment, particles, and modifiers.\n\nKeyword Arguments\n\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for AbstractSediment\nparticles: slot for BiogeochemicalParticles\nmodifiers: slot for components which modify the biogeochemistry when the tendencies have been calculated or when the state is updated\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.conserved_tracers-Tuple{Union{OceanBioME.ContinuousBiogeochemistry, OceanBioME.DiscreteBiogeochemistry}, Vararg{Any}}","page":"Library","title":"OceanBioME.conserved_tracers","text":"conserved_tracers(model::UnderlyingBiogeochemicalModel, args...; kwargs...)\n\nReturns the names of tracers which together are conserved in model\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.redfield-NTuple{6, Any}","page":"Library","title":"OceanBioME.redfield","text":"redfield(i, j, k, val_tracer_name, bgc, tracers)\n\nReturns the redfield ratio of tracer_name from bgc at i, j, k.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.redfield-Tuple{Any, Any}","page":"Library","title":"OceanBioME.redfield","text":"redfield(val_tracer_name, bgc)\nredfield(val_tracer_name, bgc, tracers)\n\nReturns the redfield ratio of tracer_name from bgc when it is constant across the domain.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Biogeochemical-Models","page":"Library","title":"Biogeochemical Models","text":"","category":"section"},{"location":"appendix/library/#Nutrient-Phytoplankton-Zooplankton-Detritus-(NPZD)","page":"Library","title":"Nutrient Phytoplankton Zooplankton Detritus (NPZD)","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.NPZDModel","page":"Library","title":"OceanBioME.Models.NPZDModel","text":"Nutrient-Phytoplankton-Zooplankton-Detritus model of Kuhn et al. (2015).\n\nTracers\n\nNutrients: N (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nDetritus: D (mmol N/m³)\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.NPZDModel.NutrientPhytoplanktonZooplanktonDetritus-Union{Tuple{}, Tuple{M}, Tuple{P}, Tuple{S}, Tuple{LA}, Tuple{FT}} where {FT, LA, S, P, M}","page":"Library","title":"OceanBioME.Models.NPZDModel.NutrientPhytoplanktonZooplanktonDetritus","text":"NutrientPhytoplanktonZooplanktonDetritus(; grid::AbstractGrid{FT},\n                                           initial_photosynthetic_slope::FT = 0.1953 / day, # 1/(W/m²)/s\n                                           base_maximum_growth::FT = 0.6989 / day, # 1/s\n                                           nutrient_half_saturation::FT = 2.3868, # mmol N/m³\n                                           base_respiration_rate::FT = 0.066 / day, # 1/s/(mmol N / m³)\n                                           phyto_base_mortality_rate::FT = 0.0101 / day, # 1/s/(mmol N / m³)\n                                           maximum_grazing_rate::FT = 2.1522 / day, # 1/s\n                                           grazing_half_saturation::FT = 0.5573, # mmol N/m³\n                                           assimulation_efficiency::FT = 0.9116, \n                                           base_excretion_rate::FT = 0.0102 / day, # 1/s/(mmol N / m³)\n                                           zoo_base_mortality_rate::FT = 0.3395 / day, # 1/s/(mmol N / m³)²\n                                           remineralization_rate::FT = 0.1213 / day, # 1/s\n\n                                           surface_photosynthetically_active_radiation = default_surface_PAR,\n                                           light_attenuation_model::LA =\n                                               TwoBandPhotosyntheticallyActiveRadiation(; grid,\n                                                                                          surface_PAR = surface_photosynthetically_active_radiation),\n                                           sediment_model::S = nothing,\n            \n                                           sinking_speeds = (P = 0.2551/day, D = 2.7489/day),\n                                           open_bottom::Bool = true,\n\n                                           scale_negatives = false,\n                                                                                  \n                                           particles::P = nothing,\n                                           modifiers::M = nothing)\n\nConstruct a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) biogeochemical model.\n\nKeyword Arguments\n\ngrid: (required) the geometry to build the model on, required to calculate sinking\ninitial_photosynthetic_slope, ..., remineralization_rate: NPZD parameter values\nsurface_photosynthetically_active_radiation: function (or array in the future) for the photosynthetically available radiation at the surface, should be shape f(x, y, t)\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for BiogeochemicalSediment\nsinking_speed: named tuple of constant sinking, of fields (i.e. ZFaceField(...)) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nscale_negatives: scale negative tracers?\nparticles: slot for BiogeochemicalParticles\nmodifiers: slot for components which modify the biogeochemistry when the tendencies have been calculated or when the state is updated\n\nExample\n\njulia> using OceanBioME\n\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size=(20, 30), extent=(200, 200), topology=(Bounded, Flat, Bounded));\n\njulia> model = NutrientPhytoplanktonZooplanktonDetritus(; grid)\nNutrientPhytoplanktonZooplanktonDetritus{Float64} model, with (:P, :D) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#The-Lodyc-DAMTP-Ocean-Biogeochemical-Simulation-Tools-for-Ecosystem-and-Resources-(LOBSTER)","page":"Library","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER)","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.LOBSTERModel","page":"Library","title":"OceanBioME.Models.LOBSTERModel","text":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model.\n\nTracers\n\nNitrates: NO₃ (mmol N/m³)\nAmmonia: NH₄ (mmol N/m³)\nPhytoplankton: P (mmol N/m³)\nZooplankton: Z (mmol N/m³)\nSmall (slow sinking) particulate organic matter: sPOM (mmol N/m³)\nLarge (fast sinking) particulate organic matter: bPOM (mmol N/m³)\nDissolved organic matter: DOM (mmol N/m³)\n\nOptional tracers\n\nCarbonate chemistry\n\nDissolved inorganic carbon: DIC (mmol C/m³)\nAlkalinity: Alk (meq/m³)\n\nOxygen chemistry\n\nOxygen: O₂ (mmol O₂/m³)\n\nVariable redfield\n\nSmall (slow sinking) particulate organic matter carbon content: sPOC (mmol C/m³)\nLarge (fast sinking) particulate organic matter carbon content: bPOC (mmol C/m³)\nDissolved organic matter carbon content: DOC (mmol C/m³)\nWhen this option is enabled then the usual sPOM and bPOM change to sPON and bPON as they explicitly represent the nitrogen contained in the particulate matter\n\nRequired submodels\n\nPhotosynthetically available radiation: PAR (W/m²)\n\nFor optional tracers:\n\nTemperature: T (ᵒC)\nSalinity: S (‰)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.LOBSTERModel.LOBSTER-Union{Tuple{}, Tuple{M}, Tuple{P}, Tuple{S}, Tuple{LA}, Tuple{FT}} where {FT, LA, S, P, M}","page":"Library","title":"OceanBioME.Models.LOBSTERModel.LOBSTER","text":"LOBSTER(; grid::AbstractGrid{FT},\n          phytoplankton_preference::FT = 0.5,\n          maximum_grazing_rate::FT = 9.26e-6, # 1/s\n          grazing_half_saturation::FT = 1.0, # mmol N/m³\n          light_half_saturation::FT = 33.0, # W/m² (?)\n          nitrate_ammonia_inhibition::FT = 3.0,\n          nitrate_half_saturation::FT = 0.7, # mmol N/m³\n          ammonia_half_saturation::FT = 0.001, # mmol N/m³\n          maximum_phytoplankton_growthrate::FT = 1.21e-5, # 1/s\n          zooplankton_assimilation_fraction::FT = 0.7,\n          zooplankton_mortality::FT = 2.31e-6, # 1/s/mmol N/m³\n          zooplankton_excretion_rate::FT = 5.8e-7, # 1/s\n          phytoplankton_mortality::FT = 5.8e-7, # 1/s\n          small_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          large_detritus_remineralisation_rate::FT = 5.88e-7, # 1/s\n          phytoplankton_exudation_fraction::FT = 0.05,\n          nitrification_rate::FT = 5.8e-7, # 1/s\n          ammonia_fraction_of_exudate::FT = 0.75, \n          ammonia_fraction_of_excriment::FT = 0.5,\n          ammonia_fraction_of_detritus::FT = 0.0,\n          phytoplankton_redfield::FT = 6.56, # mol C/mol N\n          organic_redfield::FT = 6.56, # mol C/mol N\n          phytoplankton_chlorophyll_ratio::FT = 1.31, # g Chl/mol N\n          organic_carbon_calcate_ratio::FT = 0.1, # mol CaCO₃/mol C\n          respiration_oxygen_nitrogen_ratio::FT = 10.75, # mol O/molN\n          nitrification_oxygen_nitrogen_ratio::FT = 2.0, # mol O/molN\n          slow_sinking_mortality_fraction::FT = 0.5, \n          fast_sinking_mortality_fraction::FT = 0.5,\n          dissolved_organic_breakdown_rate::FT = 3.86e-7, # 1/s\n          zooplankton_calcite_dissolution::FT = 0.3,\n\n          surface_photosynthetically_active_radiation = default_surface_PAR,\n\n          light_attenuation_model::LA =\n              TwoBandPhotosyntheticallyActiveRadiation(; grid, \n                                                         surface_PAR = surface_photosynthetically_active_radiation),\n          sediment_model::S = nothing,\n\n          carbonates::Bool = false,\n          oxygen::Bool = false,\n          variable_redfield::Bool = false,\n\n          sinking_speeds = (sPOM = 3.47e-5, bPOM = 200/day),\n          open_bottom::Bool = true,\n\n          scale_negatives = false,\n\n          particles::P = nothing,\n          modifiers::M = nothing)\n\nConstruct an instance of the LOBSTER biogeochemical model.\n\nKeyword Arguments\n\ngrid: (required) the geometry to build the model on, required to calculate sinking\nphytoplankton_preference, ..., dissolved_organic_breakdown_rate: LOBSTER parameter values\nsurface_photosynthetically_active_radiation: funciton (or array in the future) for the photosynthetically available radiation at the surface, should be shape f(x, y, t)\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsediment_model: slot for BiogeochemicalSediment\ncarbonates, oxygen, and variable_redfield: include models for carbonate chemistry and/or oxygen chemistry and/or variable redfield ratio dissolved and particulate organic matter\nsinking_speed: named tuple of constant sinking, of fields (i.e. ZFaceField(...)) for any tracers which sink (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nscale_negatives: scale negative tracers?\nparticles: slot for BiogeochemicalParticles\nmodifiers: slot for components which modify the biogeochemistry when the tendencies have been calculated or when the state is updated\n\nExample\n\njulia> using OceanBioME\n\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> model = LOBSTER(; grid)\nLOBSTER{Float64} with carbonates ❌, oxygen ❌, variable Redfield ratio ❌ and (:sPOM, :bPOM) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Pelagic-Interactions-Scheme-for-Carbon-and-Ecosystem-Studies-(PISCES)","page":"Library","title":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies (PISCES)","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel","page":"Library","title":"OceanBioME.Models.PISCESModel","text":"Pelagic Interactions Scheme for Carbon and Ecosystem Studies (PISCES) model.\n\nThis is not currently an official version supported by the PISCES community and is not yet verified to be capable of producing results mathcing that of the  operational PISCES configuration. This is a work in progress, please open an  issue or discusison if you'd like to know more.\n\nNotes to developers\n\nPart of the vision for this implementation of PISCES is to harness the features of Julia that would allow it to be fully modular. An obvious step to improve the ease of this would be to do some minor refactoring to group the phytoplankton  classes, and zooplankton classes together, and for the other groups to generically  call the whole lot. This may cause some issues with argument passing, and although it may not be the best way todo it my first thought is to pass them round as named tuples built from something like,\n\nphytoplankton_tracers = phytoplankton_arguments(bgc.phytoplankton, args...)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.DepthDependantSinkingSpeed","page":"Library","title":"OceanBioME.Models.PISCESModel.DepthDependantSinkingSpeed","text":"DepthDependantSinkingSpeed(; minimum_speed = 30/day,\n                             maximum_speed = 200/day,\n                             maximum_depth = 500)\n\nReturns sinking speed for particles which sink at minimum_speed in the surface ocean (the deepest of the mixed and euphotic layers), and accelerate to maximum_speed below that depth and maximum_depth.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.ModelLatitude","page":"Library","title":"OceanBioME.Models.PISCESModel.ModelLatitude","text":"ModelLatitude\n\nReturns the latitude specified by the model grid (y).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.PISCES-Tuple{}","page":"Library","title":"OceanBioME.Models.PISCESModel.PISCES","text":"PISCES(; grid::AbstractGrid{FT},\n         phytoplankton = MixedMondoNanoAndDiatoms(),\n         zooplankton = MicroAndMesoZooplankton(),\n         dissolved_organic_matter = DissolvedOrganicCarbon(),\n         particulate_organic_matter = TwoCompartementCarbonIronParticles(),\n         \n         nitrogen = NitrateAmmonia(),\n         iron = SimpleIron(),\n         silicate = Silicate(),\n         oxygen = Oxygen(),\n         phosphate = Phosphate(),\n         \n         inorganic_carbon = InorganicCarbon(),\n\n         # from Aumount 2005 rather than 2015 since it doesn't work the other way around\n         first_anoxia_thresehold = 6.0,\n         second_anoxia_thresehold = 1.0,\n\n         nitrogen_redfield_ratio = 16/122,\n         phosphate_redfield_ratio = 1/122,\n         \n         mixed_layer_shear = 1.0,\n         background_shear = 0.01, \n         \n         latitude = PrescribedLatitude(45),\n         day_length = day_length_function,\n         \n         mixed_layer_depth = Field{Center, Center, Nothing}(grid),\n         euphotic_depth = Field{Center, Center, Nothing}(grid),\n\n         silicate_climatology = ConstantField(7.5),\n\n         mean_mixed_layer_vertical_diffusivity = Field{Center, Center, Nothing}(grid),\n         mean_mixed_layer_light = Field{Center, Center, Nothing}(grid),\n\n         carbon_chemistry = CarbonChemistry(),\n         calcite_saturation = CenterField(grid),\n\n         surface_photosynthetically_active_radiation = default_surface_PAR,\n\n         light_attenuation =\n           MultiBandPhotosyntheticallyActiveRadiation(; grid, \n                                                        surface_PAR = surface_photosynthetically_active_radiation),\n\n         sinking_speeds = (POC = 2/day, \n                           # might be more efficient to just precompute this\n                           GOC = Field(KernelFunctionOperation{Center, Center, Face}(DepthDependantSinkingSpeed(), \n                                                                                     grid, \n                                                                                     mixed_layer_depth, \n                                                                                     euphotic_depth))),\n         open_bottom = true,\n\n         scale_negatives = false,\n         invalid_fill_value = NaN,\n         \n         sediment = nothing,\n         particles = nothing,\n         modifiers = nothing)\n\nConstructs an instance of the PISCES biogeochemical model.\n\nKeyword Arguments\n\ngrid: (required) the geometry to build the model on\nphytoplankton: phytoplankton evolution parameterisation, defaults to nanophyto and diatom size classes with MixedMondo growth\nzooplankton: zooplankton evolution parameterisation, defaults to two class Z and M\ndissolved_organic_matter: parameterisaion for the evolution of dissolved organic matter (DOC)\nparticulate_organic_matter: parameterisation for the evolution of particulate organic matter (POC, GOC, SFe, BFe, PSi, CaCO₃)\nnitrogen: parameterisation for the nitrogen compartements (NH₄ and NO₃)\niron: parameterisation for iron (Fe), currently the \"complex chemistry\" of Aumount 2015 is not implemented\nsilicate: parameterisaion for silicate (Si)\noxygen: parameterisaion for oxygen (O₂)\nphosphate: parameterisaion for phosphate (PO₄)\ninorganic_carbon: parameterisation for the evolution of the inorganic carbon system (DIC and Alkalinity)\nfirst_anoxia_thresehold and second_anoxia_thresehold: thresholds in anoxia parameterisation\nnitrogen_redfield_ratio and phosphate_redfield_ratio: the assumed element ratios N/C and P/C \nmixed_layer_shear and background_shear: the mixed layer and background shear rates, TODO: move this to a computed field\nlatitude: model latitude, should be PrescribedLatitude for RectilinearGrids and ModelLatitude for grids providing their own latitude\nday_length: parameterisation for day length based on time of year and latitude, you may wish to change this to (φ, t) -> 1day if you  want to ignore the effect of day length, or something else if you're modelling a differen planet\nmixed_layer_depth: an AbstractField containing the mixed layer depth (to be computed during update state)\neuphotic: an AbstractField containing the euphotic depth, the depth where light reduces to 1/1000 of   the surface value (computed during update state)\nsilicate_climatology: an AbstractField containing the silicate climatology which effects the diatoms silicate  half saturation constant\nmean_mixed_layer_vertical_diffusivity: an AbstractField containing the mean mixed layer vertical diffusivity   (to be computed during update state)\nmean_mixed_layer_light: an AbstractField containing the mean mixed layer light (computed during update state)\ncarbon_chemistry: the CarbonChemistry model used to compute the calicte saturation\ncalcite_saturation: an AbstractField containing the calcite saturation  (computed during update state)\nsurface_photosynthetically_active_radiation: funciton for the photosynthetically available radiation at the surface\nlight_attenuation_model: light attenuation model which integrated the attenuation of available light\nsinking_speed: named tuple of constant sinking speeds, or fields (i.e. ZFaceField(...)) for any tracers which sink  (convention is that a sinking speed is positive, but a field will need to follow the usual down being negative)\nopen_bottom: should the sinking velocity be smoothly brought to zero at the bottom to prevent the tracers leaving the domain\nscale_negatives: scale negative tracers?\nparticles: slot for BiogeochemicalParticles\nmodifiers: slot for components which modify the biogeochemistry when the tendencies have been calculated or when the state is updated\n\nAll parameterisations default to the operaitonal version of PISCES as close as possible.\n\nNotes\n\nCurrently only MixedMondoPhytoplankton are implemented, and some work should be done to generalise the classes to a single phytoplankton if more classes are required (see  OceanBioME.Models.PISCESModel docstring). Similarly, if a more generic particulate_organic_matter was desired a way to specify arbitary tracers for arguments would be required.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.PrescribedLatitude","page":"Library","title":"OceanBioME.Models.PISCESModel.PrescribedLatitude","text":"PrescribedLatitude\n\nReturns the prescribed latitude rather than the model grid y position.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.DissolvedOrganicMatter.DissolvedOrganicCarbon","page":"Library","title":"OceanBioME.Models.PISCESModel.DissolvedOrganicMatter.DissolvedOrganicCarbon","text":"DissolvedOrganicCarbon\n\nParameterisation of dissolved organic matter which depends on a bacterial  concentration.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.ParticulateOrganicMatter.TwoCompartementCarbonIronParticles","page":"Library","title":"OceanBioME.Models.PISCESModel.ParticulateOrganicMatter.TwoCompartementCarbonIronParticles","text":"TwoCompartementCarbonIronParticles\n\nA quota parameterisation for particulate organic matter with two size classes, each with carbon and iron compartements, and a silicate compartement for the large size class.\n\nConfusingly we decided to name these compartmenets POC and GOC for the small and large carbon classes, SFe and BFe for the small and  ̶l̶a̶r̶g̶e̶ big iron  compartements, and PSi for the  ̶l̶a̶r̶g̶e̶ particulate silicon (not the  phytoplankton silicon).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Iron.SimpleIron","page":"Library","title":"OceanBioME.Models.PISCESModel.Iron.SimpleIron","text":"SimpleIron(; excess_scavenging_enhancement = 1000)\n\nParameterisation for iron evolution, not the \"complex chemistry\" model of Aumount et al, 2015. Iron is scavenged (i.e. perminemtly removed from the model) when the free iron concentration exeeds the ligand concentration at a rate modified by excess_scavenging_enhancement.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.InorganicCarbons.InorganicCarbon","page":"Library","title":"OceanBioME.Models.PISCESModel.InorganicCarbons.InorganicCarbon","text":"InorganicCarbon\n\nDefault parameterisation for DICandAlk`alinity evolution. \n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Zooplankton.QualityDependantZooplankton","page":"Library","title":"OceanBioME.Models.PISCESModel.Zooplankton.QualityDependantZooplankton","text":"QualityDependantZooplankton\n\nThe PISCES zooplankton growth model where each class has preferences for grazing on nanophytoplankton (P), diatoms (D), microzooplankton (Z), and particulate organic matter (POC), and can flux feed on sinking  particulates (POC and GOC).\n\nThis model assumes a fixed ratio for all other elements (i.e. N, P, Fe).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Phytoplankton.GrowthRespirationLimitedProduction","page":"Library","title":"OceanBioME.Models.PISCESModel.Phytoplankton.GrowthRespirationLimitedProduction","text":"NutrientLimitedProduction\n\nBaseProduction with light limitation moderated by nutrient availability. This is the \"new production\" PISCES phytoplankton growth rate model. Growth rate is of the form:\n\nμ = μ₁f₁(τ)f₂(zₘₓₗ)(1-exp(-α θᶜʰˡ PAR  τ (bᵣ + μᵣ))) L\n\nKeyword Arguments\n\nbase_growth_rate: the base growth rate, μ₀, in (1/s)\ntemperatrue_sensetivity: temperature sensetivity parameter, b, giving μ₁ = μ₀ bᵀ where T is temperature\ndark_tollerance: the time that the phytoplankton survives in darkness below the euphotic layer, τᵈ (s)\ninitial_slope_of_PI_curve: the relationship between photosynthesis and irradiance, α₀ (1/W/m²)\nlow_light_adaptation: factor increasing the sensetivity of photosynthesis to irradiance, β,  giving α = α₀(1 + exp(-PAR)), typically set to zero\nbasal_respiration_rate: reference respiration rate, bᵣ (1/s)\nreference_growth_rate: reference growth rate, μᵣ (1/s)\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Phytoplankton.MixedMondo","page":"Library","title":"OceanBioME.Models.PISCESModel.Phytoplankton.MixedMondo","text":"MixedMondo\n\nHolds the parameters for the PISCES mixed mondo phytoplankton  parameterisation where nutrient limitation is modelled using the mondo approach for nitrate (NO₃), ammonia (NH₄), phosphate (PO₄), and silicate (Si), but the quota approach is used for iron (Fe)  and light (PAR).\n\nTherefore each class has a carbon compartement (generically I), chlorophyll (IChl), and iron (IFe), and may also have silicate (ISi) if the nutrient_limitation specifies that the growth is silicate limited, despite the fact that the silicate still limits  the growth in a mondo fashion.\n\nThe growth_rate may be different parameterisations, currently  either NutrientLimitedProduction or  GrowthRespirationLimitedProduction, which represent the typical and newprod versions of PISCES.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Phytoplankton.NitrogenIronPhosphateSilicateLimitation","page":"Library","title":"OceanBioME.Models.PISCESModel.Phytoplankton.NitrogenIronPhosphateSilicateLimitation","text":"NitrogenIronPhosphateSilicateLimitation\n\nHolds the parameters for growth limitation by nitrogen (NO₃ and NH₄), iron (Fe), phosphate PO₄, and (optionally) silicate (Si) availability.\n\nSilicate limitation may be turned off (e.g. for nanophytoplankton) by setting silicate_limited=false.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Phytoplankton.NutrientLimitedProduction","page":"Library","title":"OceanBioME.Models.PISCESModel.Phytoplankton.NutrientLimitedProduction","text":"NutrientLimitedProduction\n\nBaseProduction with light limitation moderated by nutrient availability. This is the \"origional\" PISCES phytoplankton growth rate model. Growth rate is of the form:\n\nμ = μ₁f₁(τᵈ)f₂(zₘₓₗ)(1-exp(-α θᶜʰˡ PAR  τ μ₀ L)) L\n\nKeyword Arguments\n\nbase_growth_rate: the base growth rate, μ₀, in (1/s)\ntemperatrue_sensetivity: temperature sensetivity parameter, b, giving μ₁ = μ₀ bᵀ where T is temperature\ndark_tollerance: the time that the phytoplankton survives in darkness below the euphotic layer, τᵈ (s)\ninitial_slope_of_PI_curve: the relationship between photosynthesis and irradiance, α₀ (1/W/m²)\nlow_light_adaptation: factor increasing the sensetivity of photosynthesis to irradiance, β,  giving α = α₀(1 + exp(-PAR)), typically set to zero\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.PISCESModel.Nitrogen.NitrateAmmonia","page":"Library","title":"OceanBioME.Models.PISCESModel.Nitrogen.NitrateAmmonia","text":"NitrateAmmonia\n\nA parameterisation for the evolution of nitrate (NO₃) and ammonia (NH₄) where ammonia can be nitrified into nitrate, nitrate and ammonia are supplied by the bacterial degredation of dissolved organic matter, and consumed by  phytoplankton. Additionally waste produces ammonia through various means.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Sugar-kelp-(Saccharina-latissima)","page":"Library","title":"Sugar kelp (Saccharina latissima)","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.SugarKelpModel","page":"Library","title":"OceanBioME.Models.SugarKelpModel","text":"Sugar kelp model of Broch and Slagstad (2012) and updated by Broch et al. (2013), Fossberg et al. (2018), and Broch et al. (2019).\n\nPrognostic properties\n\nArea: A (dm²)\nNitrogen reserve: N (gN/gSW)\nCarbon reserve: C (gC/gSW)\n\nTracer dependencies\n\nNitrates: NO₃ (mmol N/m³)\nAmmonia: NH₄ (mmol N/m³)\nPhotosynthetically available radiation: PAR (einstein/m²/day)\nTemperature: T (°C)\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.SugarKelpModel.SugarKelp","page":"Library","title":"OceanBioME.Models.SugarKelpModel.SugarKelp","text":"SugarKelp\n\nDefines the parameters for SugarKelp biogeochemistry.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.SugarKelpModel.SugarKelpParticles-Union{Tuple{Any}, Tuple{FT}} where FT","page":"Library","title":"OceanBioME.Models.SugarKelpModel.SugarKelpParticles","text":"SugarKelpParticles(n; grid, kelp_parameters = NamedTuple(), kwargs...)\n\nSets up n sugar kelp BiogeochemicalParticles with default parameters except those specified in kelp_parameters. kwagrs are passed onto BiogeochemicalParticles.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Carbon-Chemistry","page":"Library","title":"Carbon Chemistry","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel","text":"CarbonChemistryModel to solve chemical equilibrium parameterisations\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.CarbonChemistry-Union{Tuple{}, Tuple{FT}} where FT","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.CarbonChemistry","text":"(p::CarbonChemistry)(; DIC, T, S, Alk = 0, pH = nothing,\n                       return_pH = false,\n                       boron = 0.000232 / 10.811 * S / 1.80655,\n                       sulfate = 0.14 / 96.06 * S / 1.80655,\n                       fluoride = 0.000067 / 18.9984 * S / 1.80655,\n                       silicate = 0,\n                       phosphate = 0,\n                       upper_pH_bound = 14,\n                       lower_pH_bound = 0)\n\nCalculates fCO₂ in sea water with DIC, Alkalinity, Temperature, and Salinity unless pH is specified, in which case intermediate computation of pH is skipped and pCO₂ is calculated from the DIC, T, S and pH.\n\nAlternativly, pH is returned if return_pH is true.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.IonicStrength","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.IonicStrength","text":"IonicStrength(; a =  19.924,\n                b =  1000.0,\n                c = -1.005)\n\nParameterisation of the ionic strength of sea water.\n\nIs(S) = aS / (b + cS)\n\nDefault values from Dickson (1990, Chem. Thermodyn., 22, 113–127).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.K0","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.K0","text":"K0(; constant = -60.2409,\n     inverse_T =  93.4517 * 100,\n     log_T =  23.3585,\n     T² =  0.0,\n     S =  0.023517,\n     ST = -0.023656 / 100,\n     ST² =  0.0047036 / 100^2)\n\nParameterisation for carbon dioxide solubility equilibrium constant.\n\nCO₂(g) ⇌ CO₂*(aq)\n\nK₀ = [CO₂*(aq)]/f(CO₂)\n\nDefault values from Weiss, R.F. (1974, Mar. Chem., 2, 203–215).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.K1","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.K1","text":"K1(FT = Float64;\n   constant =  61.2172,\n   inverse_T = -3633.86,\n   log_T = -9.67770,\n   S =  0.011555,\n   S² = -0.0001152,\n   pressure_correction = PressureCorrection(FT; a₀=-25.50, a₁=0.1271, a₂=0.0, b₀=-0.00308, b₁=0.0000877))\n\nParameterisation for aquious carbon dioxide - bicarbonate dissociation equilibrium constant.\n\nCO₂*(aq) + H₂O ⇌ H₂CO₃ ⇌ HCO₃⁻ + H⁺\n\nK₁ = [H⁺][HCO₃⁻]/[CO₂*]\n\nDefault values from Lueker et al. (2000, Mar. Chem., 70: 105–119).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.K2","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.K2","text":"K2(FT = Float64;\n   constant = -25.9290,\n   inverse_T = -471.78,\n   log_T = 3.16967,\n   S = 0.01781,\n   S² = -0.0001122,\n   pressure_correction = PressureCorrection(FT; a₀=-15.82, a₁=-0.0219, a₂=0.0, b₀=0.00113, b₁=-0.0001475))\n\nParameterisation for bicarbonate dissociation equilibrium constant.\n\nHCO₃⁻ ⇌ CO₃²⁻ + H⁺\n\nK₂ = [H⁺][CO₃²⁻]/[HCO₃⁻]\n\nDefault values from Lueker et al. (2000, Mar. Chem., 70: 105–119).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KB","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KB","text":"KB(FT = Float64;\n   constant =  148.0248,\n   inverse_T = -8966.90,\n   inverse_T_sqrt_S = -2890.53,\n   inverse_T_S = -77.942,\n   inverse_T_sqrt_S³ =  1.728,\n   inverse_T_S² = -0.0996,\n   sqrt_S = 137.1942,\n   S = 1.62142,\n   log_T = -24.4344,\n   log_T_sqrt_S = -25.085,\n   S_log_T = -0.2474,\n   T_sqrt_S =  0.053105,\n   pressure_correction = PressureCorrection(FT; a₀=-29.48, a₁=0.1622, a₂=-0.0026080, b₀=-0.00284, b₁=0.0))\n\nParameterisation for boric acid equilibrium with water.\n\nB(OH)₃ + H₂O ⇌ B(OH)₄⁻ + H⁺\n\nKᵇ = [H⁺][B(OH)₄⁻]/[B(OH)₃]\n\nDefault values from Dickson (1990, Deep-Sea Res., 37, 755–766).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KF","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KF","text":"KF(; ionic_strength = IonicStrength(),\n      sulfate_constant = KS(; ionic_strength),\n      constant = -9.68,\n      inverse_T = 874.0,\n      sqrt_S =  0.111,\n      log_S = 0.0,\n      log_S_KS = 0.0,\n      pressure_correction = \n         PressureCorrection(; a₀=-9.78, a₁=-0.0090, a₂=-0.000942, b₀=-0.00391, b₁=0.000054))\n\nParameterisation for hydrogen fluoride dissociation equilibrium constant.\n\nHF ⇌ F⁻ + H⁺\n\nKᶠ = [H⁺][F⁻]/[HF]\n\nDefault values from Perez and Fraga (1987, Mar. Chem., 21, 161–168).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KP","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KP","text":"KP(constant,\n   inverse_T,\n   log_T,\n   sqrt_S,\n   inverse_T_sqrt_S,\n   S,\n   inverse_T_S,\n   pressure_correction)\n\nGeneric equilibrium constant parameterisation of the form used by  Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677) for phosphoric  acid dissociation.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KS","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KS","text":"KS(; constant =  148.9652,\n     inverse_T = -13847.26,\n     log_T = -23.6521,\n     sqrt_S = -5.977,\n     inverse_T_sqrt_S =  118.67,\n     log_T_sqrt_S =  1.0495,\n     S = -0.01615,\n     pressure_correction = \n        PressureCorrection(; a₀=-18.03, a₁=0.0466, a₂=0.000316, b₀=-0.00453, b₁=0.00009))\n\nParameterisation for bisulfate dissociation equilibrium constant.\n\nHSO₄⁻ ⇌ SO₄²⁻ + H⁺\n\nKˢ = [H⁺][SO₄²⁻]/[HSO₄⁻]\n\nDefault values from Dickson (1990, Chem. Thermodyn., 22, 113–127).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KSP","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KSP","text":"KSP(therm_constant,\n    therm_T,\n    therm_inverse_T,\n    therm_log_T,\n    sea_sqrt_S,\n    sea_T_sqrt_S,\n    sea_inverse_T_sqrt_S,\n    sea_S,\n    sea_S_sqrt_S³,\n    pressure_correction)\n\nGeneric CaCO₃ solubility parameterisation of the form given by Form from Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KSi","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KSi","text":"KSi(; ionic_strength = IonicStrength(),\n      constant =  117.385,\n      inverse_T = -8904.2,\n      log_T = -19.334,\n      sqrt_Is = 3.5913,\n      inverse_T_sqrt_Is = -458.79,\n      Is = -1.5998,\n      inverse_T_Is = 188.74,\n      Is² = 0.07871,\n      inverse_T_Is² = -12.1652,\n      log_S = -0.001005)\n\nParameterisation for silicic acid dissociation equilibrium constant.\n\nSi(OH)₄ ⇌ SiO(OH)₃⁻ + H⁺\n\nKʷ = [H⁺][SiO(OH)₃⁻]/[Si(OH)₄]\n\nDefault values from Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KW","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KW","text":"KW(; constant =  148.9652,\n     inverse_T = -13847.26,\n     log_T = -23.6521,\n     sqrt_S = -5.977,\n     inverse_T_sqrt_S =  118.67,\n     log_T_sqrt_S =  1.0495,\n     S = -0.01615,\n     pressure_correction = \n        PressureCorrection(; a₀=-20.02, a₁=0.1119, a₂=-0.001409, b₀=-0.00513, b₁=0.0000794))\n\nParameterisation for water dissociation equilibrium constant.\n\nH₂O ⇌ OH⁻ + H⁺\n\nKʷ = [H⁺][OH⁻]\n\nDefault values from Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.PressureCorrection","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.PressureCorrection","text":"PressureCorrection(FT=Float64;\n                   a₀, a₁, a₂,\n                   b₀, b₁, b₂,\n                   R = 83.14472)\n\nParameterisation for the pressure effect on thermodynamic constants.\n\nForm from Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KP1-Union{Tuple{}, Tuple{Any}, Tuple{PC}} where PC","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KP1","text":"KP1(; constant = 115.525,\n      inverse_T = -4576.752,\n      log_T = - 18.453,\n      sqrt_S = 0.69171,\n      inverse_T_sqrt_S = -106.736,\n      S = -0.01844,\n      inverse_T_S = -0.65643,\n      pressure_correction = \n         PressureCorrection(; a₀=-14.51, a₁=0.1211, a₂=-0.000321, b₀=-0.00267, b₁=0.0000427))\n\nInstance of KP returning the first phosphocic acid equilibrium constant.\n\nH₃PO₄ ⇌ H₂PO₄⁻ + H⁺\n\nKᵖ¹ = [H⁺][H₂PO₄]/[H₃PO₄]\n\nDefault values from Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KP2-Union{Tuple{}, Tuple{Any}, Tuple{PC}} where PC","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KP2","text":"KP2(; constant = 172.0883,\n      inverse_T = -8814.715,\n      log_T = -27.927,\n      sqrt_S = 1.3566,\n      inverse_T_sqrt_S = -160.340,\n      S = -0.05778,\n      inverse_T_S = 0.37335,\n      pressure_correction = \n        PressureCorrection(; a₀=-23.12, a₁=0.1758, a₂=-0.002647, b₀=-0.00515, b₁=0.00009))\n\nInstance of KP returning the second phosphocic acid equilibrium constant.\n\nH₂PO₄⁻ ⇌ HPO₄²⁻ + H⁺\n\nKᵖ² = [H⁺][HPO₄²⁻]/[H₂PO₄⁻]\n\nDefault values from Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KP3-Union{Tuple{}, Tuple{Any}, Tuple{PC}} where PC","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KP3","text":"KP3(; constant = -18.141,\n      inverse_T = -3070.75,\n      log_T = 0.0,\n      sqrt_S = 2.81197,\n      inverse_T_sqrt_S = 17.27039,\n      S = -0.09984,\n      inverse_T_S = -44.99486,\n      pressure_correction = \n        PressureCorrection(; a₀=-26.57, a₁=0.2020, a₂=-0.0030420, b₀=-0.00408, b₁=0.0000714))\n\nInstance of KP returning the third phosphocic acid equilibrium constant.\n\nHPO₄²⁻ ⇌ PO₄ + H⁺\n\nKᵖ³ = [H⁺][PO₄³⁻]/[HPO₄⁻]\n\nDefault values from Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KSP_aragonite-Union{Tuple{}, Tuple{Any}, Tuple{PC}} where PC","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KSP_aragonite","text":"KSParagonite(; thermconstant = -171.945,                 thermT = -0.077993,                 therminverseT = 2903.293,                 thermlogT = 71.595,                 seasqrtS = -0.068393,                 seaTsqrtS = 0.0017276,                 seainverseTsqrtS = 88.135,                 seaS = -0.10018,                 seaSsqrtS³ = 0.0059415,                 pressure_correction =                     PressureCorrection(; a₀=-45.96, a₁=0.5304, a₂=-0.0, b₀=-0.01176, b₁=0.0003692))\n\nInstance of KSP returning calcite solubility.\n\nDefault values from Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.KSP_calcite-Union{Tuple{}, Tuple{Any}, Tuple{PC}} where PC","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.KSP_calcite","text":"KSP_calcite(; therm_constant = -171.9065,\n              therm_T = -0.077993,\n              therm_inverse_T = 2839.319,\n              therm_log_T = 71.595,\n              sea_sqrt_S = -0.77712,\n              sea_T_sqrt_S = 0.0028426,\n              sea_inverse_T_sqrt_S = 178.34,\n              sea_S = -0.07711,\n              sea_S_sqrt_S³ = 0.0041249,\n              pressure_correction =\n                  PressureCorrection(; a₀=-48.76, a₁=0.5304, a₂=-0.0, b₀=-0.01176, b₁=0.0003692))\n\nInstance of KSP returning calcite solubility.\n\nDefault values from Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.CarbonChemistryModel.alkalinity_residual-Tuple{Any, Any}","page":"Library","title":"OceanBioME.Models.CarbonChemistryModel.alkalinity_residual","text":"alkalinity_residual(H, p)\n\nReturns the difference between total alkalinity computed from H(hydrogen ion concentration),DIC,borate,sulfate,phosphate,silicate, andfluorideconcentration and chemical equilibrium constants specified inp, and the specified  totalAlk`alinity.\n\nTAlk = [HCO₃⁻] + 2[CO₃²⁻] + [B(OH)₄⁻] + [OH⁻] + [HPO₄²⁻] + 2[PO₄³⁻] + [SiO(OH)₃⁻] \n       + [NH₃] + [HS⁻] - [H⁺] - [HSO₄⁻] - [HF] - [H₃PO₄] + minor acids and bases\n\nConcentrations diagnosed as specified in Dickson et. al best practice descried in  CarbonChemistry docstring.\n\nNote ammonia (NH₃) is not currently included.\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Light-Attenuation-Models","page":"Library","title":"Light Attenuation Models","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Light","page":"Library","title":"OceanBioME.Light","text":"Light attenuation by chlorophyll as described by Karleskind et al. (2011) (implemented as TwoBand) and Morel (1988) (as MultiBand).\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Light.MultiBandPhotosyntheticallyActiveRadiation","page":"Library","title":"OceanBioME.Light.MultiBandPhotosyntheticallyActiveRadiation","text":"MultiBandPhotosyntheticallyActiveRadiation{F, FN, K, E, C, SPAR, SPARD}\n\nLight attenuation model with multiple wave length bands where each band (i) is attenuated like:\n\n∂PARᵢ(z)/∂z = PARᵢ(kʷ(i) + χ(i)Chl(z)ᵉ⁽ⁱ⁾)\n\nWhere kʷ(i) is the band specific water attenuation coefficient, e(i) the chlorophyll exponent, and χ(i) the chlorophyll attenuation coefficient.\n\nWhen the fields are called with biogeochemical_auxiliary_fields an additional field named PAR is also returned which is a sum of the bands.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Light.MultiBandPhotosyntheticallyActiveRadiation-Union{Tuple{}, Tuple{FT}} where FT","page":"Library","title":"OceanBioME.Light.MultiBandPhotosyntheticallyActiveRadiation","text":"MultiBandPhotosyntheticallyActiveRadiation(; grid::AbstractGrid{FT}, \n                                             bands = ((400, 500), (500, 600), (600, 700)), #nm\n                                             base_bands = MOREL_λ,\n                                             base_water_attenuation_coefficient = MOREL_kʷ,\n                                             base_chlorophyll_exponent = MOREL_e,\n                                             base_chlorophyll_attenuation_coefficient = MOREL_χ,\n                                             field_names = [par_symbol(n, length(bands)) for n in 1:length(bands)],\n                                             surface_PAR = default_surface_PAR)\n\nReturns a MultiBandPhotosyntheticallyActiveRadiation attenuation model of surface_PAR in divided  into bands by surface_PAR_division. \n\nThe attenuation morelcoefficients are computed from `basewaterattenuationcoefficient,basechlorophyllexponent, andbasechlorophyllattenuationcoefficientwhich should be  arrays of the coefficients atbasebands` wavelengths. \n\nThe returned field_names default to PAR₁, PAR₂, etc., but may be specified by the user instead.\n\nKeyword Arguments\n\ngrid: grid for building the model on\nwater_red_attenuation, ..., phytoplankton_chlorophyll_ratio: parameter values\nsurface_PAR: function (or array in the future) for the photosynthetically available radiation at the surface,   which should be f(x, y, t) where x and y are the native coordinates (i.e. meters for rectilinear grids  and latitude/longitude as appropriate)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Light.PrescribedPhotosyntheticallyActiveRadiation","page":"Library","title":"OceanBioME.Light.PrescribedPhotosyntheticallyActiveRadiation","text":"PrescribedPhotosyntheticallyActiveRadiation(fields)\n\nPrescribedPhotosyntheticallyActiveRadiation returns \"prescribed\" PAR fields which are user specified, e.g. they may be FunctionFields or  ConstantFields.\n\nfields may either be an AbstractField or a NamedTuple of names and  fields which will be returned in biogeochemical_auxiliary_fields, if only one field is present the field will be named PAR.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Light.TwoBandPhotosyntheticallyActiveRadiation-Union{Tuple{}, Tuple{SPAR}, Tuple{FT}} where {FT, SPAR}","page":"Library","title":"OceanBioME.Light.TwoBandPhotosyntheticallyActiveRadiation","text":"TwoBandPhotosyntheticallyActiveRadiation(; grid::AbstractGrid{FT}, \n                                           water_red_attenuation::FT = 0.225, # 1/m\n                                           water_blue_attenuation::FT = 0.0232, # 1/m\n                                           chlorophyll_red_attenuation::FT = 0.037, # 1/(m * (mgChl/m³) ^ eʳ)\n                                           chlorophyll_blue_attenuation::FT = 0.074, # 1/(m * (mgChl/m³) ^ eᵇ)\n                                           chlorophyll_red_exponent::FT = 0.629,\n                                           chlorophyll_blue_exponent::FT = 0.674,\n                                           pigment_ratio::FT = 0.7,\n                                           phytoplankton_chlorophyll_ratio::FT = 1.31,\n                                           surface_PAR::SPAR = default_surface_PAR)\n\nKeyword Arguments\n\ngrid: grid for building the model on\nwater_red_attenuation, ..., phytoplankton_chlorophyll_ratio: parameter values\nsurface_PAR: function (or array in the future) for the photosynthetically available radiation at the surface,   which should be f(x, y, t) where x and y are the native coordinates (i.e. meters for rectilinear grids  and latitude/longitude as appropriate)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Sediments","page":"Library","title":"Sediments","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.SedimentModels.InstantRemineralisation","page":"Library","title":"OceanBioME.Models.SedimentModels.InstantRemineralisation","text":"InstantRemineralisation\n\nHold the parameters and fields a simple sediment model where sinking organic carbon is \"instantly remineralised\" and either returned to the domain as  remineralisation_reciever (typically NH₄), or permanently stored in the sediment.\n\nThe \"burial efficiency\" (the fraction permanently stored) is from  Dunne et al. (2007), and varies with the sinking flux.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.SedimentModels.SimpleMultiG","page":"Library","title":"OceanBioME.Models.SedimentModels.SimpleMultiG","text":"struct SimpleMultiG\n\nHold the parameters and fields for a simple \"multi G\" single-layer sediment model. Based on the Level 3 model described by Soetaert et al. (2000).\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.SedimentModels.InstantRemineralisationSediment-Tuple{Any}","page":"Library","title":"OceanBioME.Models.SedimentModels.InstantRemineralisationSediment","text":"InstantRemineralisationSediment(grid;\n                                sinking_tracers = (:P, :D), \n                                remineralisation_reciever = :N,\n                                burial_efficiency_constant1 = 0.013,\n                                burial_efficiency_constant2 = 0.53,\n                                burial_efficiency_half_saturation = 7.0 / 6.56,\n                                kwargs...)\n\nReturn a single-layer instant remineralisation sediment model where the sinking_tracers are instantly remineralised and returned to remineralisation_reciever with a small fraction permanently buried with efficiency:\n\ne = a + b * f / (k + f)²\n\nwhere a is burial_efficiency_constant1, b is burial_efficiency_constant2, and  k is the burial_efficiency_half_saturation.\n\nkwargs... are BiogeochemicalSediment key word arguments.\n\nExample\n\nusing OceanBioME, Oceananigans\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200))\n\nsediment_model = InstantRemineralisationSediment(grid)\n\nbiogeochemistry = NPZD(; grid, sediment_model)\n\nusing OceanBioME, Oceananigans\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200))\n\nsediment_model = InstantRemineralisationSediment(grid; \n                                                 sinking_tracers = (:sPOM, :bPOM),\n                                                 remineralisation_reciever = :NH₄)\n\nbiogeochemistry = LOBSTER(; grid, sediment_model)\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Models.SedimentModels.SimpleMultiGSediment-Tuple{Any}","page":"Library","title":"OceanBioME.Models.SedimentModels.SimpleMultiGSediment","text":"SimpleMultiGSediment(grid;\n                     fast_decay_rate = 2/day,\n                     slow_decay_rate = 0.2/day,\n                     fast_redfield = 0.1509,\n                     slow_redfield = 0.13,\n                     fast_fraction = 0.74,\n                     slow_fraction = 0.26,\n                     refactory_fraction = 0.1,\n                     sedimentation_rate = 982 * abs(znode(1, 1, 1, grid, Center(), Center(), Center())) ^ (-1.548), # cm/year, incorrect for D < 100m\n                     anoxia_half_saturation = 1.0, # mmol/m³ (arbitarily low)\n                     nitrate_oxidation_params = on_architecture(architecture(grid), (- 1.9785, 0.2261, -0.0615, -0.0289, - 0.36109, - 0.0232)),\n                     denitrification_params = on_architecture(architecture(grid), (- 3.0790, 1.7509, 0.0593, - 0.1923, 0.0604, 0.0662)),\n                     anoxic_params = on_architecture(architecture(grid), (- 3.9476, 2.6269, - 0.2426, -1.3349, 0.1826, - 0.0143)),\n                     solid_dep_params = on_architecture(architecture(grid), (0.233, 0.336, 982.0, - 1.548)),\n                     sinking_nitrogen = (:sPOM, :bPOM),\n                     sinking_carbon = nothing,\n                     sinking_redfield = ifelse(isnothing(sinking_carbon), convert(eltype(grid), 6.56), nothing),\n                     kwargs...)\n\nReturn a single-layer \"multi G\" sediment model (SimpleMultiG) on grid, where parameters can be optionally specified.\n\nThe model is a single layer (i.e. does not include porous diffusion) model with three classes of sediment organic matter which decay at three different rates (fast, slow, refactory). The nitrification/denitrification/anoxic mineralisation fractions default to the parameterisation of Soetaert et al. 2000; doi:10.1016/S0012-8252(00)00004-0.\n\nThis model has not yet been validated or compared to observational data. The variety of degridation processes is likely to be strongly dependent on oxygen availability (see https://bg.copernicus.org/articles/6/1273/2009/bg-6-1273-2009.pdf) so it will therefore be important to also thoroughly validate the oxygen model (also currently limited).\n\nExample\n\njulia> using OceanBioME, Oceananigans\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> sediment_model = SimpleMultiGSediment(grid)\n`BiogeochemicalSediment` with `Single-layer multi-G sediment model (Float64)` biogeochemsitry\n    Prognostic fields: (:Ns, :Nf, :Nr)\n    Tracked fields: (:NO₃, :NH₄, :O₂, :sPOM, :bPOM)\n    Coupled fields: (:NO₃, :NH₄, :O₂)\n\njulia> biogeochemistry = LOBSTER(; grid, sediment_model)\nLOBSTER{Float64} with carbonates ❌, oxygen ❌, variable Redfield ratio ❌ and (:sPOM, :bPOM) sinking\n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: `BiogeochemicalSediment` with `Single-layer multi-G sediment model (Float64)` biogeochemsitry\n Particles: Nothing\n Modifiers: Nothing\n\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Gas-exchange-boundary-conditions","page":"Library","title":"Gas exchange boundary conditions","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel","page":"Library","title":"OceanBioME.Models.GasExchangeModel","text":"GasExchangeModel to solve chemical equilibrium parameterisations\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.CarbonDioxideConcentration","page":"Library","title":"OceanBioME.Models.GasExchangeModel.CarbonDioxideConcentration","text":"CarbonDioxideConcentration(; carbon_chemistry, \n                             first_virial_coefficient = PolynomialVirialCoefficientForCarbonDioxide(),\n                             cross_viral_coefficient = CrossVirialCoefficientForCarbonDioxide(),\n                             air_pressue = 1 # atm)\n\nConverts fCO₂ to partial pressure as per Dickson, A.G., Sabine, C.L. and  Christian, J.R. (2007),  Guide to Best Practices for Ocean CO 2 Measurements. PICES Special Publication 3, 191 pp.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.GasExchange","page":"Library","title":"OceanBioME.Models.GasExchangeModel.GasExchange","text":"GasExchange\n\nGasExchange returns the air-sea flux of a gas betwen water_concentration and air_concentration with a transfer_velocity computed from the temperature  (provided later), and the wind_speed.\n\ntransfer_velocity should behave as a function of wind speed and temperature (i.e. k(u, T)), water_concentration a function of c(x, y, t, T, field_dependencies...).\n\nwater_concentration, air_concentration and wind_speed can either be numbers,  functions of the form (x, y, t), functions of the form (i, j, grid, clock, model_fields)  if discrete_form is set to true, or any kind of Field.\n\nwater_concentration should usually be a [Tracer]Concentration where is the name of the tracer (you will have to build your own if this is not OxygenConcentration),  or a CarbonDioxideConcentration which diagnoses the partial pressure of CO₂ in the water.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.PartiallySolubleGas","page":"Library","title":"OceanBioME.Models.GasExchangeModel.PartiallySolubleGas","text":"PartiallySolubleGas(; air_concentration, solubility)\n\nParameterises the available concentration of a gas dissolving in water in the form alpha C_a where lpha is the Ostwald solubility coeffieient and C_a is the concentration in the air.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.Wanninkhof92Solubility","page":"Library","title":"OceanBioME.Models.GasExchangeModel.Wanninkhof92Solubility","text":"Wanninkhof92Solubility\n\nParameterises the Ostwald solubility coefficient as given in Wanninkhof, 1992.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.CarbonDioxideGasExchangeBoundaryCondition","page":"Library","title":"OceanBioME.Models.GasExchangeModel.CarbonDioxideGasExchangeBoundaryCondition","text":"CarbonDioxideGasExchangeBoundaryCondition(FT = Float64; \n                                          carbon_chemistry = CarbonChemistry(FT),\n                                          transfer_velocity = SchmidtScaledTransferVelocity(schmidt_number = CarbonDioxidePolynomialSchmidtNumber(FT)),\n                                          air_concentration = 413, # ppmv\n                                          wind_speed = 2,\n                                          water_concentration = nothing,\n                                          silicate_and_phosphate_names = nothing,\n                                          kwargs...)\n\nReturns a FluxBoundaryCondition for the gas exchange between carbon dioxide dissolved in the water specified by the carbon_chemisty model, and air_concentration with transfer_velocity (see  GasExchangeBoundaryCondition for details).\n\nsilicate_and_phosphate_names should either be nothing, a Tupleof symbols specifying the name of the silicate and phosphate tracers, or aNamedTupleof values for thecarbon_chemistry` model.\n\nkwargs are passed on to GasExchangeBoundaryCondition.\n\nNote: The model always requires T, S, DIC, and Alk to be present in the model.\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.CarbonDioxidePolynomialSchmidtNumber","page":"Library","title":"OceanBioME.Models.GasExchangeModel.CarbonDioxidePolynomialSchmidtNumber","text":"CarbonDioxidePolynomialSchmidtNumber(FT = Float64; a = 2116.8, b = -136.25, c = 4.7353, d = -0.092307, e = 0.0007555)\n\nSchmidt number parameterisation Wanninkhof, 2014 for sea water\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.GasExchangeBoundaryCondition","page":"Library","title":"OceanBioME.Models.GasExchangeModel.GasExchangeBoundaryCondition","text":"GasExchangeBoundaryCondition(; water_concentration,\n                               air_concentration,\n                               transfer_velocity,\n                               wind_speed)\n\nReturns a FluxBoundaryCondition for the gas exchange between water_concentration and air_concentration with transfer_velocity.\n\nwater_concentration, air_concentration and wind_speed can either be numbers,  functions of the form (x, y, t), functions of the form (i, j, grid, clock, model_fields)  if discrete_form is set to true, or any kind of Field.\n\nwater_concentration should usually be a [Tracer]Concentration where is the name of the tracer (you will have to build your own if this is not OxygenConcentration),  or a CarbonDioxideConcentration which diagnoses the partial pressure of CO₂ in the water.\n\ntransfer_velocity should be a function of the form k(u₁₀, T).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.OxygenGasExchangeBoundaryCondition","page":"Library","title":"OceanBioME.Models.GasExchangeModel.OxygenGasExchangeBoundaryCondition","text":"OxygenGasExchangeBoundaryCondition(FT = Float64; \n                                   transfer_velocity = SchmidtScaledTransferVelocity(schmidt_number = OxygenPolynomialSchmidtNumber(FT)),\n                                   water_concentration = OxygenConcentration(),\n                                   air_concentration = 9352.7, # mmolO₂/m³\n                                   wind_speed = 2,\n                                   kwagrs...)\n\nReturns a FluxBoundaryCondition for the gas exchange between oxygen dissolved in the water specified by the the OxygenConcentration in the base model, and air_concentration with transfer_velocity (see GasExchangeBoundaryCondition for details).\n\nkwargs are passed on to GasExchangeBoundaryCondition.\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.OxygenPolynomialSchmidtNumber","page":"Library","title":"OceanBioME.Models.GasExchangeModel.OxygenPolynomialSchmidtNumber","text":"OxygenPolynomialSchmidtNumber(FT = Float64; a = 1953.4, b = - 128.0, c = 3.9918, d = -0.050091)\n\nSchmidt number parameterisation Wanninkhof, 2014 for sea water\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.SchmidtScaledTransferVelocity","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.SchmidtScaledTransferVelocity","text":"SchmidtScaledTransferVelocity(; schmidt_number, \n                                base_transfer_velocity = Ho06())\n\nReturns a model for gas transfer velocity which depends on the u₁₀, the 10m-wind, and  Temperature. The model is of the typical form:\n\nk(u₁₀, T) = k₆₆₀(u₁₀) √(660/Sc(T))\n\nThe base_transfer_velocity (k₆₆₀) is typically an empirically derived gas transfer velocity normalised by the Scmidt number for CO₂ at 20°C (660), and the schmidt_number (Sc) is a parameterisation of the gas specific Schmidt number.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.CCMP2","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.CCMP2","text":"CCMP2(FT = Float64; scale_factor = 0.256789 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation calibrated to give 16.5 cm/hr global average (reccomended Naegler, 2009) for the CCMP2 wind product by SeaFlux/Luke Gregor et al. (2023).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.ERA5","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.ERA5","text":"ERA5(FT = Float64; scale_factor = 0.270875 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation calibrated to give 16.5 cm/hr global average (reccomended Naegler, 2009) for the ERA5 wind product by SeaFlux/Luke Gregor et al. (2023).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Ho06","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Ho06","text":"Ho06(FT = Float64; scale_factor = 0.266 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation of Ho et al. (2006) suitable for the QuickSCAT satellite and short-term  steady wind product.\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.JRA55","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.JRA55","text":"JRA55(FT = Float64; scale_factor = 0.2601975 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation calibrated to give 16.5 cm/hr global average (reccomended Naegler, 2009) for the JRA55 wind product by SeaFlux/Luke Gregor et al. (2023).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.McGillis01","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.McGillis01","text":"McGillis01(FT = Float64; constant = 3.3 / hour / 100, cubic = 0.026 / hour / 100)\n\nCubic k₆₆₀ parameterisation of McGillis et al. (2001) suitable for  short term, in situ wind products.\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.NCEP1","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.NCEP1","text":"NCEP1(FT = Float64; scale_factor = 0.2866424 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation calibrated to give 16.5 cm/hr global average (reccomended Naegler, 2009) for the NCEP1 wind product by SeaFlux/Luke Gregor et al. (2023).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Nightingale00","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Nightingale00","text":"Nightingale00(FT = Float64; linear = 0.333 / hour / 100, quadratic = 0.222 / hour / 100)\n\nCubic k₆₆₀ parameterisation of Nightingale et al. (2000) suitable for  short term, in situ wind products (?).\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Sweeny07","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Sweeny07","text":"Sweeny07(FT = Float64; scale_factor = 0.27 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation of Sweeny et al. (2007) suitable for the NCEP/NCAR reanalysis 1 product\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof09","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof09","text":"Wanninkhof09(FT = Float64; constant = 3 / hour / 100, linear = 0.1 / hour / 100, quadratic = 0.064 / hour / 100, cubic = 0.011 / hour / 100)\n\nCubic k₆₆₀ parameterisation of Wanninkhof et al (2009) suitable for the Cross-Calibrated Multi-Platform (CCMP) Winds product\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof14","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof14","text":"Wanninkhof14(FT = Float64; scale_factor = 0.251 / hour / 100)\n\nQuadratic k₆₆₀ parameterisation of Wanninkhof et al (2014) suitable for the Cross-Calibrated Multi-Platform (CCMP) Winds product\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof99","page":"Library","title":"OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.Wanninkhof99","text":"Wanninkhof99(FT = Float64; scale_factor = 0.0283 / hour / 100)\n\nCubic k₆₆₀ parameterisation of Wanninkhof & McGillis (1999) suitable for  short term, in situ wind products.\n\n\n\n\n\n","category":"function"},{"location":"appendix/library/#Box-Model","page":"Library","title":"Box Model","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.BoxModels","page":"Library","title":"OceanBioME.BoxModels","text":"Integrate biogeochemical models on a single point\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#OceanBioME.BoxModels.BoxModel-Union{Tuple{}, Tuple{PT}, Tuple{C}, Tuple{G}, Tuple{B}} where {B, G, C, PT}","page":"Library","title":"OceanBioME.BoxModels.BoxModel","text":"BoxModel(; biogeochemistry,\n           forcing = NamedTuple(),\n           timestepper = :RungeKutta3,\n           clock = Clock(; time = 0.0),\n           prescribed_tracers::PT = NamedTuple())\n\nConstructs a box model of a biogeochemistry model. Once this has been constructed you can set initial condiitons by set!(model, X=1.0...).\n\nKeyword Arguments\n\nbiogeochemistry: (required) an OceanBioME biogeochemical model, most models must be passed a grid which can be set to a BoxModelGrid for box models\nforcing: NamedTuple of additional forcing functions for the biogeochemical tracers to be integrated\ntimestepper: Timestepper to integrate model\nclock: Oceananigans clock to keep track of time\nprescribed_tracers: named tuple of tracer names and function (f(t)) prescribing tracer values\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.Fields.set!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.Fields.set!","text":"set!(model::BoxModel; kwargs...)\n\nSet the values for a BoxModel\n\nArguments\n\nmodel - the model to set the arguments for\n\nKeyword Arguments\n\nvariables and value pairs to set\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Oceananigans.TimeSteppers.cache_previous_tendencies!-Tuple{BoxModel}","page":"Library","title":"Oceananigans.TimeSteppers.cache_previous_tendencies!","text":"Store previous source terms before updating them. \n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Particles","page":"Library","title":"Particles","text":"","category":"section"},{"location":"appendix/library/#OceanBioME.Particles.BiogeochemicalParticles-Union{Tuple{Any}, Tuple{FT}} where FT","page":"Library","title":"OceanBioME.Particles.BiogeochemicalParticles","text":"BiogeochemicalParticles(number; \n                        grid,\n                        biogeochemistry,\n                        advection = LagrangianAdvection(),\n                        timestepper = ForwardEuler,\n                        field_interpolation = NearestPoint(),\n                        scalefactors = ones(number))\n\nCreates number particles with biogeochemistry on grid, advected by advection which defaults to LagrangianAdvection (i.e. they comove with the water). The biogeochemistry is stepped by timestepper and tracer fields are interpolated by field_interpolation, which defaults to directly reading the nearest center point and taking up/depositing in the same.\n\nParticles can also have a scalefactor which scales their tracer interaction (e.g. to mimic the particle representing multiple particles).\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#OceanBioME.Particles.ForwardEuler","page":"Library","title":"OceanBioME.Particles.ForwardEuler","text":"ForwardEuler\n\nStep particle biogeochemistry with a ForwardEuler methods with Δt from the physical model substep.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Particles.LagrangianAdvection","page":"Library","title":"OceanBioME.Particles.LagrangianAdvection","text":"LagrangianAdvection\n\nSpecifies that particles should move in a purley lagrangian mannor.\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#OceanBioME.Particles.NearestPoint","page":"Library","title":"OceanBioME.Particles.NearestPoint","text":"NearestPoint\n\nSpecifies that tracer values should be taken from the nearst center point.\n\n\n\n\n\n","category":"type"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Aumont, O.; Ethé, C.; Tagliabue, A.; Bopp, L. and Gehlen, M. (2015). PISCES-v2: An ocean biogeochemical model for carbon and ecosystem studies. Geoscientific Model Development 8, 2465–2513.\n\n\n\nBranson, O. (2023), oscarbranson/cbsyst. Zenodo.\n\n\n\nBroch, O. J.; Alver, M. O.; Bekkby, T.; Gundersen, H.; Forbord, S.; Handå, A.; Skjermo, J. and Hancke, K. (2019). The kelp cultivation potential in coastal and offshore regions of Norway. Frontiers in Marine Science 5.\n\n\n\nBroch, O. J.; Ellingsen, I. H.; Forbord, S.; Wang, X.; Volent, Z.; Alver, M. O.; Handå, A.; Andresen, K.; Slagstad, D.; Reitan, K. I.; Olsen, Y. and Skjermo, J. (2013). Modelling the cultivation and bioremediation potential of the kelp Saccharina latissima in close proximity to an exposed salmon farm in Norway. Aquaculture Environment Interactions 4, 187–206.\n\n\n\nBroch, O. J. and Slagstad, D. (2012). Modelling seasonal growth and composition of the kelp Saccharina latissima. Journal of Applied Phycology 24, 759–776.\n\n\n\nChen, M.; Fan, M.; Liu, R.; Wang, X.; Yuan, X. and Zhu, H. (2015). The dynamics of temperature and light on the growth of phytoplankton. Journal of Theoretical Biology 385, 8–19.\n\n\n\nDickson, A.; Sabine, C. and Christian, J. (2007). Guide to best practices for ocean CO2 measurement. North Pacific Marine Science Organization PICES Special Publication 3; IOCCP Report 8, 191.\n\n\n\nDunne, J. P.; Sarmiento, J. L. and Gnanadesikan, A. (2007). A synthesis of global particle export from the surface ocean and cycling through the ocean interior and on the seafloor. Global Biogeochemical Cycles 21.\n\n\n\nFeistel, R. (2008). A Gibbs function for seawater thermodynamics for −6 to 80^circC and salinity up to 120gkg–1. Deep Sea Research Part I: Oceanographic Research Papers 55, 1639–1671.\n\n\n\nFossberg, J.; Forbord, S.; Broch, O. J.; Malzahn, A. M.; Jansen, H.; Handå, A.; Førde, H.; Bergvik, M.; Fleddum, A. L.; Skjermo, J. and Olsen, Y. (2018). The potential for upscaling kelp (Saccharina latissima) cultivation in salmon-driven integrated multi-trophic aquaculture (IMTA). Frontiers in Marine Science 9.\n\n\n\nHo, D. T.; Law, C. S.; Smith, M. J.; Schlosser, P.; Harvey, M. and Hill, P. (2006). Measurements of air-sea gas exchange at high wind speeds in the Southern Ocean: Implications for global parameterizations. Geophysical Research Letters 33, arXiv:https://agupubs.onlinelibrary.wiley.com/doi/pdf/10.1029/2006GL026817.\n\n\n\nHumphreys, M. P.; Lewis, E. R.; Sharp, J. D. and Pierrot, D. (2022). PyCO2SYS v1.8: marine carbonate system calculations in Python. Geoscientific Model Development 15, 15–43.\n\n\n\nKarleskind, P.; Lévy, M. and Memery, L. (2011). Subduction of carbon, nitrogen, and oxygen in the northeast Atlantic. Journal of Geophysical Research: Oceans 116.\n\n\n\nKuhn, A. M.; Fennel, K. and Mattern, J. P. (2015). Model investigations of the North Atlantic spring bloom initiation. Progress in Oceanography 138, 176–193.\n\n\n\nLévy, M.; Gavart, M.; Mémery, L.; Caniaux, G. and Paci, A. (2005). A four-dimensional mesoscale map of the spring bloom in the northeast Atlantic (POMME experiment): Results of a prognostic model. Journal of Geophysical Research C: Oceans 110, 1–23.\n\n\n\nLévy, M.; Klein, P. and Treguier, A.-M. (2001). Impact of sub-mesoscale physics on production and subduction of phytoplankton in an oligotrophic regime. Journal of Marine Research 59, 535–565.\n\n\n\nMorel, A. (1988). Optical modeling of the upper ocean in relation to its biogenous matter content (case I waters). Journal of Geophysical Research 93, 10749.\n\n\n\nResplandy, L.; Lévy, M.; D'Ovidio, F. and Merlivat, L. (2009). Impact of submesoscale variability in estimating the air-sea CO2 exchange: Results from a model study of the POMME experiment. Global Biogeochemical Cycles 23.\n\n\n\nResplandy, L.; Martin, A. P.; Moigne, F. L.; Martin, P.; Aquilina, A.; Mémery, L.; Lévy, M. and Sanders, R. (2012). How does dynamical spatial variability impact 234Th-derived estimates of organic export? Deep-Sea Research Part I: Oceanographic Research Papers 68, 24–45.\n\n\n\nRoquet, F.; Madec, G.; McDougall, T. J. and Barker, P. M. (2015). Accurate polynomial expressions for the density and specific volume of seawater using the TEOS-10 standard. Ocean Modelling 90, 29–43.\n\n\n\nSoetaert, K.; Middelburg, J. J.; Herman, P. M. and Buis, K. (2000). On the coupling of benthic and pelagic biogeochemical models. Earth-Science Reviews 51, 173–201.\n\n\n\nStrong-Wright, J. and Taylor, J. (2022). Modeling the Growth Potential of the Kelp Saccharina Latissima in the North Atlantic. Frontiers in Marine Science 8.\n\n\n\nTaylor, J. R. (2016). Turbulent mixing, restratification, and phytoplankton growth at a submesoscale eddy. Geophysical Research Letters 43, 5784–5792.\n\n\n\nWanninkhof, R. (2014). Relationship between wind speed and gas exchange over the ocean revisited. Limnology and Oceanography: Methods 12, 351–362, arXiv:https://aslopubs.onlinelibrary.wiley.com/doi/pdf/10.4319/lom.2014.12.351.\n\n\n\nWeiss, R. (1974). Carbon dioxide in water and seawater: the solubility of a non-ideal gas. Marine Chemistry 2, 203–215.\n\n\n\n","category":"page"},{"location":"appendix/params/#parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"These pages contain most of the parameters used in the models included in OceanBioME.jl for ease of reference.","category":"page"},{"location":"appendix/params/","page":"Parameters","title":"Parameters","text":"Units are generally mmol X / m³ for concentration, and SI otherwise.","category":"page"},{"location":"generated/OceanBioME.Models.SedimentModels.SimpleMultiG_parameters/#OceanBioME.Models.SedimentModels.SimpleMultiG-default-parameters","page":"OceanBioME.Models.SedimentModels.SimpleMultiG","title":"OceanBioME.Models.SedimentModels.SimpleMultiG default parameters","text":"","category":"section"},{"location":"generated/OceanBioME.Models.SedimentModels.SimpleMultiG_parameters/","page":"OceanBioME.Models.SedimentModels.SimpleMultiG","title":"OceanBioME.Models.SedimentModels.SimpleMultiG","text":"Name Value\nsinking_redfield 6.56\nfast_decay_rate 2.3148148148148147e-5\nslow_decay_rate 2.3148148148148148e-6\nfast_redfield 0.1509\nslow_redfield 0.13\nfast_fraction 0.74\nslow_fraction 0.26\nrefactory_fraction 0.1\nsedimentation_rate 2871.4808286576654\nanoxia_half_saturation 1.0\nnitrate_oxidation_params (-1.9785, 0.2261, -0.0615, -0.0289, -0.36109, -0.0232)\ndenitrification_params (-3.079, 1.7509, 0.0593, -0.1923, 0.0604, 0.0662)\nanoxic_params (-3.9476, 2.6269, -0.2426, -1.3349, 0.1826, -0.0143)\nsolid_dep_params (0.233, 0.336, 982.0, -1.548)\nsinking_nitrogen (:sPOM, :bPOM)\nsinking_carbon ()","category":"page"},{"location":"model_implementation/#model_implementation","page":"Implementing new models","title":"Implementing a new models","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Here we describe how OceanBioME defines biogeochemical (BGC) models, how this varies from Oceananigans, and how to implement your own model.","category":"page"},{"location":"model_implementation/#Model-structure","page":"Implementing new models","title":"Model structure","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"OceanBioME BGC models are structs of type ContinuousFormBiogeochemistry, which is of abstract type AbstractContinuousFormBiogeochemistry from Oceananigans. In Oceananigans this describes BGC models which are defined using continuous functions (depending continuously on x, y, and z) rather than discrete functions (depending on i, j, k). This allows the user to implement the BGC model equations without worrying about details of the grid or discretization, and then Oceananigans handles the rest.","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"OceanBioME's ContinuousFormBiogeochemistry adds a layer on top of this which makes it easy to add light attenuation models, sediment, and biologically active particles (or individual-based models). OceanBioME's ContinuousFormBiogeochemistry includes parameters in which the types of these components are stored. This means that these model components will automatically be integrated into the BGC model without having to add new methods to call Oceananigans functions. ","category":"page"},{"location":"model_implementation/#Implementing-a-model","page":"Implementing new models","title":"Implementing a model","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The nature of multiple dispatch in Julia means that we define new BGC models as new types. You can then define methods to this type which are used by OceanBioME and Oceananigans to integrate the model.","category":"page"},{"location":"model_implementation/#The-basics","page":"Implementing new models","title":"The basics","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"For this example we are going to implement the simple Nutrient-Phytoplankton model similar to that used in (Chen et al., 2015), although we neglect the nutrient in/outflow terms since they may be added as boundary conditions, and modified to conserve nitrogen.","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The first step is to import the abstract type from OceanBioME, some units from Oceananigans (for ease of parameter definition), and import some functions from Oceananigans in order to add methods to:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Biogeochemistry: AbstractContinuousFormBiogeochemistry\nusing Oceananigans.Units\n\nimport Oceananigans.Biogeochemistry: required_biogeochemical_tracers,\n                                     required_biogeochemical_auxiliary_fields,\n                                     biogeochemical_drift_velocity","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We then define our struct with the model parameters, as well as slots for the particles, light attenuation, and sediment models:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@kwdef struct NutrientPhytoplankton{FT, W} <: AbstractContinuousFormBiogeochemistry\n            base_growth_rate :: FT = 1.27 / day              # 1 / seconds\n    nutrient_half_saturation :: FT = 0.025 * 1000 / 14       # mmol N / m³\n       light_half_saturation :: FT = 300.0                   # micro einstein / m² / s\n        temperature_exponent :: FT = 0.24                    # 1\n     temperature_coefficient :: FT = 1.57                    # 1\n         optimal_temperature :: FT = 28.0                    # °C\n              mortality_rate :: FT = 0.15 / day              # 1 / seconds\n     crowding_mortality_rate :: FT = 0.004 / day / 1000 * 14 # 1 / seconds / mmol N / m³\n            sinking_velocity :: W  = 2 / day\nend","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Here, we use descriptive names for the parameters. Below, each of these parameters correspond to a symbol (or letter) which is more convenient mathematically and when defining the BGC model functions. In the above code we used @kwdef to set default values for the models so that we don't have to set all of these parameters each time we use the model. The default parameter values can optionally be over-ridden by the user when running the model. We have also included a sinking_velocity field in the parameter set to demonstrate how we can get tracers (e.g. detritus) to sink. We also need to define some functions so that OceanBioME and Oceananigans know what tracers and auxiliary fields (e.g. light intensity) we use:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"required_biogeochemical_tracers(::NutrientPhytoplankton) = (:N, :P, :T)\n\nrequired_biogeochemical_auxiliary_fields(::NutrientPhytoplankton) = (:PAR, )","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Next, we define the functions that specify how the phytoplankton P evolve. In the absence of advection and diffusion (both of which are handled by Oceananigans), we want the phytoplankton to evolve at the rate given by:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"fracpartial Ppartial t = mu g(T) f(N) h(PAR) P - mP - bP^2","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"where mu corresponds to the parameter base_growth_rate, m corresponds to the parameter mortality_rate, and b corresponds to the parameter crowding_mortality_rate. Here, the functions g, f, and h are defined by:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"beginalign\ng(T) = c_1expleft(-c_2T - T_optright)\nf(N) = fracNk_N + N\nh(PAR) = fracPARk_P + PAR\nendalign","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"where c_1 corresponds to temperature_coefficient,  c_2 corresponds to temperature_exponent, T_opt corresponds to optimal_temperature, k_N corresponds to nutrient_half_saturation, and k_P corresponds to light_half_saturation. ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We turn this into a function for our model by writing:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@inline function (bgc::NutrientPhytoplankton)(::Val{:P}, x, y, z, t, N, P, T, PAR)\n    μ = bgc.base_growth_rate\n    m = bgc.mortality_rate\n    b = bgc.crowding_mortality_rate\n\n    growth = μ * g(bgc, T) * f(bgc, N) * h(bgc, PAR) * P\n\n    death = m * P + b * P ^ 2\n\n    return growth - death\nend\n\n@inline function g(bgc, T)\n    c₁ = bgc.temperature_coefficient\n    c₂ = bgc.temperature_exponent\n    Tₒ = bgc.optimal_temperature\n\n    return c₁ * exp(-c₂ * abs(T - Tₒ))\nend\n\n@inline function f(bgc, N)\n    kₙ = bgc.nutrient_half_saturation\n\n    return N / (N + kₙ)\nend\n\n@inline function h(bgc, PAR)\n    kₚ = bgc.light_half_saturation\n\n    return PAR / (PAR + kₚ)\nend","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"The first parameter ::Val{:P} is a special value type that allows this function to be dispatched when it is given the value Val(:P). This is how Oceananigans tells the model which forcing function to use. At the start of the NutrientPhytoplankton function we unpack some parameters from the model, then calculate each term, and return the total change (the gain minus the loss). ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"For this model, the nutrient evolution can be inferred from the rate of change of phytoplankton. Since this is a simple two variable model and the total concentration is conserved, ","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"fracpartial Npartial t = - fracpartial Ppartial t","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Hence, we define the nutrient forcing using as the negative of the phytoplankton forcing","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"@inline (bgc::NutrientPhytoplankton)(::Val{:N}, args...) = -bgc(Val(:P), args...)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now we can run an example similar to the LOBSTER box model example:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME, Oceananigans.Units\nusing Oceananigans.Fields: FunctionField\n\nconst year = years = 365days\n\n@inline PAR⁰(t) = 500 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nclock = Clock(; time = 0.0)\n\nz = -10 # specify the nominal depth of the box for the PAR profile\n@inline PAR_func(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay \n\nPAR = FunctionField{Center, Center, Center}(PAR_func, BoxModelGrid(); clock)\n\n@inline temp(t) = 2.4 * cos(t * 2π / year + 50days) + 26\n\nbiogeochemistry = Biogeochemistry(NutrientPhytoplankton(); \n                                  light_attenuation = PrescribedPhotosyntheticallyActiveRadiation(PAR))\n\nmodel = BoxModel(; biogeochemistry,\n                   prescribed_tracers = (; T = temp),\n                   clock)\n\nset!(model, N = 15, P = 15)\n\nsimulation = Simulation(model; Δt = 5minutes, stop_time = 5years)\n\nsimulation.output_writers[:fields] = JLD2Writer(model, model.fields; filename = \"box_np.jld2\", schedule = TimeInterval(10days), overwrite_existing = true)\n\n# ## Run the model (should only take a few seconds)\n@info \"Running the model...\"\nrun!(simulation)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can then visualise this:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"P = FieldTimeSeries(\"box_np.jld2\", \"P\")\nN = FieldTimeSeries(\"box_np.jld2\", \"N\")\n\ntimes = P.times\n\n# ## And plot\nusing CairoMakie\n\nfig = Figure(size = (1200, 480), fontsize = 20)\n\naxN= Axis(fig[1, 1], ylabel = \"Nutrient \\n(mmol N / m³)\")\nlines!(axN, times / year, N[1, 1, 1, :], linewidth = 3)\n\naxP = Axis(fig[1, 2], ylabel = \"Phytoplankton \\n(mmol N / m³)\")\nlines!(axP, times / year, P[1, 1, 1, :], linewidth = 3)\n\naxPAR= Axis(fig[2, 1], ylabel = \"PAR (einstein / m² / s)\", xlabel = \"Time (years)\")\nlines!(axPAR, times / year, PAR_func.(times), linewidth = 3)\n\naxT = Axis(fig[2, 2], ylabel = \"Temperature (°C)\", xlabel = \"Time (years)\")\nlines!(axT, times / year, temp.(times), linewidth = 3)\n\nfig","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"So now we know it works.","category":"page"},{"location":"model_implementation/#Phytoplankton-sinking","page":"Implementing new models","title":"Phytoplankton sinking","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now that we have a fully working BGC model we might want to add some more features. Another aspect that is easy to add is negative buoyancy (sinking). To-do this all we do is add a method to the Oceananigans function biogeochemical_drift_velocity, and we use ::Val{:P} to specify that only phytoplankton will sink. Above, we set the default value of the parameter bgc.sinking_velocity. We can override this when we call the BGC model like NutrientPhytoplankton(; light_attenuation_model, sinking_velocity = 1/day). Note that before using biogeochemical_drift_velocity, we need to import several Fields from Oceananigans:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using Oceananigans.Fields: ZeroField, ConstantField\n\nbiogeochemical_drift_velocity(bgc::NutrientPhytoplankton, ::Val{:P}) = \n    (u = ZeroField(), v = ZeroField(), w = bgc.sinking_velocity)","category":"page"},{"location":"model_implementation/#Sediment-model-coupling","page":"Implementing new models","title":"Sediment model coupling","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Another aspect that OceanBioME includes is sediment models. Doing this varies between sediment models, but for the most generic and simplest, all we need to do is add methods to two functions:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using OceanBioME.Sediments: sinking_flux\n\nimport OceanBioME.Sediments: nitrogen_flux, carbon_flux, remineralisation_receiver, sinking_tracers\n\n@inline nitrogen_flux(i, j, k, grid, advection, bgc::NutrientPhytoplankton, tracers) =\n     sinking_flux(i, j, k, grid, advection, Val(:P), bgc, tracers)\n                 \n@inline carbon_flux(i, j, k, grid, advection, bgc::NutrientPhytoplankton, tracers) = nitrogen_flux(i, j, k, grid, advection, bgc, tracers) * 6.56\n\n@inline remineralisation_receiver(::NutrientPhytoplankton) = :N\n\n@inline sinking_tracers(::NutrientPhytoplankton) = (:P, )","category":"page"},{"location":"model_implementation/#Putting-it-together","page":"Implementing new models","title":"Putting it together","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"Now that we have added these elements we can put it together into another simple example:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"using Oceananigans, OceanBioME\n\n# define some simple forcing\n\n@inline surface_PAR(t) = 200 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline ∂ₜT(z, t) = - 2π / year * sin(t * 2π / year + 50days)\n\n@inline κₚ(z) = 1e-2 * (1 + tanh((z - 50) / 10)) / 2 + 1e-4\n\n# define the grid\n\ngrid = RectilinearGrid(topology = (Flat, Flat, Bounded), size = (32, ), x = 1, y = 1, z = (-100, 0))\n\n# setup the biogeochemical model\n\nlight_attenuation = TwoBandPhotosyntheticallyActiveRadiation(; grid, surface_PAR)\n\nsediment = InstantRemineralisationSediment(grid; sinking_tracers = :P)\n\nsinking_velocity = ZFaceField(grid)\n\nw_sink(z) = 2 / day * tanh(z / 5)\n\nset!(sinking_velocity, w_sink)\n\nnegative_tracer_scaling = ScaleNegativeTracers((:N, :P))\n\nbiogeochemistry = Biogeochemistry(NutrientPhytoplankton(; sinking_velocity);\n                                  light_attenuation,\n                                  sediment,\n                                  modifiers = negative_tracer_scaling) \n\nκ = CenterField(grid)\n\nset!(κ, κₚ)\n\n# put the model together\n\nmodel = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              closure = ScalarDiffusivity(ν = κ; κ), \n                              forcing = (; T = ∂ₜT))\n\nset!(model, P = 0.01, N = 15, T = 28)\n\n# run\n\nsimulation = Simulation(model, Δt = 9minutes, stop_time = 1years)\n\nsimulation.output_writers[:tracers] = JLD2Writer(model, model.tracers,\n                                                 filename = \"column_np.jld2\",\n                                                 schedule = TimeInterval(1day),\n                                                 overwrite_existing = true)\n\nsimulation.output_writers[:sediment] = JLD2Writer(model, model.biogeochemistry.sediment.fields,\n                                                  indices = (:, :, 1),\n                                                  filename = \"column_np_sediment.jld2\",\n                                                  schedule = TimeInterval(1day),\n                                                  overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can then visualise this:","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"N = FieldTimeSeries(\"column_np.jld2\", \"N\")\nP = FieldTimeSeries(\"column_np.jld2\", \"P\")\n\nsed = FieldTimeSeries(\"column_np_sediment.jld2\", \"storage\")\n\nfig = Figure()\n\naxN = Axis(fig[1, 1], ylabel = \"z (m)\")\naxP = Axis(fig[2, 1], ylabel = \"z (m)\")\naxSed = Axis(fig[3, 1:2], ylabel = \"Sediment (mmol N / m²)\", xlabel = \"Time (years)\")\n\n_, _, zc = nodes(grid, Center(), Center(), Center())\ntimes = N.times\n\nhmN = heatmap!(axN, times ./ year, zc, N[1, 1, 1:grid.Nz, 1:end]',\n               interpolate = true, colormap = Reverse(:batlow))\n\nhmP = heatmap!(axP, times ./ year, zc, P[1, 1, 1:grid.Nz, 1:end]',\n               interpolate = true, colormap = Reverse(:batlow))\n\nlines!(axSed, times ./ year, sed[1, 1, 1, :])\n\nColorbar(fig[1, 2], hmN, label = \"Nutrient (mmol N / m³)\")\nColorbar(fig[2, 2], hmP, label = \"Phytoplankton (mmol N / m³)\")\n\nfig","category":"page"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"We can see in this that some phytoplankton sink to the bottom, and are both remineralized back into nutrients and stored in the sediment.","category":"page"},{"location":"model_implementation/#Final-notes","page":"Implementing new models","title":"Final notes","text":"","category":"section"},{"location":"model_implementation/","page":"Implementing new models","title":"Implementing new models","text":"When implementing a new model we recommend following a testing process as we have here, starting with a box model, then a column, and finally using it in a realistic physics scenarios. We have found this very helpful for spotting bugs that were proving difficult to decipher in other situations. You can also add Individuals, light attenuation models, and sediment models in a similar fashion.","category":"page"},{"location":"generated/O₂ air-sea exchange_parameters/#O-air-sea-exchange-default-parameters","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange default parameters","text":"","category":"section"},{"location":"generated/O₂ air-sea exchange_parameters/","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange","text":"Name Value\nwind_speed 2.0\ntransfer_velocity OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.SchmidtScaledTransferVelocity{OceanBioME.Models.GasExchangeModel.PolynomialParameterisation{2, Tuple{Float64, Float64, Float64}}, OceanBioME.Models.GasExchangeModel.PolynomialParameterisation{4, NTuple{5, Float64}}}(Order 2 polynomial parameterisation","category":"page"},{"location":"generated/O₂ air-sea exchange_parameters/","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange","text":"p(x) = Σ{n ∈ Z : [0, 2]}(cₙ xⁿ⁻¹) where c = (0.0, 0.0, 7.388888888888889e-7)","category":"page"},{"location":"generated/O₂ air-sea exchange_parameters/","page":"O₂ air-sea exchange","title":"O₂ air-sea exchange","text":", Order 4 polynomial parameterisation     p(x) = Σ{n ∈ Z : [0, 4]}(cₙ xⁿ⁻¹) where c = (1920.4, -135.6, 5.2122, -0.10939, 0.00093777) )| |water_concentration|OceanBioME.Models.GasExchangeModel.OxygenConcentration()| |air_concentration|OceanBioME.Models.GasExchangeModel.PartiallySolubleGas{Float64, OceanBioME.Models.GasExchangeModel.Wanninkhof92Solubility{Float64}}(9352.7, OceanBioME.Models.GasExchangeModel.Wanninkhof92Solubility{Float64}(-58.3877, 85.8079, 23.8439, -0.034892, 0.015578, -0.0019387))|","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/#PISCES_queries","page":"Queries","title":"Notes","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"While most of the function formulae can be found in Aumont et al. (2015), we have compiled the following list of minor errors in the paper, as well as changes that are present in the NEMO implementation.","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/#Preface","page":"Queries","title":"Preface","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"The OceanBioME implementation of PISCES varies from NEMO and CROCCO in a few regards:","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"Our standard unit of concentration is mmol / m³ which is equivalent to μmol / L, so we have retained these units all the tracers except iron\nIron is modelled in μmol / m³ which is equivalent to nmol / L\nIn other implementations of PISCES nitrogen is tracked in carbon units (i.e. the concentration of nitrogen divided by the Redfield ratio). We instead opted to track in nitrogen units and so multiply most terms by the Redfield ratio (TODO: check that constants are in the correct units)\nAumont et al. (2015) refers to the concentrations in μmol / L and nmol / L. The NEMO and CROCCO source code track everything in mol/L, therefore many units were converted, but some were missed (listed below)\nAumont et al. (2015) includes the \"yearly maximum silicate\", Si′ but it appears that the NEMO source code uses the surface silicate, so we have renamed it to silicate_climatology\nOther implementations of PISCES compute the dark residence time (the time spent below the euphotic depth due to mixing within the mixed layer) assuming a constant diffusivity. We replaced this with the actual diffusivity (or it can be set to a ConstantField to replicate other results)\nWe have removed dust from PISCES since it can be implemented as a more generic model elsewhere, and doesn't actually appear in PISCES except in the iron scavenging term which would need to be added as a forcing if iron scavenging from dust was desired in a model.\nThe bacterial remineralisation of DOC is split into the oxic and anoxic parts which are referred to as Remin and Denit, but we have renamed these as oxic_remineralisation and anoxic_remineralisation for clarity\nWe would also like to note for future developers that theta^Chl is mg Chl / mg C so needs to be computed as IChl  12I","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/#Constant-disparities","page":"Queries","title":"Constant disparities","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"We believe that units of some constants were incorrect in Aumont et al. (2015), all units are now all noted in the code and may vary.  The values vary for:","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"Aggregation factors (a_1 a_2 ), found in TwoCompartementCarbonIronParticles and DissolvedOrganicCarbon aggregation_parameters: from the NEMO source code, all of these parameters need a factor of 10^-6 to convert them from units of 1 / (mol / L) to 1 / (μmol / L). Additionally, all the parameters require a factor of 1  86400, for the parameters not multiplied by shear this straight forwardly is because they have time units of 1 / day in the NEMO code, but for those multiplied by shear this is because they implicitly have a factor of seconds per day in them to result in an aggregation in mmol C / day\nIn a similar vein, the flux feeding rate for zooplankton g_FF^M is in 1 / (m mol / L) where that m in meters, so we need to multiply by a factor of 10^-6 to get 1 / (m μmol / L)\nThe fraction of bacterially consumed iron going to small and big particles, kappa^BFe_Bact and kappa^SFe_Bact, in equations 48 and 49 are not recorded but from the NEMO source code we can see that they are 0.04 and 0.12 respectively. Additionally, we need to multiply by a factor of 0.16 (bacterial_iron_uptake_efficiency) to the drawdown from the iron pool due to the instantaneous return (as per the NEMO version)\ntheta_max^Fe Bact is not recorded so the value 0.06 μmol Fe / mmol C is taken from the NEMO source code\ntheta^Fe Z and theta^Fe M are taken from the NEMO source code to be 0.01 and 0.015 μmol Fe / mmol C\ntheta_max^Fe P is taken from the NEMO source code to be 0.06 μmol Fe / mmol C, we note that this isn't actually the maximum in the sense that the ratio could (probably) go above this value\nK^B 1_Fe is not recorded so the value 0.3 μmol Fe / m³ is taken from the NEMO source code\neta^Z and eta^M in equation 76 are incorrectly labelled as nu^I in parameter table\nIron ratios are often given as mol Fe / mol C, so we have converted to μmol Fe / mmol C","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/#Equation-disparities","page":"Queries","title":"Equation disparities","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"The calcite production limitation, L^CaCO_3_lim in equation 77, is not documented. From the NEMO source code it appears to take the form L^CaCO_3_lim = min(L_N^P L_PO_4^P L_Fe) where L_Fe = Fe  (Fe + 005). Additionally, in the NEMO source code L_PO_4 is PO_4  (PO_4 + K^P min_NH_4) but that didn't make sense to us so we assumed it was L_PO_4^P\nThe temperature factor in calcite production is supposed to bring the production to zero when the temperature goes below 0°C but in the documented form does not, it was changed to max(0 T  (T + 01))\nWe think there is an additional factor of Diss_Si in the PSi equation (51) so have neglected it\nA factor of R_NH_4 appears in the nitrate equation which is undefined, and we did not track down in the NEMO source code so have neglected\nThe form of K^Fe_eq in equation 65 is not given, so we took the form expleft(1627 - 15657  max(T + 27315 5)right) from the NEMO source code\nEquation 32 contains a typo, the second term should be (1 - gamma ^M)(1 - e^M - sigma^M)(sum textcolorredg^M (I) + g_FF^M(GOC))M\nEquation 37 is missing a factor of 3Delta O_2 in the third term, and sh in the fifth term\nEquation 40 is missing a factor of sh in the third and fourth terms, and is missing a + in the fourth term which should read 05m^D fracDD+K_mD + sh times w^D D^2\nEquation 48 is missing a factor of 3Delta O_2 in the second term, and a factor of Z in the penultimate term\nEquation 49 is missing a factor of 3Delta O_2 in the second term\nEquations 54 and 55 are missing factors of the Redfield ratio in all terms except nitrification, nitrogen fixation. Additionally, we think that the term R_NH_4lambda_NH_4Delta(O_2)NH_4 is not meant to be present and can not work out its utility or parameter values so have neglected\nEquation 60 is missing a factor of e^Z in the first term and e^M, but for clarity we have rewritten it as:","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"fracpartial Fepartial t += sum_J^Z MleftJmaxleft(0 (1 - sigma)sum_Ig^J(I)theta^Fe I - e^Jtheta^Fe Jsum_Ig^J(I) right)right","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"which is the total iron grazed, minus the amount which is routed to particles, minus the amount stored in the zooplankton (and is identical with different simplification to the original)","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"Equation 19 has a typo and L^I^Fe_lim 2 should read 4 - 45 LFe  (LFe + 1)\nIn equation 33, the min parts did not make sense (and we don't think are present in the NEMO source code), and so have been neglected\nThe first term in equation 14 should read (1-delta^I)12 (theta_min^Chl I + rho(theta_max^Chl I-theta_min^Chl I))mu^I I and rho should be given by L_dayfracmu If_1Lfrac12IIChlfracL_Palpha PAR, maybe this is what it says, but it was not clear","category":"page"},{"location":"model_components/biogeochemical/PISCES/notable_differences/#Changes-since-[Aumont2015](@citet)-in-NEMO","page":"Queries","title":"Changes since Aumont et al. (2015) in NEMO","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/notable_differences/","page":"Queries","title":"Queries","text":"Diatom quadratic mortality has changed forms to w^D=w^P + 025 w^D_max frac1 - (L^D_lim)^2025 + (L^D_lim)^2\nThe P-I slope, alpha, can vary for adaptation to depth, but the default is no enhancement. This can be included in our version by setting low_light_adaptation to be non-zero in the growth rate parameterisations","category":"page"},{"location":"contributing/#Contributors-Guide","page":"Contibutors guide","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Thank you for considering contributions to OceanBioME! We hope this guide helps.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Feel free to ask us questions and chat with us at any time about any topic at all by:","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Opening a GitHub issue\nCreating a GitHub discussion","category":"page"},{"location":"contributing/#Creating-issues","page":"Contibutors guide","title":"Creating issues","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The simplest way to contribute to OceanBioME is to create or comment on issues and discussions.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The most useful bug reports:","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Provide an explicit code snippet –- not just a link –- that reproduces the bug in the latest tagged version of OceanBioME. This is sometimes called the \"minimal working example\". Reducing bug-producing code to a minimal example can dramatically decrease the time it takes to resolve an issue.\nPaste the entire error received when running the code snippet, even if it's unbelievably long.\nUse triple backticks (e.g., ```some_code; and_some_more_code;```) to enclose code snippets, and other markdown formatting syntax to make your issue easy and quick to read.\nReport the OceanBioME version, Julia version, machine (especially if using a GPU) and any other possibly useful details of the computational environment in which the bug was created.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Discussions are recommended for asking questions about (for example) the user interface, implementation details, science, and life in general.","category":"page"},{"location":"contributing/#But-I-want-to-*code*!","page":"Contibutors guide","title":"But I want to code!","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"New users help write OceanBioME code and documentation by forking the OceanBioME repository, using git to edit code and docs, and then creating a pull request. Pull requests are reviewed by OceanBioME collaborators.\nA pull request can be merged once it is reviewed and approved by collaborators. If the pull request author has write access, they have the responsibility of merging their pull request. Otherwise, OceanBioME.jl collaborators will execute the merge with permission from the pull request author.\nNote: for small or minor changes (such as fixing a typo in documentation), the GitHub editor is super useful for forking and opening a pull request with a single click.\nWrite your code with love and care. In particular, conform to existing OceanBioME style and formatting conventions. For example, we love verbose and explicit variable names, use TitleCase for types, snake_case for objects, and always.put.spaces.after.commas. For formatting decisions we loosely follow the YASGuide. It's worth few extra minutes of our time to leave future generations with well-written, readable code.","category":"page"},{"location":"contributing/#What-is-a-\"collaborator\"-and-how-can-I-become-one?","page":"Contibutors guide","title":"What is a \"collaborator\" and how can I become one?","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Collaborators have permissions to review pull requests and status allows a contributor to review pull requests in addition to opening them. Collaborators can also create branches in the main OceanBioME repository.\nWe ask that new contributors try their hand at forking OceanBioME, and opening and merging a pull request before requesting collaborator status.","category":"page"},{"location":"contributing/#What's-a-good-way-to-start-developing-OceanBioME?","page":"Contibutors guide","title":"What's a good way to start developing OceanBioME?","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Tackle an existing issue. We keep a list of good first issues that are self-contained and suitable for a newcomer to try and work on.\nTry to run OceanBioME and play around with it. If you run into any problems or find it difficult to use or understand, please open an issue!\nWrite up an example or tutorial on how to do something useful with OceanBioME, like how to set up a new configuration.\nImprove documentation or comments if you found something hard to use.\nImplement a new feature if you need it to use OceanBioME.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"If you're interested in working on something, let us know by commenting on existing issues or  by opening a new issue. This is to make sure no one else is working on the same issue and so  we can help and guide you in case there is anything you need to know beforehand.","category":"page"},{"location":"contributing/#Ground-Rules","page":"Contibutors guide","title":"Ground Rules","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Each pull request should consist of a logical collection of changes. You can include multiple bug fixes in a single pull request, but they should be related. For unrelated changes, please submit multiple pull requests.\nDo not commit changes to files that are irrelevant to your feature or bugfix (eg: .gitignore).\nBe willing to accept criticism and work on improving your code; we don't want to break other users' code, so care must be taken not to introduce bugs. We discuss pull requests and keep working on them until we believe we've done a good job.\nBe aware that the pull request review process is not immediate, and is generally proportional to the size of the pull request.","category":"page"},{"location":"contributing/#Reporting-a-bug","page":"Contibutors guide","title":"Reporting a bug","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"The easiest way to get involved is to report issues you encounter when using OceanBioME or by requesting something you think is missing.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Head over to the issues page.\nSearch to see if your issue already exists or has even been solved previously.\nIf you indeed have a new issue or request, click the \"New Issue\" button.\nPlease be as specific as possible. Include the version of the code you were using, as well as what operating system you are running. The output of Julia's versioninfo() and ] status is helpful to include. Try your best to include a complete, \"minimal working example\" that reproduces the issue.","category":"page"},{"location":"contributing/#Setting-up-your-development-environment","page":"Contibutors guide","title":"Setting up your development environment","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Install Julia on your system.\nInstall git on your system if it is not already there (install XCode command line tools on a Mac or git bash on Windows).\nLogin to your GitHub account and make a fork of the OceanBioME repository by clicking the \"Fork\" button.\nClone your fork of the OceanBioME repository (in terminal on Mac/Linux or git shell/ GUI on Windows) in the location you'd like to keep it.\ngit clone https://github.com/your-user-name/OceanBioME.jl.git\nNavigate to that folder in the terminal or in Anaconda Prompt if you're on Windows.\nConnect your repository to the upstream (main project).\ngit remote add oceanbiome https://github.com/OceanBioME/OceanBioME.jl.git\nCreate the development environment by opening Julia via julia --project then typing in ] instantiate. This will install all the dependencies in the Project.toml file.\nYou can test to make sure OceanBioME works by typing in ] test. Doing so will run all the tests (and this can take a while).","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Your development environment is now ready!","category":"page"},{"location":"contributing/#Pull-Requests","page":"Contibutors guide","title":"Pull Requests","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"We follow the ColPrac guide for collaborative practices. We ask that new contributors read that guide before submitting a pull request.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Changes and contributions should be made via GitHub pull requests against the main branch.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"When you're done making changes, commit the changes you made. Chris Beams has written a  guide on how to write good commit messages.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"When you think your changes are ready to be merged into the main repository, push to your fork and submit a pull request.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Working on your first Pull Request? You can learn how from this free video series How to Contribute to an Open Source Project on GitHub, Aaron Meurer's tutorial on the git workflow, or the guide “How to Contribute to Open Source\".","category":"page"},{"location":"contributing/#Documentation","page":"Contibutors guide","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"Now that you've made your awesome contribution, it's time to tell the world how to use it. Writing documentation strings is really important to make sure others use your functionality properly. Didn't write new functions? That's fine, but be sure that the documentation for the code you touched is still in great shape. It is not uncommon to find some strange wording or clarification that you can take care of while you are here.","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"You can preview how the Documentation will look like after merging by building the documentation  locally. From the main directory of your local repository call","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"JULIA_DEBUG=Documenter julia --project=docs/ docs/make.jl","category":"page"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"and then open docs/build/index.html in your favorite browser. Providing the environment variable  JULIA_DEBUG=Documenter will provide with more information in the documentation build process and thus help figuring out a potential bug.","category":"page"},{"location":"contributing/#Credits","page":"Contibutors guide","title":"Credits","text":"","category":"section"},{"location":"contributing/","page":"Contibutors guide","title":"Contibutors guide","text":"This contributor's guide is heavily based on the excellent Oceananigans contributors guide which in turn is based on the MetPy contributor's guide.","category":"page"},{"location":"generated/TwoBandPhotosyntheticallyActiveRadiation_parameters/#TwoBandPhotosyntheticallyActiveRadiation-default-parameters","page":"TwoBandPhotosyntheticallyActiveRadiation","title":"TwoBandPhotosyntheticallyActiveRadiation default parameters","text":"","category":"section"},{"location":"generated/TwoBandPhotosyntheticallyActiveRadiation_parameters/","page":"TwoBandPhotosyntheticallyActiveRadiation","title":"TwoBandPhotosyntheticallyActiveRadiation","text":"Name Value\nwater_red_attenuation 0.225\nwater_blue_attenuation 0.0232\nchlorophyll_red_attenuation 0.037\nchlorophyll_blue_attenuation 0.074\nchlorophyll_red_exponent 0.629\nchlorophyll_blue_exponent 0.674\npigment_ratio 0.7\nphytoplankton_chlorophyll_ratio 1.31\nsurface_PAR defaultsurfacePAR","category":"page"},{"location":"generated/data_assimilation/#Calibrating-a-biogeochemical-model-with-EnsembleKalmanProcesses","page":"Data assimilation","title":"Calibrating a biogeochemical model with EnsembleKalmanProcesses","text":"","category":"section"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"In this example we calibrate some of the parameters for the NPZD model in a simple box model setup using a data assimilation package EnsembleKalmanProcesses. First we setup the model and generate synthetic data with \"true\" parameters. We then define priors and setup an EKP to solve.","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"While this is a very simple situation it illustrates the ease of integration with data assimilation tools. Examples given in the EnsembleKalmanProcesses docs illustrate how the package can be used to solve more complex forward models.","category":"page"},{"location":"generated/data_assimilation/#Install-dependencies","page":"Data assimilation","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"First we ensure we have the required dependencies installed","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie, EnsembleKalmanProcesses, Distributions\"","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"using OceanBioME, EnsembleKalmanProcesses, JLD2, CairoMakie, Oceananigans.Units, Oceananigans\nusing LinearAlgebra, Random\n\nusing Distributions\n\nusing EnsembleKalmanProcesses\nusing EnsembleKalmanProcesses.ParameterDistributions\n\nusing Oceananigans.Fields: FunctionField\n\nconst year = years = 365day\n\nrng_seed = 41\nrng = Random.MersenneTwister(rng_seed)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Random.MersenneTwister(41)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Setup the forward model","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"@inline PAR⁰(t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nz = -10 # nominal depth of the box for the PAR profile\n@inline PAR_func(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay\n\nfunction run_box_simulation(initial_photosynthetic_slope,\n                            base_maximum_growth,\n                            nutrient_half_saturation,\n                            phyto_base_mortality_rate,\n                            j)\n    grid = BoxModelGrid()\n    clock = Clock(; time = zero(grid))\n\n    PAR = FunctionField{Center, Center, Center}(PAR_func, grid; clock)\n\n    biogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid,\n                                                                 initial_photosynthetic_slope,\n                                                                 base_maximum_growth,\n                                                                 nutrient_half_saturation,\n                                                                 phyto_base_mortality_rate,\n                                                                 light_attenuation_model = PrescribedPhotosyntheticallyActiveRadiation(PAR))\n\n    model = BoxModel(; biogeochemistry, clock)\n\n    set!(model, N = 10.0, P = 0.1, Z = 0.01)\n\n    simulation = Simulation(model; Δt = 20minutes, stop_time = 2years, verbose = false)\n\n    simulation.output_writers[:fields] = JLD2Writer(model, model.fields; filename = \"box_calibration_$j.jld2\", schedule = TimeInterval(8hours), overwrite_existing = true)\n\n    @info \"Running the model...\"\n    run!(simulation)\n\n    P = FieldTimeSeries(\"box_calibration_$j.jld2\", \"P\")\n\n    times = P.times\n\n    return P[1, 1, 1, length(times)-1092:end], times[length(times)-1092:end]\nend","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"run_box_simulation (generic function with 1 method)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Define the forward map","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"function G(u, j)\n    (initial_photosynthetic_slope,\n     base_maximum_growth,\n     nutrient_half_saturation,\n     phyto_base_mortality_rate) = u\n\n    P, times = run_box_simulation(initial_photosynthetic_slope,\n                                  base_maximum_growth,\n                                  nutrient_half_saturation,\n                                  phyto_base_mortality_rate,\n                                  j)\n\n    peak, winter, average, peak_timing, die_off_time = extract_observables(P, times)\n\n    return [peak, winter, average, peak_timing, die_off_time], P\nend\n\nfunction extract_observables(P, times)\n    if all(P .> 0) # model failure - including just in case\n        peak = maximum(P)\n        winter = minimum(P)\n        average = mean(P)\n\n        peak_timing = times[findmax(P)[2]]\n\n        growth_rate = diff(P)[546:end]\n\n        die_off_time = times[545 + findmin(growth_rate)[2]]\n\n        return peak, winter, average, peak_timing./day, die_off_time./day\n    else\n        return NaN, NaN, NaN, NaN, NaN\n    end\nend","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"extract_observables (generic function with 1 method)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Generate the \"truth\" data (normally you would load observations etc here)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Γ = Diagonal([0.001, 0.0001, 0.002, 5., 5.])\n\nnoise_dist = MvNormal(zeros(5), Γ)\n\ntruth = (0.15/day, 0.7/day, 2.4, 0.01/day)\nobs, P₀ = G(truth, 1)\n\ny = obs .+ rand(noise_dist)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"5-element Vector{Float64}:\n   0.24901186510494622\n   0.02480320482190805\n   0.098481775669686\n 405.69519575795607\n 691.9677729230161","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Solve the inverse problem and record all of the results for plotting purposes","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"prior_u1 = constrained_gaussian(\"initial_photosynthetic_slope\", 0.1953 / day, 0.05 / day, 0, Inf)\nprior_u2 = constrained_gaussian(\"base_maximum_growth\", 0.6989 / day, 0.1/ day, 0, Inf)\nprior_u3 = constrained_gaussian(\"nutrient_half_saturation\", 2.3868, 0.5, 0, Inf)\nprior_u4 = constrained_gaussian(\"phyto_base_mortality_rate\", 0.0101 / day, 0.01 / day, 0, Inf)\n\nprior = combine_distributions([prior_u1, prior_u2, prior_u3, prior_u4])\n\nN_ensemble = 8\nN_iterations = 5\n\ninitial_ensemble = construct_initial_ensemble(rng, prior, N_ensemble)\n\nensemble_kalman_process = EnsembleKalmanProcess(initial_ensemble, y, Γ, Inversion(); rng, failure_handler_method = SampleSuccGauss())\n\nP = zeros(1093, N_ensemble, N_iterations) # recording all of the results for plotting only (not essential)\n\nfor i in 1:N_iterations\n    @info \"Iteration: $i\"\n    params_i = get_ϕ_final(prior, ensemble_kalman_process)\n\n    G_ens = zeros(5, N_ensemble)\n\n    Threads.@threads for j in 1:N_ensemble\n        G_ens[:, j], P[:, j, i] = G(params_i[:, j], j)\n    end\n\n    update_ensemble!(ensemble_kalman_process, G_ens)\nend\n\nfinal_ensemble = get_ϕ_final(prior, ensemble_kalman_process)","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"4×8 Matrix{Float64}:\n 1.78494e-6  1.44593e-6  1.62151e-6  1.58519e-6  1.64666e-6  1.80067e-6  1.71939e-6  1.80847e-6\n 5.79118e-6  6.40093e-6  6.84088e-6  7.15134e-6  5.75151e-6  7.25738e-6  6.39858e-6  6.89559e-6\n 2.84031     1.74903     2.93466     2.64571     2.06966     2.95626     2.84412     3.32286\n 1.81234e-7  5.45445e-8  9.39847e-8  6.5559e-8   1.57246e-7  1.38039e-7  9.46257e-8  1.63956e-7","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"Plot the results","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"fig = Figure()\n\nn = Observable(1)\n\ntitle = @lift string(\"Generation: \", $n)\n\nP_plts = [@lift P[:, j, $n] for j in 1:N_ensemble]\n\nfig = Figure(size = (1200, 800));\n\nax = Axis(fig[1, 1], xlabel = \"Day of year\", ylabel = \"Phytoplankton concentration (mmol/m³)\"; title)\n\n[lines!(ax, [1:8hours:365days-16hours;]./day, P_plts[j], color = :black, alpha = 0.2) for j in 1:N_ensemble]\n\nlines!(ax, [1:8hours:365days-16hours;]./day, P₀, color = :black)\n\nrecord(fig, \"data_assimilation.mp4\", 1:size(P, 3); framerate = 2) do i; n[] = i; end","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"(Image: )","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"","category":"page"},{"location":"generated/data_assimilation/","page":"Data assimilation","title":"Data assimilation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"appendix/function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"appendix/function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"visualization/#Visualize-output","page":"Visualization","title":"Visualize output","text":"","category":"section"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"In the examples we use Makie.jl for plotting.","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"Makie comes with a few backends. In the documented examples we use CairoMakie since this backend works well on headless devices, that is, devices without monitor. Because the documentation is automatically built via GitHub actions the CairoMakie backend is necessary. However, users that want to run the examples on devices with a monitor might want to change to GLMakie that displays figures in an interactive window. To do that you need to install GLMakie, e.g.,","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"using Pkg\npkg\"add GLMakie\"","category":"page"},{"location":"visualization/","page":"Visualization","title":"Visualization","text":"and replace using CairoMakie with using GLMakie.","category":"page"},{"location":"model_components/biogeochemical/NPZ/#NPZD","page":"NPZD","title":"Nutrient Phytoplankton Zooplankton Detritus (NPZD) model","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"The provided NPZD model is the low complexity model of Kuhn et al. (2015).","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"<img src=\"../npzd.svg\"  alt=\"Diagram of NPZD formulation\" style=\"max-width: calc(100% - 20px);\">","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Model-equations","page":"NPZD","title":"Model equations","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Ppartial t = mu_textmaxfracNk_N + Nfracalpha PARsqrtmu_textmax^2 + alpha^2PAR^2P - g_textmaxfracP^2k_P^2 + P^2Z-(l_PN+l_PD)P","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Zpartial t = beta g_textmaxfracP^2k_P^2 + P^2Z - (l_ZN + l_ZDZ)Z","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Dpartial t = (1 - beta) g_textmaxfracP^2k_P^2 + P^2Z + l_ZDZ^2 + l_PDP - r_DND","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"fracpartial Npartial t = - mu_textmaxfracNk_N + Nfracalpha PARsqrtmu_textmax^2 + alpha^2PAR^2P + l_PNP + l_ZNZ + r_DND","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Here mu_textmax = mu_0Q_10(T) and l_XY = l_XY0 Q_10(T) where Q_10(T) = 188^T10.","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Additionally, the phytoplankton and detritus sink at a constant rate.","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Parameter-variable-names","page":"NPZD","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Symbol Variable name Units\nalpha initial_photosynthetic_slope 1 / (W / m² / s)\nmu_0 base_maximum_growth 1 / s\nk_N nutrient_half_saturation mmol N / m³\nl_PN0 base_respiration_rate 1 / s\nl_PD0 phyto_base_mortality_rate 1 / s\ng_textmax maximum_grazing_rate 1 / s\nk_P grazing_half_saturation mmol N / m³\nbeta assimulation_efficiency -\nl_ZN base_excretion_rate 1 / s\nl_ZD zoo_base_mortality_rate 1 / s\nr_DN remineralization_rate 1 / s","category":"page"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"All default parameter values are given in Parameters.","category":"page"},{"location":"model_components/biogeochemical/NPZ/#Model-conservation","page":"NPZD","title":"Model conservation","text":"","category":"section"},{"location":"model_components/biogeochemical/NPZ/","page":"NPZD","title":"NPZD","text":"Nitrogen is conserved in the evolution of this model (excluding external sources and sinking), i.e. fracpartial Ppartial t + fracpartial Zpartial t + fracpartial Dpartial t + fracpartial Npartial t = 0.","category":"page"},{"location":"model_components/individuals/#individuals","page":"Overview","title":"Individuals","text":"","category":"section"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"The effects of individuals can be modelled in OceanBioME. We have implemented this through custom dynamics in the Lagrangian Particle tracking feature of Oceananigans. We have extended these functionalities to make it easier to implement \"active\" particles which interact with the tracers. We have then implemented a model of sugar kelp which can be followed as an example of using this functionality.","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"To setup particles first create a particle biogeochemistry, e.g.:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"\nstruct GrowingParticles{FT}\n    nutrients_half_saturation :: FT\nend","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"We then need to add some methods to tell OceanBioME what properties this particle has, and what tracers it interacts with:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"\nimport OceanBioME.Particles: required_particle_fields, required_tracers, coupled_tracers\n\nrequired_particle_fields(::GrowingParticles) = (:S, )\nrequired_tracers(::GrowingParticles) = (:N, )\ncoupled_tracers(::GrowingParticles) = (:N, )\n","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"So our model is going to track the Size of the particles and take up Nutrients.  Now we need to how this growth happens.  The forcing functions should be of the form (particles::ParticleBiogeochemistry)(::Val{:PROPERTY}, t, required_particle_fields..., required_tracers...), so in this example:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"(p::GrowingParticles)(::Val{:S}, t, S, N) = N / (N + p.nutrient_half_saturation)\n(p::GrowingParticles)(::Val{:N}, t, S, N) = - N / (N + p.nutrient_half_saturation)","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"We can then create an instance of this particle model using BiogeochemicalParticles, and set their initial position and size:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"using OceanBioME, Oceananigans\n\nLx, Ly, Lz = 100, 100, 100\ngrid = RectilinearGrid(; size = (8, 8, 8), extent = (Lx, Ly, Lz))\n\nparticles = BiogeochemicalParticles(10; grid, biogeochemistry = GrowingParticles(0.5))\n\nset!(particles, S = 0.1, x = rand(10) * Lx, y = rand(10) * Ly, z = rand(10) * Lz)","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"We can then put these into a compatible biogeochemical model, for example:","category":"page"},{"location":"model_components/individuals/","page":"Overview","title":"Overview","text":"\nbiogeochemistry = NPZD(; grid, particles)","category":"page"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/#NutrientPhytoplanktonZooplanktonDetritus-default-parameters","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus default parameters","text":"","category":"section"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus","text":"Name Value\ninitial_photosynthetic_slope 2.2604166666666667e-6\nbase_maximum_growth 8.08912037037037e-6\nnutrient_half_saturation 2.3868\nbase_respiration_rate 7.638888888888889e-7\nphyto_base_mortality_rate 1.1689814814814814e-7\nmaximum_grazing_rate 2.4909722222222224e-5\ngrazing_half_saturation 0.5573\nassimulation_efficiency 0.9116\nbase_excretion_rate 1.1805555555555556e-7\nzoo_base_mortality_rate 3.929398148148148e-6\nremineralization_rate 1.4039351851851852e-6\nP sinking speed 1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/NutrientPhytoplanktonZooplanktonDetritus_parameters/","page":"NutrientPhytoplanktonZooplanktonDetritus","title":"NutrientPhytoplanktonZooplanktonDetritus","text":"├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-2.95255e-6, min=-2.95255e-6, mean=-2.95255e-6| |D sinking speed|1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU ├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-3.1816e-5, min=-3.1816e-5, mean=-3.1816e-5|","category":"page"},{"location":"model_components/light/#light","page":"Light attenuation models","title":"Light attenuation models","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Nearly all BGC models require some model of the attenuation of PAR through the water. Usually this depends on the concentration of chlorophyll in the water (in phytoplankton), and may depend on the concentration of coloured dissolved organic matter or particulates.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"We have two models implemented, a two band model by Karleskind et al. (2011), and a more generic \"multi band\" model which can have the PAR split into arbitary many wavelength bands, but default to the widely used three band model by Morel (1988). As the light level is diagnostic of the phytoplankton concentration these models are implemented with the light level as various auxiliary fields which are updated within the biogeochemical model.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Models requiring light attenuation models will set these up automatically, for example LOBSTER sets light_attenuation_model = TwoBandPhotosyntheticallyActiveRadiation(). You may choose others. Additionally, you can pass the surface PAR as a function of horizontal position and time. The default for LOBSTER is (x, y, t) -> 100*max(0.0, cos(t*π/(12hours))).","category":"page"},{"location":"model_components/light/#The-multi-band-model","page":"Light attenuation models","title":"The multi band model","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"The surface intensity is split into multiple bands (usually with equal weight, but users may specify custom weights), and the attenuation of each band (i) is computed from the radiative transfer equation:","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"fracpartial PAR^ipartial z = PAR^i (k^w(i) + chi(i)Chl^e(i))","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"where Chl is the concentration of chlorophyll, k^w(i) is the band specific water attenuation coefficient, chi(i) the chlorophyll attenuation coefficient, and e(i) the chlorophyll exponent.","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"The water concentration of chlorophyll is returned by a function chlorophyll with arguments biogeochemistry and model. For the LOBSTER model this returns a constant ratio of the phytoplankton concentration, but may be different for other models.","category":"page"},{"location":"model_components/light/#The-two-band-model","page":"Light attenuation models","title":"The two band model","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Light attenuation is calculated by integrating attenuation (from the surface). The PAR is considered as two components attenuated at different rates. At depth z the total PAR is given by:","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"PAR = fracPAR_02 leftexpleft(k_rz + chi_rint_z=0^z Chl_r dzright) + expleft(k_bz + chi_bint_z=0^z Chl_b dzright)right","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"where PAR_0 is the surface value, k_r and k_b are the red and blue attenuation coefficients of water, chi_r and chi_b are the red and blue chlorophyll attenuation coefficients, and Chl_r and Chl_b are the red and blue chlorophyll pigment concentrations. The chlorophyll pigment concentration is derived from the phytoplankton concentration where it is assumed that the pigment concentration is given by:","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Chl = PR_ChlP","category":"page"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"where the ratio is constant and found in Parameters. The red and blue pigment concentrations are then found as Chl_r = left(fracChlr_textpigright)^e_r and Chl_b = left(fracChlr_textpigright)^e_b. ","category":"page"},{"location":"model_components/light/#Parameter-variable-names","page":"Light attenuation models","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/light/","page":"Light attenuation models","title":"Light attenuation models","text":"Symbol Variable name Units\nk_r water_red_attenuation 1 / m\nk_b water_blue_attenuation 1 / m\nchi_r chlorophyll_red_attenuation 1 / m / (mg Chl / m³) ^ e_r\nchi_b chlorophyll_blue_attenuation 1 / m / (mg Chl / m³) ^ e_b\ne_r chlorophyll_red_exponent -\ne_b chlorophyll_blue_exponent -\nr_textpig pigment_ratio -\nR_ChlP phytoplankton_chlorophyll_ratio mg Chl / mmol N","category":"page"},{"location":"model_components/individuals/slatissima/#sugar-kelp","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar kelp (Saccharina latissima) individuals","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"We have implemented a model of sugar kelp growth within this spatially infinitesimal Lagrangian particles framework originally based on the model of Broch and Slagstad (2012) and updated by Broch et al. (2013), Fossberg et al. (2018), and Broch et al. (2019). This is the same model passively forced by Strong-Wright and Taylor (2022).","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The model tracks three variables, the frond area, A (dm²), carbon reserve, C (gC / gSW), and nitrate reserve, N (gN / gSW). The growth depends on the nitrate (and optionally ammonia) availability in the water, the temperature, and light availability. The minimum required coupling is with nitrates so the model can be coupled with an NPZD model, but can optionally uptake ammonia, DIC (CO₂), oxygen, and release dissolved organic matter (from exudation) and large detritus.  ","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Results could look something like this (from Strong-Wright and Taylor (2022)): (Image: Example A, N, and C profiles from [StrongWright2022](@citet))","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"You can access the model biogeochemistry by setting up SugarKelp, i.e.:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"using OceanBioME\n\nkelp_bgc = SugarKelp()\n\n# output\nSugarKelp{Float64} biogeochemistry (Broch & Slagstad, 2012) tracking the `N`itrogen and `C`arbon in a frond of `A`rea","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"which can be put into BiogeochemicalParticles, or you can directly manifest particles:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"using OceanBioME, Oceananigans\n\ngrid = RectilinearGrid(size = (1, 1, 1), extent = (1, 1, 1));\nparticles = SugarKelpParticles(10; grid)\n\n# output\n10 BiogeochemicalParticles with SugarKelp{Float64} biogeochemistry:\n├── fields: (:A, :N, :C)\n└── coupled tracers: (:NO₃, :NH₄, :DIC, :O₂, :DOC, :DON, :bPOC, :bPON)\n","category":"page"},{"location":"model_components/individuals/slatissima/#Model-equations","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Model equations","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"As per Broch and Slagstad (2012) this model variables evolve as:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"beginalign\nfracdAdt  = left(mu - nuright)A \nfracdNdt  = J - mu(N + N_textstruct) \nfracdCdt  = P(1 - E) - R - mu(C + C_textstruct)\nendalign","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The apical frond loss given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"nu = frac10^-6exp(varepsilon A)1 + 10^-6(exp(varepsilon A) - 1)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The growth given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu = f_textareaf_textseasonalf_texttempminleft(mu_c max(mu_NO_3 mu_NH_4)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"beginalign\nf_textarea  = m_1exp(-(AA_0)^2) + m_2 \nf_textseasonal  = a_1(1 + textsgn(lambda(n))lambda(n)^12) + a_2 \nf_texttemp  = left beginarrayll\n                      008T + 02  -18leq T  10 \n                      1            10 leq T leq 15 \n                      194 - T4   15  T leq 19 \n                      0            T  19\n                   endarray right\nendalign","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where n is the day of the year, lambda is the normalised day length change, and T is the temperature in degrees centigrade. The limiting rates (mu_c, mu_NO_3, mu_NH_4) depend on the availability of carbon giving:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_c = 1 - fracC_textminC","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and on the available nitrogen which is either limited by the instantaneous uptake of ammonia, or the nitrogen reserve. To find these limits J, the nutrient uptake, must first be found (Fossberg et al., 2018). The uptake is calculated by first finding the NO_3 uptake rate:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"J_NO_3 = J_NO_3text maxf_textcurrfracN_textmax - NN_textmax - N_textminfracNO_3k_NO_3 + NO_3","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where f_curr = c_1(1 - exp(-u  c_2)) + c_3 (Broch et al., 2019) where u is the relative current speed. We then calculate the potential ammonia uptake:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"tildeJ_NH_4 = J_NH_4text maxf_textcurrfracNH_4k_NH_4 + NH_4","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"This results in a theoretical instantaneous area increase rate of:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_NH_4 = frac1N_textmin + N_textstructfractildeJ_NH_4k_A","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"or growth from reserves of:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"mu_NO_3 = 1 - fracN_textminN","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The actual resulting ammonia uptake is then:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"J_NH_4 = minleft(tildeJ_NH_4 mu k_A (N_textmin + N_textstruct)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and the total uptake J = fracJ_NH_4 + J_NO_3k_A.","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The production of carbon from photosynthesis is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P = P_Sleft1 - expleft(fracalpha PARP_Sright)rightexpleft(fracbeta PARP_Sright)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where PAR is the photosynthetically available radiation and","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_S = fracalpha I_textsatln(1 + alphabeta)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"alpha is a constant but beta depends on the maximum photosynthetic rate which is defined by both:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_textmax = fracalpha I_textsatln(1 + alphabeta)left(fracalphaalpha + betaright)left(fracbetaalpha + betaright) ^ betaalpha","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"P_textmax = fracP_1expleft(fracT_APT_P1 - fracT_APTright)1 + expleft(fracT_APLT - fracT_APLT_PLright) + expleft(fracT_APHT - fracT_APHT_PHright)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"where T is the temperature in kelvin and the T_X are Arrhenius temperature constants. We solve these iteratively to find beta.","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"The exudation fraction is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"E = 1 - expleft(gamma(C_min - C)right)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"As per Broch et al. (2013) R, the respiration rate, is given by:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"R = leftR_Aleft(fracmumu_textmax + fracJJ_textmaxright) + R_Brightexpleft(fracT_ARRT_1 - fracT_ARRTright)","category":"page"},{"location":"model_components/individuals/slatissima/#Parameter-variable-names","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Symbol Variable name Units\nA_0 growth_rate_adjustment 1 / dm²\nalpha photosynthetic_efficiency gC / dm² / s / einstein\nC_textmin minimum_carbon_reserve gC / gSW\nC_textstruct structural_carbon gC / gSW\ngamma exudation gC / g\nvarepsilon erosion 1 / dm²\nI_textsat saturation_irradiance einstein\nk_A structural_dry_weight_per_area g / dm²\nk_dw structural_dry_to_wet_weight -\nk_C carbon_reserve_per_carbon g / gC\nk_N nitrogen_reserve_per_nitrogen g / gN\nN_textmin minimum_nitrogen_reserve gN / gSW\nN_textmax maximum_nitrogen_reserve gN / gSW\nm_2 growth_adjustment_2 -\nm_1 growth_adjustment_1 -\nmu_textmax maximum_specific_growth_rate 1 / s\nN_textstruct structural_nitrogen gN / gSW\nP_1 photosynthesis_at_ref_temp_1 gC / dm² / s\nP_2 photosynthesis_at_ref_temp_2 gC / dm² / s\nT_P1 photosynthesis_ref_temp_1 °K\nT_P2 photosynthesis_ref_temp_2 °K\na_1 photoperiod_1 -\na_2 photoperiod_2 -\nR_1 respiration_at_ref_temp_1 gC / dm² / s\nR_2 respiration_at_ref_temp_2 gC / dm² / s\nT_R1 respiration_ref_temp_1 °K\nT_R2 respiration_ref_temp_2 °K\nT_AP photosynthesis_arrhenius_temp °K\nT_PL photosynthesis_low_temp °K\nT_PH photosynthesis_high_temp °K\nT_APL photosynthesis_high_arrhenius_temp °K\nT_APH photosynthesis_low_arrhenius_temp °K\nT_ARR respiration_arrhenius_temp °K\nu_0p65 current_speed_for_0p65_uptake m / s\nk_NO_3 nitrate_half_saturation mmol N / m³\nk_NH_4 ammonia_half_saturation mmol N / m³\nJ_NO_3text max maximum_nitrate_uptake gN / dm² / s\nJ_NH_4text max maximum_ammonia_uptake gN / dm² / s\nc_1 current_1 -\nc_2 current_2 1 / m / s\nc_3 current_3 -\nR_A respiration_reference_A gC / dm² / s\nR_B respiration_reference_B gC / dm² / s\n- exudation_redfield_ratio mmol C / mmol N","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"All default parameter values are given in Parameters.","category":"page"},{"location":"model_components/individuals/slatissima/#Model-conservations","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Model conservations","text":"","category":"section"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"Total nitrogen (and carbon where appropriate) are conserved between the individuals and biogeochemistry. The total nitrogen in each individual is:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"N_texttotal = Ak_A(N + N_textstruct)","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"and carbon:","category":"page"},{"location":"model_components/individuals/slatissima/","page":"Sugar Kelp (Broch and Slagstad 2012 ++)","title":"Sugar Kelp (Broch and Slagstad 2012 ++)","text":"C_texttotal = Ak_A(C + C_textstruct)","category":"page"},{"location":"model_components/sediments/#sediment","page":"Overview","title":"Sediment","text":"","category":"section"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"Sediment models can be added to biogeochemical models and evolve their own biogeochemistry. They may have fields which can be prognostically integrated by the timestepper, and can store the value of tracers in the fluid domain as tracked_fields (for example sediments). The tracked_fields may be reqired_tracers, or can enter the sediment model as sinking_fluxes where the tracked_field value will be:","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"-wfracpartal Cpartial z","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"struct BiogeochemicalSediment{BC, TS, CL, GR, SF, TF, BI} <: AbstractModel{TS}\n    biogeochemistry :: BC\n        timestepper :: TS\n              clock :: CL\n               grid :: GR\n             fields :: SF\n     tracked_fields :: TF\n     bottom_indices :: BI\nend","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"Please see the InstantRemineralisationSediment code as an example of how to implement a simple sediment biochemistry.","category":"page"},{"location":"model_components/sediments/","page":"Overview","title":"Overview","text":"NB: BiogeochemicalSediment are currently only valid for flat bottom grids, or grids with flat cell bottoms (i.e. PartialCellBottom or GridFittedBottom), and will not be correct for future Oceananigans immersed boundaries such as cut-cell grids.","category":"page"},{"location":"generated/LOBSTER_parameters/#LOBSTER-default-parameters","page":"LOBSTER","title":"LOBSTER default parameters","text":"","category":"section"},{"location":"generated/LOBSTER_parameters/","page":"LOBSTER","title":"LOBSTER","text":"Name Value\nphytoplankton_preference 0.5\nmaximum_grazing_rate 9.26e-6\ngrazing_half_saturation 1.0\nlight_half_saturation 33.0\nnitrate_ammonia_inhibition 3.0\nnitrate_half_saturation 0.7\nammonia_half_saturation 0.001\nmaximum_phytoplankton_growthrate 1.21e-5\nzooplankton_assimilation_fraction 0.7\nzooplankton_mortality 2.31e-6\nzooplankton_excretion_rate 5.8e-7\nphytoplankton_mortality 5.8e-7\nsmall_detritus_remineralisation_rate 5.88e-7\nlarge_detritus_remineralisation_rate 5.88e-7\nphytoplankton_exudation_fraction 0.05\nnitrification_rate 5.8e-7\nammonia_fraction_of_exudate 0.75\nammonia_fraction_of_excriment 0.5\nammonia_fraction_of_detritus 0.0\nphytoplankton_redfield 6.56\norganic_redfield 6.56\nphytoplankton_chlorophyll_ratio 1.31\norganic_carbon_calcate_ratio 0.1\nrespiration_oxygen_nitrogen_ratio 10.75\nnitrification_oxygen_nitrogen_ratio 2.0\nslow_sinking_mortality_fraction 0.5\nfast_sinking_mortality_fraction 0.5\ndissolved_organic_breakdown_rate 3.86e-7\nzooplankton_calcite_dissolution 0.3\nsPOM sinking speed 1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/LOBSTER_parameters/","page":"LOBSTER","title":"LOBSTER","text":"├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-3.47e-5, min=-3.47e-5, mean=-3.47e-5| |bPOM sinking speed|1×1×1 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU ├── grid: 1×1×1 RectilinearGrid{Float64, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat, Oceananigans.Grids.Flat} on Oceananigans.Architectures.CPU with 0×0×0 halo ├── boundary conditions: FieldBoundaryConditions │   └── west: Nothing, east: Nothing, south: Nothing, north: Nothing, bottom: Nothing, top: Nothing, immersed: ZeroFlux └── data: 1×1×1 OffsetArray(::Array{Float64, 3}, 1:1, 1:1, 1:1) with eltype Float64 with indices 1:1×1:1×1:1     └── max=-0.00231481, min=-0.00231481, mean=-0.00231481|","category":"page"},{"location":"model_components/air-sea-gas/#air-sea-gas","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Air-sea gas transfer is typically parameterised as a function of temperature (T) and wind speed (u_10), and the concentration of the gas in the air (C_a) and in the surface water (C_w) in the form:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"F = k(u_10 T)(C_w - C_a)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where k is the gas transfer velocity.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Our implementation is intended to be generic for any gas, so you can specify air_concentration, water_concentration, transfer_velocity, and wind_speed as any function in GasExchange, but we also provide constructors and default values for carbon dioxide and oxygen. ","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"To setup carbon dioxide and/or oxygen boundary conditions you simply build the condition and then specify it in the model:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"using OceanBioME\nCO₂_flux = CarbonDioxideGasExchangeBoundaryCondition()\nO₂_flux  = OxygenGasExchangeBoundaryCondition()\nusing Oceananigans\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\nmodel = NonhydrostaticModel(; grid,\n                              biogeochemistry = LOBSTER(; grid, carbonates = true, oxygen = true),\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), \n                                                      O₂ = FieldBoundaryConditions(top =  O₂_flux)),\n                              tracers = (:T, :S))","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"note: Note\nAll gas exchange models require temperature (T) to be present in the model, and carbon dioxide requires sailinity (S), total inorganic carbon (DIC), and alkalinity (Alk), and optionally can take silicate and phosphate where there names are specified in the keyword argument silicate_and_phosphate_names","category":"page"},{"location":"model_components/air-sea-gas/#Model-equations","page":"Air-sea gas exchange","title":"Model equations","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"### Gas transfer velocity","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The default gas transfer velocity (ScaledTransferVelocity) returns a velocity in the form:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"k(u_10 T) = cu_10^2left(fracSc(T)660right)^-12","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where c is a coefficient (coeff) which typically is wind product specific with default value 0266 cm/hour from Ho et al. (2006), and Sc is gas specific the temperature dependent Schmidt number (the dimensionless ratio of momentum and mass diffusivity) specified as schmidt_number which can be any function of temperature. The default parameterisations is the 4th order polynomial formulation of Wanninkhof (2014).","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"Currently, the parameters for CO₂ and oxygen are included, but it would be very straightforward to add the parameters given in the original publication for other gases (e.g. inert tracers of other nutrients such as N₂).","category":"page"},{"location":"model_components/air-sea-gas/#Carbon-dioxide-partial-pressure","page":"Air-sea gas exchange","title":"Carbon dioxide partial pressure","text":"","category":"section"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"For most gasses the water concentration C_w is simply taken directly from the biogeochemical model or another tracer (in which case water_concentration should be set to TracerConcentration(:tracer_name)), but for carbon dioxide the fugacity (fCO_2) must be derived from the dissolved inorganic carbon (DIC) and Alkalinity by a CarbonChemistry model (please see the docs for CarbonChemistry), and used to calculate the partial pressure (pCO_2).","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The default parameterisation for the partial pressure (CarbonDioxideConcentration) is given by Dickson et al. (2007) and defines the partial pressure to be the mole fraction x(CO_2) multiplied by the pressure, P, related to the fugacity by:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"fCO_2 = x(CO_2)Pexpleft(frac1RTint_0^Pleft(V(CO_2)-fracRTPright)dPright)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"The volume (V) is related to the gas pressure by the virial expression:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"fracPV(CO_2)RTapprox1+fracB(x T)V(CO_2)+mathcalO(V(CO_2)^-2)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"and the first virial coefficient B for carbon dioxide in air can be approximated as:","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"B_CO_2-textair approx B_CO_2(T) + 2x(CO_2)delta_CO_2-textair(T)","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"where delta is the cross virial coefficient.","category":"page"},{"location":"model_components/air-sea-gas/","page":"Air-sea gas exchange","title":"Air-sea gas exchange","text":"B_CO_2 and delta_CO_2-textair are parameterised by Weiss (1974) and reccomended in Dickson et al. (2007) as fourth and first order polynomials respectively.","category":"page"},{"location":"model_components/biogeochemical/#bgc_models","page":"Overview","title":"Biogeochemical Models","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Biogeochemical (BGC) models can be used within the Oceananigans biogeochemistry framework or as stand alone box models. All BGC models should be setup in the same way so that they can easily be substituted for each other. You can easily implement a different model (or a variation on a current model) by following the guide here.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"For details of the BGC models currently implemented please see the following pages.","category":"page"},{"location":"model_components/biogeochemical/#Oceananigans-setup","page":"Overview","title":"Oceananigans setup","text":"","category":"section"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"At the simplest level, all that is required to setup an existing OceanBioME BGC model is to pass it to the Oceananigans model setup:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"model = NonhydrostaticModel(; grid,\n                              ...,\n                              biogeochemistry = MODEL_NAME(; grid))","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"where MODEL_NAME is the name of the model. You may also need to pass additional parameters like:","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"MODEL_NAME(; grid, growth_rate = 10.0)","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"The above will set up the required tracers and auxiliary fields, and you may also set boundary conditions or additional forcing through the usual Oceananigans setup.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Models usually have a default light attenuation model specified, these may be substituted easily by passing different models as parameters as above.","category":"page"},{"location":"model_components/biogeochemical/","page":"Overview","title":"Overview","text":"Our models are implemented in an abstract framework Biogeochemistry which contains underlying_biogeochemistry, light_attenuation, sediment, and modifiers. This is automatically set up for existing BGC models, but may also be used to couple any BGC model with light attenuation and sediments. See the implementation page for some more information on how to couple other models.","category":"page"},{"location":"quick_start/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides biogeochemical models to plug into Oceananigans, for example this code will run one month of a single column, 7 variable (P, Z, sPOM, bPOM, DOM, NO₃, NH₄) biogeochemical situation with constant forcing.","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"First we need to check we have the required dependencies:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using Pkg\nPkg.add([\"OceanBioME\", \"Oceananigans\"])","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(size = 10, extent = 200meters, topology = (Flat, Flat, Bounded))\n\nmodel = NonhydrostaticModel(; grid, biogeochemistry = LOBSTER(; grid))\n\nset!(model, P = 0.001, Z = 0.001, NO₃ = 1, NH₄ = 0.01)\n\nsimulation = Simulation(model, Δt = 1minute, stop_time = 30days)\n\nsimulation.output_writers[:profiles] = JLD2Writer(model, model.tracers,\n                                                  filename = \"quickstart.jld2\",\n                                                  schedule = TimeInterval(0.5days),\n                                                  overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"We can then visualize it, first check the required packages are installed:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"Pkg.add(\"CairoMakie\")","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"and then load the data and plot:","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"using CairoMakie\n\nphytoplankton = FieldTimeSeries(\"quickstart.jld2\", \"P\")\nnitrates = FieldTimeSeries(\"quickstart.jld2\", \"NO₃\")\n\n_, _, z = nodes(nitrates)\n\nfig = Figure()\n\naxis_kwargs = (xlabel = \"Day\", ylabel = \"Depth (m)\")\nax1 = Axis(fig[1, 1]; title = \"Phytoplankton (mmol N/m³)\", axis_kwargs...)\nax2 = Axis(fig[1, 2]; title = \"Nitrate (mmol N/m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, phytoplankton.times / day, z, interior(phytoplankton , 1, 1, :, :)')\nhm2 = heatmap!(ax2,      nitrates.times / day, z, interior(nitrates, 1, 1, :, :)')\n\nfig","category":"page"},{"location":"quick_start/","page":"Quick start","title":"Quick start","text":"OceanBioME provides the tools to add to this, for example adding a carbonate chemistry model, or sediment at the bottom of the model. Please have a look at the rest of the examples to explore these options.","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/#PISCES","page":"PISCES","title":"PISCES (Pelagic Interactions Scheme for Carbon and Ecosystem Studies) model","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"PISCES (PEES-kays, /ˈpiːs.keːs/) is a high complexity ocean biogeochemical model with 24 prognostic tracers.  It has previously been used with the NEMO transport model in the IPSL-CM5A-LR and CNRM-CM5 CMIP-5 earth system models (ESM). This is an early attempt to implement PISCES for use as a test bed in a more flexible environment to allow rapid prototyping and testing of new parametrisations as well as use in idealised experiments, additionally we want to be able to replicate the dynamics of the operational model for possible future use in a Julia based ESM as the ecosystem matures.","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"An overview of the model structure is available from the PISCES community website:","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"(Image: PISCES model structure)","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"The default configuration of PISCES in OceanBioME is the operational/standard version with 24 tracers and can be set up by writing:","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"using OceanBioME, Oceananigans\n\ngrid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1));\n\nbiogeochemistry = PISCES(; grid)\n\nshow(biogeochemistry)\n\nOceananigans.Biogeochemistry.required_biogeochemical_tracers(biogeochemistry)\n\n(:P, :PChl, :PFe, :D, :DChl, :DFe, :DSi, :Z, :M, :DOC, :POC, :GOC, :SFe, :BFe, :PSi, :CaCO₃, :NO₃, :NH₄, :PO₄, :Fe, :Si, :DIC, :Alk, :O₂, :T, :S)","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"The parametrisations can easily be switched out when the biogeochemistry is constructed by setting the key word parameter, see the API documentation, although we currently do not have any of the other configurations implemented. Note that PISCES-simple is very similar to LOBSTER if that is what you are looking for.","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"More documentation will follow but for now the equations can be found in Aumont et al. (2015) read along side our notes here.","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/#Model-conservation","page":"PISCES","title":"Model conservation","text":"","category":"section"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"When the permanent scavenging of iron, nitrogen fixation, and particle sinking are turned off, PISCES conserves:","category":"page"},{"location":"model_components/biogeochemical/PISCES/PISCES/","page":"PISCES","title":"PISCES","text":"Carbon: partial_tP + partial_tD + partial_tZ + partial_tM + partial_tDOC + partial_tPOC + partial_tGOC + partial_tDIC + partial_tCaCO_3=0\nIron: partial_tPFe + partial_tDFe + theta^Feleft(partial_tZ + partial_tM + partial_tDOCright) + partial_tSFe + partial_tBFe + partial_tFe=0\nPhosphate: theta^Pleft(partial_tPFe + partial_tDFe + partial_tZ + partial_tM + partial_tDOC + partial_tPOC + partial_tGOCright) + partial_tPO_4=0\nSilicon: partial_tDSi + partial_tPSi + partial_tSi=0\nNitrogen: theta^Nleft(partial_tPFe + partial_tDFe + partial_tZ + partial_tM + partial_tDOC + partial_tPOC + partial_tGOCright) + partial_tNH_4 + partial_tNO_3=0","category":"page"},{"location":"model_components/sediments/simple_multi_g/#multi-g","page":"Simple Multi-G","title":"Simple multi-G","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model, proposed by Soetaert et al. (2000), is a \"G class\" model that evolves carbon and nitrogen in three classes (fast, slow and refectory). The model is also only compatible with the LOBSTER biogeochemical model with carbonate chemistry, oxygen, and variable redfield options on. You also must ensure that the open_bottom option is on for particles to leave the bottom of the domain to the sediment model.","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"It is straightforward to set up:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"using OceanBioME, Oceananigans, OceanBioME.Sediments\n\ngrid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200))\n\nsediment_model = SimpleMultiGSediment(grid)\n\n# output\n`BiogeochemicalSediment` with `Single-layer multi-G sediment model (Float64)` biogeochemsitry\n    Prognostic fields: (:Ns, :Nf, :Nr)\n    Tracked fields: (:NO₃, :NH₄, :O₂, :sPOM, :bPOM)\n    Coupled fields: (:NO₃, :NH₄, :O₂)","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"You may optionally specify the model parameters. This can then be passed in the setup of a BGC model:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"biogeochemistry = LOBSTER(; grid,\n                            carbonates = true, oxygen = true, variable_redfield = true,\n                            open_bottom = true,\n                            sediment_model)","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-equations","page":"Simple Multi-G","title":"Model equations","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model evolved the carbon and nitrogen components of three liability classes: fast, slow, and refractory. Each component is remineralised with first order decay so evolved like:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracdX_idt = F_X_i - lambda_iX_i","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"For the fast and slow classes lambda is a positive, non-zero, rate constant, and for the refractory class it is 0. F_X_i is the flux, and the flux for each class is simply a constant fraction of the total flux:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"F_X_i = f_iF_X","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"The fraction of remineralised sediment (X_textmin = Sigma_ilambda_X_iX_i) that becomes ammonia or nitrate depends on the equilibrium of chemical equations dependent on the bottom water NO_3, NH_4, and O_2 concentrations, as well as the total remineralisation and mean degradation rate. The mean first order degredation rate is given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"k = fraclambda_textfast C_textfast + lambda_textslow C_textslowC_textfast + C_textslow","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"and, based on Soetaert et al. (2000), the fraction nitrified (i.e becoming nitrate rather than ammonia) is given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"lnleft(C_textminp_nitright) = n_A + n_Bln C_textminln O_2 + n_C * ln C_textmin ^ 2 + n_D * ln k ln NH_4 + n_E ln C_textmin + n_F ln C_textmin ln NH_4","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Therefore, the efflux of nitrate and ammonia are given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial NO_3partial t =fracN_textminp_textnitDelta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial NH_4partial t = fracN_textmin(1 - p_textnit)Delta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"where Delta z is the depth of the bottom cell (since X_i is a surface concentration). This mineralisation also consumes oxygen at a rate:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"fracpartial O_2partial t =fracC_textmin(1 - p_textanoxp_textsolid deposition) + N_textminp_textnit ONDelta z","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"where the constants are given by:","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"p_textsolid deposition = s_A w ^s_B","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"with, w = s_CD^s_D where D is the water depth.","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"lnleft(C_textminp_textanoxright) = a_A + a_Bln C_textmin + a_C ln C_textmin ^ 2 + a_D ln k + a_E ln O_2 ln k + a_F ln NO_3 ^2","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"The original model of Soetaert et al. (2000) also includes denitrification terms whereby nitrogen is returned to the water column as dissolved N_2, but we currently do not account for this in order to conserve the nitrogen budget.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Parameter-variable-names","page":"Simple Multi-G","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Symbol Variable name Units\nlambda_textfast fast_decay_rate 1 / s\nlambda_textslow slow_decay_rate 1 / s\nf_textfast fast_fraction -\nf_textslow slow_fraction -\nf_textref refactory_fraction -\nn_i nitrate_oxidation_params -\na_i anoxic_param -\ns_i solid_dep_params -","category":"page"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"All parameters are given in Parameters.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-conservations","page":"Simple Multi-G","title":"Model conservations","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"Nitrogen and carbon is conserved between the model domain and sediment, any nitrogen or carbon not returned to the bottom cell is stored in a sediment field.","category":"page"},{"location":"model_components/sediments/simple_multi_g/#Model-compatibility","page":"Simple Multi-G","title":"Model compatibility","text":"","category":"section"},{"location":"model_components/sediments/simple_multi_g/","page":"Simple Multi-G","title":"Simple Multi-G","text":"This model is currently only compatible with the LOBSTER biogeochemical model.","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#instant_remineralisation","page":"Instant remineralisation","title":"Instant remineralisation","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"This model is similar to that described in Aumont et al. (2015) where the majority of organic matter that sinks to the bottom of the domain is instantly remineralised and returned to a nutrient pool (usually NH_4) in the bottom cell of the domain, and the remainder is permanently stored. ","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-equations","page":"Instant remineralisation","title":"Model equations","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"The burial fraction from Dunne et al. (2007) is given by:","category":"page"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"E = E_0 + E_1left(fracF_OCk_B + F_OCright)^2","category":"page"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"where F_OC is the carbon flux (in this implementation the nitrogen flux multiplied by the Redfield ratio).","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Parameter-variable-names","page":"Instant remineralisation","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"Symbol Variable name Units\nE_0 burial_efficiency_constant1 -\nE_1 burial_efficiency_constant2 -\nk_B burial_efficiency_half_saturation mmol C / m² / s","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-conservations","page":"Instant remineralisation","title":"Model conservations","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"Nitrogen is conserved between the model domain and sediment, any nitrogen not returned to the bottom cell is stored in a sediment field.","category":"page"},{"location":"model_components/sediments/instant_remineralisation/#Model-compatibility","page":"Instant remineralisation","title":"Model compatibility","text":"","category":"section"},{"location":"model_components/sediments/instant_remineralisation/","page":"Instant remineralisation","title":"Instant remineralisation","text":"This model is compatible with all currently implemented models but does not separately store or remineralise carbon.","category":"page"},{"location":"model_components/utils/#utils","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We provide some utilities that may be useful.","category":"page"},{"location":"model_components/utils/#Time-step-adaptation","page":"Utilities","title":"Time step adaptation","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"We have added a few additional utilities which extend the capabilities of Oceananigans' time step wizard. For column models where there is no water velocity we have added functions to calculate the advection timescale from the biogeochemical model defined sinking velocities. This could be used by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2, max_change = 2.0, min_change = 0.5, cell_advection_timescale = column_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Finally, sinking may be more limiting than the normal advective CFL conditions so, we have an additional cell advection timescale defined for 3D models:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"wizard = TimeStepWizard(cfl = 0.6, diffusive_cfl = 0.5, max_change = 1.5, min_change = 0., cell_advection_timescale = sinking_advection_timescale)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"model_components/utils/#Negative-tracer-detection","page":"Utilities","title":"Negative tracer detection","text":"","category":"section"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"As a temporary measure we have implemented a callback to either detect negative tracers and either scale a conserved group, force them back to zero, or throw an error. Please see the numerical implementations' page for details. This can be set up by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ScaleNegativeTracers((:P, :Z, :N))\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"You may also pass a scale factor for each component (e.g. in case they have different redfield ratios):","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ScaleNegativeTracers((:P, :Z, :N); scalefactors = (1, 1, 2))\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"Here you should carefully consider which tracers form a conserved group (if at all). Alternatively, force to zero by:","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"negativity_protection = ZeroNegativeTracers()\nbiogeochemistry = Biogeochemistry(...; modifiers = negativity_protection)","category":"page"},{"location":"model_components/utils/","page":"Utilities","title":"Utilities","text":"The latter optionally takes a named tuple of parameters that may include exclude, which can be a tuple of tracer names (Symbols) which are allowed to be negative.","category":"page"},{"location":"model_components/carbon-chemistry/#carbon-chemistry","page":"Carbon chemistry","title":"Carbon Chemistry","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Our carbon chemistry model follows the best practice described by Dickson et al. (2007), as implemented by e.g. cbsyst (Branson, 2023) and CO2SYS (Humphreys et al., 2022) in Python.","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The carbon chemistry model is primarily used for diagnosing the partial pressure of carbon dioxide in the surface water for gas exchange with the air, but is capable of diagnosing other species such as carbonate concentration, useful in the calculation of calcite dissolution. The model works by computing the pH from the total dissolved inorganic carbon and total alkalinity (and optionally silicate, phosphate, boron, sulfate, and fluoride concentration), along with temperature and salinity, which can then be used to find the concentration of different species. We will first describe how to use the model, followed by the underlying chemistry and parameterisations.","category":"page"},{"location":"model_components/carbon-chemistry/#Using-the-model","page":"Carbon chemistry","title":"Using the model","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"To use the carbon chemistry model it is constructed by simply writing:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"using OceanBioME\n\ncarbon_chemistry = CarbonChemistry()","category":"page"},{"location":"model_components/carbon-chemistry/#Computing-fCO_2-and-pH","page":"Carbon chemistry","title":"Computing fCO_2 and pH","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"To compute the fugacity of carbon dioxide (fCO_2) you call the model with the DIC, Alkalinity, Temperature, and Salinity:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"DIC = 2145.0\nAlk = 2448.0\nT = 25.4\nS = 36.45\ncarbon_chemistry(; DIC, Alk, T, S)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"This is sufficient when computing fCO_2 at the surface, but if we wanted to know fCO_2 at depth where there is higher pressure we can specify the pressure in bar like:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, Alk, T, S, P = 100)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"We may also be interested in the pH so we can request that be outputted:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, Alk, T, S, return_pH = true)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"These function calls assume a constant boron, sulfate, and fluoride ratio relative to the salinity (as described below), but can be specified instead:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, Alk, T, S, boron = 0)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"And the silicate and phosphate concentrations are assumed to be zero but can similarly be specified:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, Alk, T, S, silicate = 2, phosphate = 1)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The same code can also be used to compute fCO_2 when the pH is already known by passing it in the same way:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, pH = 8.1, T, S)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Finally, for slightly improved accuracy you may wish to specify that the seawater density calculation, is an intermediary step in the calculations above, is computed using the full TEOS-10 Feistel (2008) standard by setting this as the density_function when you construct the carbon chemistry model:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"using OceanBioME.Models: teos10_density\ncarbon_chemistry = CarbonChemistry(; density_function = teos10_density)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"But this comes at the cost of significantly increased computational expense and GPU incompatability.","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"During the conversion from practical to absolute salinity units the location can then also be entered for (very slightly, in this example ~10^-4muatm) improved accuracy:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"carbon_chemistry(; DIC, Alk, T, S, lon = -31.52, lat = 33.75)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The default uses the polynomial approximation described in Roquet et al. (2015) as provided by SeawaterPolynomials.jl.","category":"page"},{"location":"model_components/carbon-chemistry/#Computing-the-carbonate-concentration","page":"Carbon chemistry","title":"Computing the carbonate concentration","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"So that this model can be used in calcite dissolution models it can also return the carbonate saturation by calling the function calcite_saturation","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"using OceanBioME.Models.CarbonChemistryModel: calcite_saturation\n\ncalcite_saturation(carbon_chemistry; DIC, Alk, T, S)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"This function takes all of the same arguments (e.g. boron) as carbon_chemistry above.","category":"page"},{"location":"model_components/carbon-chemistry/#Chemistry","page":"Carbon chemistry","title":"Chemistry","text":"","category":"section"},{"location":"model_components/carbon-chemistry/#pH-computation","page":"Carbon chemistry","title":"pH computation","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"When carbon dioxide is dissolved in seawater it dissociates into carbonate and bicarbonate species according to the equilibria:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceCO_2(g) ce= CO_2(aq)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceCO_2(aq) + ceH_2O ce= H_2CO_3(aq)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceCO_2(aq) + H_2Oce= H^+ HCO^-_3","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceHCO^-_3 ce= H^+ + CO^2-_3","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"from which we define the total dissolved inorganic carbon (DIC) to be DIC = ceCO_2(aq) + ceHCO^-_3 + ceCO^2-_3.  The equilibrium constants for these equations are defined as:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_0=fracceCO_2(aq)cepCO_2","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_1=fracceHCO^-_3H^+ceCO_2(aq)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"and","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_2=fracceCO^2-_3H^+ceHCO^-_3","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"These equilibria depend on the total hydrogen ion concentration H^+, which depends on the concentration of acids and buffering of bases.","category":"page"},{"location":"model_components/carbon-chemistry/#Alkalinity:-acid-base-buffering","page":"Carbon chemistry","title":"Alkalinity: acid-base buffering","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Alkalinity is a measure of the buffering capacity of seawater and we can approximate it as:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Alk = ceHCO_3^- + 2ceCO_3^2- + ceB(OH)_4^- + ceOH^- + ceHPO_4^2- + 2cePO_4^3- + ceSiO(OH)_3^- + ceNH_3 + ceHS^- - ceH^+ - ceHSO_4^- - ceHF - ceH_3PO_4 + text minor acids and bases","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"where the \"minor\" species are either in sufficiently low concentrations as to be neglected (sometimes the photphate, silicate and sulfate species can also be neglected), and we shall neglect ceNH_3.","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Each of these acid and base species are also in an equilibrated dissociation state given below.","category":"page"},{"location":"model_components/carbon-chemistry/#Hydrogen-sulfate","page":"Carbon chemistry","title":"Hydrogen sulfate","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Sulfate in the form of hydrogen sulfate dissociates to form sulfate ions in the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceHSO_4^-ce= H^+ + SO_4^2-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with an equilibrium constant given by","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_S=fracceSO_4^2-H^+ceHSO_4^-","category":"page"},{"location":"model_components/carbon-chemistry/#Boric-acid","page":"Carbon chemistry","title":"Boric acid","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Boron in the form of boric acid equilibrates with water in the reaction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceB(OH)_3+H_2Oce= H^+ + B(OH)_4^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with equilibrium constant","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_B=fracceB(OH)_4^-H^+ceB(OH)_3","category":"page"},{"location":"model_components/carbon-chemistry/#Hydrogen-fluoride","page":"Carbon chemistry","title":"Hydrogen fluoride","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Hydrogen fluoride dissociated in the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceHFce= H^+ + F^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with equilibrium constant","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_F=fracceF^-H^+ceHF","category":"page"},{"location":"model_components/carbon-chemistry/#Phosphoric-acid","page":"Carbon chemistry","title":"Phosphoric acid","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Phosphoric acid undergoes a three stage dissociation given by the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceH_3PO_4ce= H^+ + H_2PO_4^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceH_2PO_4^-ce= H^+ + HPO_4^2-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceHPO_4^2-ce= H^+ + PO_4^3-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with equilibrium constants","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_P1 = fracceH^+H_2PO_4^-ceH_3PO_4","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_P2 = fracceH^+HPO_4^2-ceH_2PO_4^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_P3 = fracceH^+PO_4^3-ceHPO_4^2-","category":"page"},{"location":"model_components/carbon-chemistry/#Silicic-acid","page":"Carbon chemistry","title":"Silicic acid","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Silicic acid dissociates in the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceSi(OH)_4ce= H^+ + SiO(OH)_3^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with equilibrium constant","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_Si = fracceH^+SiO(OH)_3^-ceSi(OH)_4","category":"page"},{"location":"model_components/carbon-chemistry/#Water","page":"Carbon chemistry","title":"Water","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Finally, water dissociates in the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceH_2Oce= H^+ + OH^-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"with equilibrium constant","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_w = ceH^+OH^-","category":"page"},{"location":"model_components/carbon-chemistry/#Alkalinity-equilibration","page":"Carbon chemistry","title":"Alkalinity equilibration","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"From these rate constants we can rewrite the total alkalinity (given above) in terms of only the rate constants, total hydrogen ion concentration (ceH^+), the total dissolved inorganic carbon (DIC), boron (textB), phosphate (textP), silicate (textSi), Sulfate (textSulf), and fluorine (textF) content of the water, by rearranging the equations above.  This results in a form of the total alkalinity:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"beginalign\nAlk approx fracDICceH^+K_1ceH^+^2 + K_1ceH^+ + K_1K_2\n    + frac2DICK_1K_2ceH^+^2 + K_1ceH^+ + K_1K_2\n    + fractextB1+ceH^+K_B\n    + fracK_wceH^+\n    + fractextPceH^+K_P1K_P2ceH^+^3+K_P1ceH^+^2+K_P1K_P2ceH^+ + K_P1K_P2K_P3\n    + frac2textPK_P1K_P2K_P3ceH^+^3+K_P1ceH^+^2+K_P1K_P2ceH^+ + K_P1K_P2K_P3\n    + fractextSi1+ceH^+K_Si\n    - fracceH^+1+textSK_S\n    - fractextSulf1+K_SceH^+(1+SK_S)\n    - fractextF1+K_FceH^+\n    - fracceH^+^2ceH^+^3+K_P1ceH^+^2+K_P1K_P2ceH^+ + K_P1K_P2K_P3\nendalign","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"This gives us a second equation from total alkalinity (which we must already know) with one unknown, ceH^+.  Our model solves for ceH^+ using a bisection method to an accuracy of 10^-10, having approximated the equilibrium constants from parametrisations described below. We can then determine the pH as, pH = -log_10(ceH^+).","category":"page"},{"location":"model_components/carbon-chemistry/#Carbon-dioxide","page":"Carbon chemistry","title":"Carbon dioxide","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Now that we know DIC, Alk, and ceH^+ we can return to the equation for total dissolved inorganic carbon to find the concentration of aqueous carbon dioxide","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"CO_2(aq) = fracDICceH^+^2ceH^+^2 + K_1ceH^+ + K_1K_2","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"from which we determine gas phase carbon dioxide concentration as","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"fCO_2 = fracCO_2(aq)K_0","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"in atmospheres.","category":"page"},{"location":"model_components/carbon-chemistry/#Carbonate-concentration-and-calcite-saturation","page":"Carbon chemistry","title":"Carbonate concentration and calcite saturation","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Similarly we can also diagnose the calcite concentration","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"CO_3^2- = fracDICK_1K_2ceH^+(ceH^+ + K_1)+K_1K_2","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"This concentration is important in the dissolution of calcium carbonate which reacts according to the equilibrium","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"ceCaCO_3(aq)ce= Ca^+ + CO_3^2-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"which has an equilibrium constant","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K_SP = ceCa^2+ceCO_3^2-","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The calcite saturation can then be defined as Omega=fracceCO_3^2-ceCO_3 saturation^2- which can be diagnosed as:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Omega = fracceCa^2+ceCO_3^2-K_SP","category":"page"},{"location":"model_components/carbon-chemistry/#Missing-pieces","page":"Carbon chemistry","title":"Missing pieces","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"In most cases the chemistry described above requires information about more elements that is usually available. This means that we must parameterise their concentrations, usually this results in the boron, sulfate, and fluoride concentrations being set as constant ratios of the salinity.  Usually these ratios are:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"beginalign\ntextB = frac000023210811fracS180655\ntextS = frac0149606 fracS180655\ntextF = frac0000067189984 fracS180655\nendalign","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"We use these ratios by default in the model (but they can be changed when calling the models functions described below). Additionally, silicate and phosphate concentrations are often unavailable (both in observations and models), so are by default set to zero and their alkalinity contribution assumed to be small.","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The \"ionic strength\" must also be parameterised for some equilibrium constants and is usually assumed to be:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"Is = frac199241000 - 1005S","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"but these parameters are also variable in the model.","category":"page"},{"location":"model_components/carbon-chemistry/#Model-parameterisation","page":"Carbon chemistry","title":"Model parameterisation","text":"","category":"section"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The chemical system described above has a large number of equilibrium constants, the constants are typically assumed to depend on the temperature, salinity, and pressure (hydrostatic pressure from depth underwater). [//]: # (This sentence is not currently actually true, but will be by the time of PR merge) By default, this model parameterises them based on the \"best practice\" guidelines of Dickson et al. (2007). These parameterisations are:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"using OceanBioME.Models.CarbonChemistryModel: K0, K1, K2, KB, KW, KS, KF, KP1, KP2, KP3, KSi, KSP_calcite, KSP_aragonite\nK0() # Weiss & Price (1980, Mar. Chem., 8, 347-359; Eq 13 with table 6 values)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K1() # Millero (1995, Geochim. Cosmochim. Acta, 59, 664)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K2() # Millero (1995, Geochim. Cosmochim. Acta, 59, 664)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KB() # Dickson (1990, Deep-Sea Res., 37, 755–766)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KW() # Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KS() # Dickson (1990, Chem. Thermodyn., 22, 113–127)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KF() # Dickson and Riley (1979, Mar. Chem., 7, 89–99)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP1() # Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP2() # Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP3() # Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KSi() # Millero (1995, Geochim. Cosmochim. Acta, 59, 661–677)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KSP_calcite() # Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KSP_aragonite() # Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341)","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"The pressure corrections from Millero, F. J. (2007, Chemical Reviews, 107(2), 308–341) are:","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K1().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"K2().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KB().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KW().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KS().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KF().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP1().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP2().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KP3().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KSP_calcite().pressure_correction","category":"page"},{"location":"model_components/carbon-chemistry/","page":"Carbon chemistry","title":"Carbon chemistry","text":"KSP_aragonite().pressure_correction","category":"page"},{"location":"generated/SugarKelp_parameters/#SugarKelp-default-parameters","page":"SugarKelp","title":"SugarKelp default parameters","text":"","category":"section"},{"location":"generated/SugarKelp_parameters/","page":"SugarKelp","title":"SugarKelp","text":"Name Value\ntemperature_limit OceanBioME.Models.SugarKelpModel.LinearOptimalTemperatureRange{Float64}(10.0, 15.0, 0.0847457627118644, -0.25)\ngrowth_rate_adjustment 4.5\nphotosynthetic_efficiency 0.011527777777777776\nminimum_carbon_reserve 0.01\nstructural_carbon 0.2\nexudation 0.5\nerosion_exponent 0.22\nbase_erosion_rate 1.0e-6\nsaturation_irradiance 7.776\nstructural_dry_weight_per_area 0.5\nstructural_dry_to_wet_weight 0.0785\ncarbon_reserve_per_carbon 2.1213\nnitrogen_reserve_per_nitrogen 2.72\nminimum_nitrogen_reserve 0.0126\nmaximum_nitrogen_reserve 0.0216\ngrowth_adjustment_2 0.046799999999999994\ngrowth_adjustment_1 0.16919999999999996\nmaximum_specific_growth_rate 0.18\nstructural_nitrogen 0.0146\nphotosynthesis_at_ref_temp_1 0.02928\nphotosynthesis_at_ref_temp_2 0.0312\nphotosynthesis_ref_temp_1 285.0\nphotosynthesis_ref_temp_2 288.0\nphotoperiod_1 0.85\nphotoperiod_2 0.3\nrespiration_at_ref_temp_1 0.006684\nrespiration_at_ref_temp_2 0.0130296\nrespiration_ref_temp_1 285.0\nrespiration_ref_temp_2 290.0\nphotosynthesis_arrhenius_temp 1737.7267805628196\nphotosynthesis_low_temp 271.0\nphotosynthesis_high_temp 296.0\nphotosynthesis_high_arrhenius_temp 1414.87\nphotosynthesis_low_arrhenius_temp 4547.89\nrespiration_arrhenius_temp 11033.8920579234\ncurrent_speed_for_0p65_uptake 0.03\nnitrate_half_saturation 4.0\nammonia_half_saturation 1.3\nmaximum_nitrate_uptake 0.00672\nmaximum_ammonia_uptake 0.008064\ncurrent_1 0.72\ncurrent_2 0.28\ncurrent_3 0.045\nbase_activity_respiration_rate 0.002664\nbase_basal_respiration_rate 0.0013368\nexudation_redfield_ratio Inf\nadapted_latitude 57.5","category":"page"},{"location":"generated/data_forced/#One-dimensional-column-forced-by-external-data-with-carbonate-chemistry","page":"Data forced column model","title":"One dimensional column forced by external data with carbonate chemistry","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"In this example we setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. This example demonstrates:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"How to setup OceanBioME's biogeochemical models\nHow to load external forcing data\nHow to run with optional tracer sets such as carbonate chemistry\nHow to setup a non-uniform grid for better near surface resolution\nHow to visualise results","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"For this example we use force by mixing layer depth and surface photosynthetically available radiation (PAR) data from the Mercator Ocean model and NASA VIIRS observations.","category":"page"},{"location":"generated/data_forced/#Install-dependencies","page":"Data forced column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, NetCDF, Interpolations, DataDeps, CairoMakie\"","category":"page"},{"location":"generated/data_forced/#Model-setup","page":"Data forced column model","title":"Model setup","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"First load the required packages","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using OceanBioME\nusing Oceananigans, Random, Printf, NetCDF, Interpolations, DataDeps\nusing Oceananigans.Units\nusing Oceananigans.Fields: FunctionField\n\nimport Oceananigans.TurbulenceClosures: maximum_numeric_diffusivity\n\nmaximum_numeric_diffusivity(κ::NamedTuple) = maximum(maximum.(values(κ)))\nmaximum_numeric_diffusivity(κ::FunctionField) = maximum(κ)\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/data_forced/#Load-external-forcing-data","page":"Data forced column model","title":"Load external forcing data","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Loading the forcing data from our online copy","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"dd = DataDep(\n    \"example_data\",\n    \"example data from subpolar re-analysis and observational products\",\n    \"https://github.com/OceanBioME/OceanBioME_example_data/raw/main/subpolar.nc\"\n)\nregister(dd)\nfilename = datadep\"example_data/subpolar.nc\"\ntimes = ncread(filename, \"time\")\ntemp = ncread(filename, \"temp\")\nsalinity = ncread(filename, \"so\")\nmld = ncread(filename, \"mld\")\npar = ncread(filename, \"par\")\n\ntemperature_itp = LinearInterpolation(times, temp)\nsalinity_itp = LinearInterpolation(times, salinity)\nmld_itp = LinearInterpolation(times, mld)\nPAR_itp = LinearInterpolation(times, par)\n\nt_function(x, y, z, t) = temperature_itp(mod(t, 364days))\ns_function(x, y, z, t) = salinity_itp(mod(t, 364days))\nsurface_PAR(x, y, t) = PAR_itp(mod(t, 364days))\nκₜ(x, y, z, t) = 2e-2 * max(1 - (z + mld_itp(mod(t, 364days)) / 2)^2 / (mld_itp(mod(t, 364days)) / 2)^2, 0) + 1e-4\n","category":"page"},{"location":"generated/data_forced/#Grid-and-diffusivity-field","page":"Data forced column model","title":"Grid and diffusivity field","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Define the grid (in this case a non uniform grid for better resolution near the surface) and an extra Oceananigans field for the PAR to be stored in","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Nz = 33\nLz = 600meters\nrefinement = 10\nstretching = 5.754\nh(k) = (k - 1) / Nz\nζ₀(k) = 1 + (h(k) - 1) / refinement\nΣ(k) = (1 - exp(-stretching * h(k))) / (1 - exp(-stretching))\nz_faces(k) = Lz * (ζ₀(k) * Σ(k) - 1)\n\ngrid = RectilinearGrid(size = (1, 1, Nz), x = (0, 20meters), y = (0, 20meters), z = z_faces)\n\nclock = Clock(; time = 0.0)\n\nκ = FunctionField{Center, Center, Center}(κₜ, grid; clock)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"FunctionField located at (Center, Center, Center)\n├── func: κₜ (generic function with 1 method)\n├── grid: 1×1×33 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 1×1×3 halo\n├── clock: Clock{Float64, Float64}(time=0 seconds, iteration=0, last_Δt=Inf days)\n└── parameters: nothing","category":"page"},{"location":"generated/data_forced/#Biogeochemical-and-Oceananigans-model","page":"Data forced column model","title":"Biogeochemical and Oceananigans model","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Here we instantiate the LOBSTER model with carbonate chemistry and a surface flux of DIC (CO₂)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = surface_PAR,\n                            carbonates = true,\n                            scale_negatives = true)\n\nCO₂_flux = CarbonDioxideGasExchangeBoundaryCondition()\n\nT = FunctionField{Center, Center, Center}(t_function, grid; clock)\nS = FunctionField{Center, Center, Center}(s_function, grid; clock)\n\nmodel = NonhydrostaticModel(; grid, clock,\n                              closure = ScalarDiffusivity(ν = κ, κ = κ),\n                              biogeochemistry,\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux),),\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 11.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2400.0)","category":"page"},{"location":"generated/data_forced/#Simulation","page":"Data forced column model","title":"Simulation","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Show the progress of the simulation\nStore the output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)\nAdapt the timestep length to reduce the run time","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"simulation = Simulation(model, Δt = 1minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, IterationInterval(500))\n\nfilename = \"data_forced\"\nsimulation.output_writers[:profiles] = JLD2Writer(model,\n                                                  model.tracers,\n                                                  filename = \"$filename.jld2\",\n                                                  schedule = TimeInterval(1day),\n                                                  overwrite_existing = true)\n\nwizard = TimeStepWizard(cfl = 0.2, diffusive_cfl = 0.2,\n                        max_change = 1.5, min_change = 0.75,\n                        cell_advection_timescale = column_advection_timescale)\n\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(10))","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"┌ Warning: Attempting to store typeof(Main.var\"##234\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##234\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n","category":"page"},{"location":"generated/data_forced/#Run!","page":"Data forced column model","title":"Run!","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"run!(simulation)","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 1 minute, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (24.845 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (10.517 seconds).\nIteration: 0500, time: 6.598 hours, Δt: 47.460 seconds, wall time: 38.648 seconds\nIteration: 1000, time: 13.187 hours, Δt: 47.420 seconds, wall time: 41.762 seconds\nIteration: 1500, time: 19.771 hours, Δt: 47.386 seconds, wall time: 44.887 seconds\nIteration: 2000, time: 1.098 days, Δt: 47.380 seconds, wall time: 48.032 seconds\nIteration: 2500, time: 1.372 days, Δt: 47.427 seconds, wall time: 51.126 seconds\nIteration: 3000, time: 1.647 days, Δt: 47.487 seconds, wall time: 54.211 seconds\nIteration: 3500, time: 1.921 days, Δt: 47.481 seconds, wall time: 57.311 seconds\nIteration: 4000, time: 2.196 days, Δt: 47.312 seconds, wall time: 1.008 minutes\nIteration: 4500, time: 2.470 days, Δt: 47.360 seconds, wall time: 1.061 minutes\nIteration: 5000, time: 2.744 days, Δt: 47.449 seconds, wall time: 1.112 minutes\nIteration: 5500, time: 3.018 days, Δt: 47.405 seconds, wall time: 1.166 minutes\nIteration: 6000, time: 3.292 days, Δt: 47.445 seconds, wall time: 1.218 minutes\nIteration: 6500, time: 3.566 days, Δt: 47.337 seconds, wall time: 1.270 minutes\nIteration: 7000, time: 3.841 days, Δt: 47.312 seconds, wall time: 1.322 minutes\nIteration: 7500, time: 4.115 days, Δt: 47.427 seconds, wall time: 1.375 minutes\nIteration: 8000, time: 4.389 days, Δt: 47.347 seconds, wall time: 1.427 minutes\nIteration: 8500, time: 4.663 days, Δt: 47.314 seconds, wall time: 1.478 minutes\nIteration: 9000, time: 4.937 days, Δt: 47.320 seconds, wall time: 1.530 minutes\nIteration: 9500, time: 5.210 days, Δt: 47.335 seconds, wall time: 1.583 minutes\nIteration: 10000, time: 5.484 days, Δt: 47.349 seconds, wall time: 1.635 minutes\nIteration: 10500, time: 5.758 days, Δt: 47.366 seconds, wall time: 1.687 minutes\nIteration: 11000, time: 6.032 days, Δt: 47.388 seconds, wall time: 1.740 minutes\nIteration: 11500, time: 6.307 days, Δt: 47.442 seconds, wall time: 1.792 minutes\nIteration: 12000, time: 6.581 days, Δt: 47.510 seconds, wall time: 1.844 minutes\nIteration: 12500, time: 6.856 days, Δt: 47.494 seconds, wall time: 1.896 minutes\nIteration: 13000, time: 7.131 days, Δt: 47.500 seconds, wall time: 1.949 minutes\nIteration: 13500, time: 7.406 days, Δt: 47.481 seconds, wall time: 2.001 minutes\nIteration: 14000, time: 7.680 days, Δt: 47.401 seconds, wall time: 2.053 minutes\nIteration: 14500, time: 7.954 days, Δt: 47.345 seconds, wall time: 2.105 minutes\nIteration: 15000, time: 8.228 days, Δt: 47.337 seconds, wall time: 2.158 minutes\nIteration: 15500, time: 8.502 days, Δt: 47.337 seconds, wall time: 2.210 minutes\nIteration: 16000, time: 8.776 days, Δt: 47.337 seconds, wall time: 2.261 minutes\nIteration: 16500, time: 9.049 days, Δt: 47.337 seconds, wall time: 2.314 minutes\nIteration: 17000, time: 9.323 days, Δt: 47.337 seconds, wall time: 2.366 minutes\nIteration: 17500, time: 9.597 days, Δt: 47.337 seconds, wall time: 2.418 minutes\nIteration: 18000, time: 9.871 days, Δt: 47.337 seconds, wall time: 2.471 minutes\nIteration: 18500, time: 10.145 days, Δt: 47.337 seconds, wall time: 2.523 minutes\nIteration: 19000, time: 10.419 days, Δt: 47.337 seconds, wall time: 2.575 minutes\nIteration: 19500, time: 10.693 days, Δt: 47.337 seconds, wall time: 2.627 minutes\nIteration: 20000, time: 10.966 days, Δt: 47.337 seconds, wall time: 2.679 minutes\nIteration: 20500, time: 11.240 days, Δt: 47.338 seconds, wall time: 2.732 minutes\nIteration: 21000, time: 11.514 days, Δt: 47.340 seconds, wall time: 2.784 minutes\nIteration: 21500, time: 11.788 days, Δt: 47.341 seconds, wall time: 2.836 minutes\nIteration: 22000, time: 12.061 days, Δt: 47.330 seconds, wall time: 2.890 minutes\nIteration: 22500, time: 12.335 days, Δt: 47.314 seconds, wall time: 2.942 minutes\nIteration: 23000, time: 12.609 days, Δt: 47.376 seconds, wall time: 2.994 minutes\nIteration: 23500, time: 12.884 days, Δt: 47.531 seconds, wall time: 3.047 minutes\nIteration: 24000, time: 13.158 days, Δt: 47.431 seconds, wall time: 3.101 minutes\nIteration: 24500, time: 13.432 days, Δt: 47.385 seconds, wall time: 3.153 minutes\nIteration: 25000, time: 13.707 days, Δt: 47.349 seconds, wall time: 3.205 minutes\nIteration: 25500, time: 13.981 days, Δt: 47.325 seconds, wall time: 3.257 minutes\nIteration: 26000, time: 14.254 days, Δt: 47.332 seconds, wall time: 3.310 minutes\nIteration: 26500, time: 14.528 days, Δt: 47.345 seconds, wall time: 3.364 minutes\nIteration: 27000, time: 14.802 days, Δt: 47.360 seconds, wall time: 3.416 minutes\nIteration: 27500, time: 15.076 days, Δt: 47.408 seconds, wall time: 3.470 minutes\nIteration: 28000, time: 15.351 days, Δt: 47.467 seconds, wall time: 3.523 minutes\nIteration: 28500, time: 15.625 days, Δt: 47.334 seconds, wall time: 3.576 minutes\nIteration: 29000, time: 15.899 days, Δt: 47.317 seconds, wall time: 3.628 minutes\nIteration: 29500, time: 16.173 days, Δt: 47.337 seconds, wall time: 3.683 minutes\nIteration: 30000, time: 16.447 days, Δt: 47.337 seconds, wall time: 3.735 minutes\nIteration: 30500, time: 16.720 days, Δt: 47.337 seconds, wall time: 3.788 minutes\nIteration: 31000, time: 16.994 days, Δt: 47.337 seconds, wall time: 3.840 minutes\nIteration: 31500, time: 17.268 days, Δt: 47.333 seconds, wall time: 3.893 minutes\nIteration: 32000, time: 17.542 days, Δt: 47.329 seconds, wall time: 3.945 minutes\nIteration: 32500, time: 17.816 days, Δt: 47.326 seconds, wall time: 3.997 minutes\nIteration: 33000, time: 18.089 days, Δt: 47.323 seconds, wall time: 4.051 minutes\nIteration: 33500, time: 18.363 days, Δt: 47.321 seconds, wall time: 4.103 minutes\nIteration: 34000, time: 18.637 days, Δt: 47.319 seconds, wall time: 4.155 minutes\nIteration: 34500, time: 18.911 days, Δt: 47.318 seconds, wall time: 4.207 minutes\nIteration: 35000, time: 19.185 days, Δt: 47.320 seconds, wall time: 4.260 minutes\nIteration: 35500, time: 19.458 days, Δt: 47.325 seconds, wall time: 4.312 minutes\nIteration: 36000, time: 19.732 days, Δt: 47.330 seconds, wall time: 4.363 minutes\nIteration: 36500, time: 20.006 days, Δt: 47.337 seconds, wall time: 4.416 minutes\nIteration: 37000, time: 20.280 days, Δt: 47.337 seconds, wall time: 4.468 minutes\nIteration: 37500, time: 20.554 days, Δt: 47.337 seconds, wall time: 4.519 minutes\nIteration: 38000, time: 20.828 days, Δt: 47.337 seconds, wall time: 4.571 minutes\nIteration: 38500, time: 21.101 days, Δt: 47.337 seconds, wall time: 4.624 minutes\nIteration: 39000, time: 21.375 days, Δt: 47.337 seconds, wall time: 4.676 minutes\nIteration: 39500, time: 21.649 days, Δt: 47.337 seconds, wall time: 4.731 minutes\nIteration: 40000, time: 21.923 days, Δt: 47.337 seconds, wall time: 4.784 minutes\nIteration: 40500, time: 22.197 days, Δt: 47.335 seconds, wall time: 4.838 minutes\nIteration: 41000, time: 22.471 days, Δt: 47.332 seconds, wall time: 4.890 minutes\nIteration: 41500, time: 22.745 days, Δt: 47.329 seconds, wall time: 4.942 minutes\nIteration: 42000, time: 23.018 days, Δt: 47.328 seconds, wall time: 4.995 minutes\nIteration: 42500, time: 23.292 days, Δt: 47.400 seconds, wall time: 5.048 minutes\nIteration: 43000, time: 23.567 days, Δt: 47.522 seconds, wall time: 5.101 minutes\nIteration: 43500, time: 23.842 days, Δt: 47.420 seconds, wall time: 5.154 minutes\nIteration: 44000, time: 24.116 days, Δt: 47.336 seconds, wall time: 5.208 minutes\nIteration: 44500, time: 24.389 days, Δt: 47.312 seconds, wall time: 5.260 minutes\nIteration: 45000, time: 24.663 days, Δt: 47.345 seconds, wall time: 5.313 minutes\nIteration: 45500, time: 24.938 days, Δt: 47.428 seconds, wall time: 5.367 minutes\nIteration: 46000, time: 25.211 days, Δt: 47.461 seconds, wall time: 5.420 minutes\nIteration: 46500, time: 25.486 days, Δt: 47.468 seconds, wall time: 5.472 minutes\nIteration: 47000, time: 25.761 days, Δt: 47.475 seconds, wall time: 5.524 minutes\nIteration: 47500, time: 26.035 days, Δt: 47.482 seconds, wall time: 5.578 minutes\nIteration: 48000, time: 26.310 days, Δt: 47.481 seconds, wall time: 5.630 minutes\nIteration: 48500, time: 26.585 days, Δt: 47.481 seconds, wall time: 5.683 minutes\nIteration: 49000, time: 26.859 days, Δt: 47.480 seconds, wall time: 5.735 minutes\nIteration: 49500, time: 27.134 days, Δt: 47.481 seconds, wall time: 5.789 minutes\nIteration: 50000, time: 27.409 days, Δt: 47.483 seconds, wall time: 5.842 minutes\nIteration: 50500, time: 27.684 days, Δt: 47.485 seconds, wall time: 5.895 minutes\nIteration: 51000, time: 27.958 days, Δt: 47.487 seconds, wall time: 5.948 minutes\nIteration: 51500, time: 28.233 days, Δt: 47.489 seconds, wall time: 6.002 minutes\nIteration: 52000, time: 28.508 days, Δt: 47.491 seconds, wall time: 6.055 minutes\nIteration: 52500, time: 28.783 days, Δt: 47.492 seconds, wall time: 6.110 minutes\nIteration: 53000, time: 29.057 days, Δt: 47.497 seconds, wall time: 6.164 minutes\nIteration: 53500, time: 29.332 days, Δt: 47.515 seconds, wall time: 6.217 minutes\nIteration: 54000, time: 29.607 days, Δt: 47.533 seconds, wall time: 6.270 minutes\nIteration: 54500, time: 29.882 days, Δt: 47.550 seconds, wall time: 6.324 minutes\nIteration: 55000, time: 30.157 days, Δt: 47.502 seconds, wall time: 6.379 minutes\nIteration: 55500, time: 30.432 days, Δt: 47.443 seconds, wall time: 6.432 minutes\nIteration: 56000, time: 30.706 days, Δt: 47.396 seconds, wall time: 6.485 minutes\nIteration: 56500, time: 30.981 days, Δt: 47.360 seconds, wall time: 6.539 minutes\nIteration: 57000, time: 31.254 days, Δt: 47.358 seconds, wall time: 6.593 minutes\nIteration: 57500, time: 31.528 days, Δt: 47.359 seconds, wall time: 6.646 minutes\nIteration: 58000, time: 31.802 days, Δt: 47.360 seconds, wall time: 6.699 minutes\nIteration: 58500, time: 32.076 days, Δt: 47.372 seconds, wall time: 6.754 minutes\nIteration: 59000, time: 32.350 days, Δt: 47.426 seconds, wall time: 6.807 minutes\nIteration: 59500, time: 32.625 days, Δt: 47.498 seconds, wall time: 6.861 minutes\nIteration: 60000, time: 32.900 days, Δt: 47.519 seconds, wall time: 6.915 minutes\nIteration: 60500, time: 33.174 days, Δt: 47.480 seconds, wall time: 6.968 minutes\nIteration: 61000, time: 33.449 days, Δt: 47.466 seconds, wall time: 7.021 minutes\nIteration: 61500, time: 33.724 days, Δt: 47.451 seconds, wall time: 7.074 minutes\nIteration: 62000, time: 33.998 days, Δt: 47.438 seconds, wall time: 7.127 minutes\nIteration: 62500, time: 34.272 days, Δt: 47.454 seconds, wall time: 7.181 minutes\nIteration: 63000, time: 34.547 days, Δt: 47.471 seconds, wall time: 7.234 minutes\nIteration: 63500, time: 34.822 days, Δt: 47.489 seconds, wall time: 7.286 minutes\nIteration: 64000, time: 35.096 days, Δt: 47.434 seconds, wall time: 7.340 minutes\nIteration: 64500, time: 35.370 days, Δt: 47.317 seconds, wall time: 7.393 minutes\nIteration: 65000, time: 35.644 days, Δt: 47.361 seconds, wall time: 7.447 minutes\nIteration: 65500, time: 35.919 days, Δt: 47.488 seconds, wall time: 7.500 minutes\nIteration: 66000, time: 36.193 days, Δt: 47.399 seconds, wall time: 7.554 minutes\nIteration: 66500, time: 36.467 days, Δt: 47.376 seconds, wall time: 7.606 minutes\nIteration: 67000, time: 36.741 days, Δt: 47.357 seconds, wall time: 7.659 minutes\nIteration: 67500, time: 37.015 days, Δt: 47.344 seconds, wall time: 7.714 minutes\nIteration: 68000, time: 37.290 days, Δt: 47.499 seconds, wall time: 7.767 minutes\nIteration: 68500, time: 37.564 days, Δt: 47.383 seconds, wall time: 7.820 minutes\nIteration: 69000, time: 37.838 days, Δt: 47.312 seconds, wall time: 7.873 minutes\nIteration: 69500, time: 38.112 days, Δt: 47.336 seconds, wall time: 7.928 minutes\nIteration: 70000, time: 38.386 days, Δt: 47.367 seconds, wall time: 7.981 minutes\nIteration: 70500, time: 38.660 days, Δt: 47.410 seconds, wall time: 8.033 minutes\nIteration: 71000, time: 38.935 days, Δt: 47.464 seconds, wall time: 8.086 minutes\nIteration: 71500, time: 39.209 days, Δt: 47.480 seconds, wall time: 8.141 minutes\nIteration: 72000, time: 39.484 days, Δt: 47.480 seconds, wall time: 8.194 minutes\nIteration: 72500, time: 39.758 days, Δt: 47.480 seconds, wall time: 8.246 minutes\nIteration: 73000, time: 40.033 days, Δt: 47.480 seconds, wall time: 8.300 minutes\nIteration: 73500, time: 40.308 days, Δt: 47.480 seconds, wall time: 8.353 minutes\nIteration: 74000, time: 40.583 days, Δt: 47.480 seconds, wall time: 8.405 minutes\nIteration: 74500, time: 40.857 days, Δt: 47.480 seconds, wall time: 8.458 minutes\nIteration: 75000, time: 41.132 days, Δt: 47.480 seconds, wall time: 8.512 minutes\nIteration: 75500, time: 41.407 days, Δt: 47.480 seconds, wall time: 8.565 minutes\nIteration: 76000, time: 41.681 days, Δt: 47.480 seconds, wall time: 8.618 minutes\nIteration: 76500, time: 41.956 days, Δt: 47.480 seconds, wall time: 8.671 minutes\nIteration: 77000, time: 42.231 days, Δt: 47.480 seconds, wall time: 8.725 minutes\nIteration: 77500, time: 42.506 days, Δt: 47.480 seconds, wall time: 8.778 minutes\nIteration: 78000, time: 42.780 days, Δt: 47.480 seconds, wall time: 8.831 minutes\nIteration: 78500, time: 43.055 days, Δt: 47.480 seconds, wall time: 8.886 minutes\nIteration: 79000, time: 43.330 days, Δt: 47.480 seconds, wall time: 8.941 minutes\nIteration: 79500, time: 43.604 days, Δt: 47.480 seconds, wall time: 8.996 minutes\nIteration: 80000, time: 43.879 days, Δt: 47.480 seconds, wall time: 9.049 minutes\nIteration: 80500, time: 44.154 days, Δt: 47.421 seconds, wall time: 9.103 minutes\nIteration: 81000, time: 44.428 days, Δt: 47.344 seconds, wall time: 9.156 minutes\nIteration: 81500, time: 44.702 days, Δt: 47.312 seconds, wall time: 9.211 minutes\nIteration: 82000, time: 44.976 days, Δt: 47.332 seconds, wall time: 9.265 minutes\nIteration: 82500, time: 45.249 days, Δt: 47.312 seconds, wall time: 9.320 minutes\nIteration: 83000, time: 45.523 days, Δt: 47.333 seconds, wall time: 9.374 minutes\nIteration: 83500, time: 45.797 days, Δt: 47.400 seconds, wall time: 9.427 minutes\nIteration: 84000, time: 46.071 days, Δt: 47.480 seconds, wall time: 9.481 minutes\nIteration: 84500, time: 46.346 days, Δt: 47.480 seconds, wall time: 9.534 minutes\nIteration: 85000, time: 46.621 days, Δt: 47.480 seconds, wall time: 9.588 minutes\nIteration: 85500, time: 46.896 days, Δt: 47.480 seconds, wall time: 9.643 minutes\nIteration: 86000, time: 47.170 days, Δt: 47.480 seconds, wall time: 9.697 minutes\nIteration: 86500, time: 47.445 days, Δt: 47.480 seconds, wall time: 9.750 minutes\nIteration: 87000, time: 47.720 days, Δt: 47.480 seconds, wall time: 9.804 minutes\nIteration: 87500, time: 47.995 days, Δt: 47.480 seconds, wall time: 9.857 minutes\nIteration: 88000, time: 48.269 days, Δt: 47.475 seconds, wall time: 9.910 minutes\nIteration: 88500, time: 48.544 days, Δt: 47.470 seconds, wall time: 9.963 minutes\nIteration: 89000, time: 48.819 days, Δt: 47.466 seconds, wall time: 10.016 minutes\nIteration: 89500, time: 49.093 days, Δt: 47.461 seconds, wall time: 10.069 minutes\nIteration: 90000, time: 49.367 days, Δt: 47.456 seconds, wall time: 10.122 minutes\nIteration: 90500, time: 49.642 days, Δt: 47.451 seconds, wall time: 10.175 minutes\nIteration: 91000, time: 49.917 days, Δt: 47.446 seconds, wall time: 10.227 minutes\nIteration: 91500, time: 50.191 days, Δt: 47.448 seconds, wall time: 10.281 minutes\nIteration: 92000, time: 50.466 days, Δt: 47.454 seconds, wall time: 10.333 minutes\nIteration: 92500, time: 50.740 days, Δt: 47.459 seconds, wall time: 10.386 minutes\nIteration: 93000, time: 51.015 days, Δt: 47.464 seconds, wall time: 10.440 minutes\nIteration: 93500, time: 51.290 days, Δt: 47.462 seconds, wall time: 10.492 minutes\nIteration: 94000, time: 51.564 days, Δt: 47.460 seconds, wall time: 10.545 minutes\nIteration: 94500, time: 51.839 days, Δt: 47.458 seconds, wall time: 10.598 minutes\nIteration: 95000, time: 52.113 days, Δt: 47.456 seconds, wall time: 10.651 minutes\nIteration: 95500, time: 52.388 days, Δt: 47.452 seconds, wall time: 10.704 minutes\nIteration: 96000, time: 52.662 days, Δt: 47.449 seconds, wall time: 10.758 minutes\nIteration: 96500, time: 52.937 days, Δt: 47.445 seconds, wall time: 10.811 minutes\nIteration: 97000, time: 53.211 days, Δt: 47.445 seconds, wall time: 10.864 minutes\nIteration: 97500, time: 53.486 days, Δt: 47.445 seconds, wall time: 10.917 minutes\nIteration: 98000, time: 53.761 days, Δt: 47.445 seconds, wall time: 10.970 minutes\nIteration: 98500, time: 54.035 days, Δt: 47.445 seconds, wall time: 11.023 minutes\nIteration: 99000, time: 54.309 days, Δt: 47.451 seconds, wall time: 11.077 minutes\nIteration: 99500, time: 54.584 days, Δt: 47.457 seconds, wall time: 11.130 minutes\nIteration: 100000, time: 54.858 days, Δt: 47.463 seconds, wall time: 11.183 minutes\nIteration: 100500, time: 55.133 days, Δt: 47.468 seconds, wall time: 11.237 minutes\nIteration: 101000, time: 55.408 days, Δt: 47.472 seconds, wall time: 11.290 minutes\nIteration: 101500, time: 55.682 days, Δt: 47.475 seconds, wall time: 11.344 minutes\nIteration: 102000, time: 55.957 days, Δt: 47.479 seconds, wall time: 11.397 minutes\nIteration: 102500, time: 56.232 days, Δt: 47.480 seconds, wall time: 11.451 minutes\nIteration: 103000, time: 56.507 days, Δt: 47.480 seconds, wall time: 11.505 minutes\nIteration: 103500, time: 56.781 days, Δt: 47.480 seconds, wall time: 11.559 minutes\nIteration: 104000, time: 57.056 days, Δt: 47.480 seconds, wall time: 11.613 minutes\nIteration: 104500, time: 57.331 days, Δt: 47.480 seconds, wall time: 11.668 minutes\nIteration: 105000, time: 57.606 days, Δt: 47.480 seconds, wall time: 11.722 minutes\nIteration: 105500, time: 57.880 days, Δt: 47.480 seconds, wall time: 11.775 minutes\nIteration: 106000, time: 58.155 days, Δt: 47.457 seconds, wall time: 11.830 minutes\nIteration: 106500, time: 58.429 days, Δt: 47.418 seconds, wall time: 11.883 minutes\nIteration: 107000, time: 58.704 days, Δt: 47.385 seconds, wall time: 11.937 minutes\nIteration: 107500, time: 58.978 days, Δt: 47.358 seconds, wall time: 11.994 minutes\nIteration: 108000, time: 59.252 days, Δt: 47.379 seconds, wall time: 12.049 minutes\nIteration: 108500, time: 59.526 days, Δt: 47.411 seconds, wall time: 12.102 minutes\nIteration: 109000, time: 59.800 days, Δt: 47.448 seconds, wall time: 12.156 minutes\nIteration: 109500, time: 60.075 days, Δt: 47.480 seconds, wall time: 12.211 minutes\nIteration: 110000, time: 60.350 days, Δt: 47.480 seconds, wall time: 12.265 minutes\nIteration: 110500, time: 60.624 days, Δt: 47.480 seconds, wall time: 12.318 minutes\nIteration: 111000, time: 60.899 days, Δt: 47.480 seconds, wall time: 12.371 minutes\nIteration: 111500, time: 61.174 days, Δt: 47.480 seconds, wall time: 12.426 minutes\nIteration: 112000, time: 61.448 days, Δt: 47.480 seconds, wall time: 12.479 minutes\nIteration: 112500, time: 61.723 days, Δt: 47.480 seconds, wall time: 12.533 minutes\nIteration: 113000, time: 61.998 days, Δt: 47.480 seconds, wall time: 12.586 minutes\nIteration: 113500, time: 62.273 days, Δt: 47.480 seconds, wall time: 12.641 minutes\nIteration: 114000, time: 62.547 days, Δt: 47.480 seconds, wall time: 12.694 minutes\nIteration: 114500, time: 62.822 days, Δt: 47.480 seconds, wall time: 12.748 minutes\nIteration: 115000, time: 63.097 days, Δt: 47.480 seconds, wall time: 12.802 minutes\nIteration: 115500, time: 63.371 days, Δt: 47.480 seconds, wall time: 12.856 minutes\nIteration: 116000, time: 63.646 days, Δt: 47.480 seconds, wall time: 12.912 minutes\nIteration: 116500, time: 63.921 days, Δt: 47.480 seconds, wall time: 12.967 minutes\nIteration: 117000, time: 64.196 days, Δt: 47.480 seconds, wall time: 13.025 minutes\nIteration: 117500, time: 64.470 days, Δt: 47.480 seconds, wall time: 13.079 minutes\nIteration: 118000, time: 64.745 days, Δt: 47.480 seconds, wall time: 13.133 minutes\nIteration: 118500, time: 65.020 days, Δt: 47.472 seconds, wall time: 13.187 minutes\nIteration: 119000, time: 65.294 days, Δt: 47.353 seconds, wall time: 13.241 minutes\nIteration: 119500, time: 65.568 days, Δt: 47.311 seconds, wall time: 13.298 minutes\nIteration: 120000, time: 65.842 days, Δt: 47.364 seconds, wall time: 13.353 minutes\nIteration: 120500, time: 66.116 days, Δt: 47.453 seconds, wall time: 13.410 minutes\nIteration: 121000, time: 66.390 days, Δt: 47.345 seconds, wall time: 13.467 minutes\nIteration: 121500, time: 66.664 days, Δt: 47.332 seconds, wall time: 13.522 minutes\nIteration: 122000, time: 66.939 days, Δt: 47.455 seconds, wall time: 13.579 minutes\nIteration: 122500, time: 67.213 days, Δt: 47.313 seconds, wall time: 13.636 minutes\nIteration: 123000, time: 67.487 days, Δt: 47.312 seconds, wall time: 13.690 minutes\nIteration: 123500, time: 67.761 days, Δt: 47.355 seconds, wall time: 13.743 minutes\nIteration: 124000, time: 68.035 days, Δt: 47.480 seconds, wall time: 13.798 minutes\nIteration: 124500, time: 68.310 days, Δt: 47.480 seconds, wall time: 13.851 minutes\nIteration: 125000, time: 68.585 days, Δt: 47.480 seconds, wall time: 13.904 minutes\nIteration: 125500, time: 68.859 days, Δt: 47.480 seconds, wall time: 13.957 minutes\nIteration: 126000, time: 69.134 days, Δt: 47.480 seconds, wall time: 14.012 minutes\nIteration: 126500, time: 69.409 days, Δt: 47.480 seconds, wall time: 14.065 minutes\nIteration: 127000, time: 69.684 days, Δt: 47.480 seconds, wall time: 14.120 minutes\nIteration: 127500, time: 69.958 days, Δt: 47.480 seconds, wall time: 14.174 minutes\nIteration: 128000, time: 70.233 days, Δt: 47.480 seconds, wall time: 14.229 minutes\nIteration: 128500, time: 70.508 days, Δt: 47.480 seconds, wall time: 14.283 minutes\nIteration: 129000, time: 70.783 days, Δt: 47.480 seconds, wall time: 14.337 minutes\nIteration: 129500, time: 71.057 days, Δt: 47.480 seconds, wall time: 14.391 minutes\nIteration: 130000, time: 71.332 days, Δt: 47.480 seconds, wall time: 14.445 minutes\nIteration: 130500, time: 71.607 days, Δt: 47.480 seconds, wall time: 14.498 minutes\nIteration: 131000, time: 71.881 days, Δt: 47.480 seconds, wall time: 14.552 minutes\nIteration: 131500, time: 72.156 days, Δt: 47.480 seconds, wall time: 14.606 minutes\nIteration: 132000, time: 72.431 days, Δt: 47.480 seconds, wall time: 14.660 minutes\nIteration: 132500, time: 72.706 days, Δt: 47.480 seconds, wall time: 14.714 minutes\nIteration: 133000, time: 72.980 days, Δt: 47.480 seconds, wall time: 14.768 minutes\nIteration: 133500, time: 73.255 days, Δt: 47.480 seconds, wall time: 14.825 minutes\nIteration: 134000, time: 73.530 days, Δt: 47.480 seconds, wall time: 14.879 minutes\nIteration: 134500, time: 73.805 days, Δt: 47.480 seconds, wall time: 14.934 minutes\nIteration: 135000, time: 74.079 days, Δt: 47.480 seconds, wall time: 14.990 minutes\nIteration: 135500, time: 74.354 days, Δt: 47.480 seconds, wall time: 15.044 minutes\nIteration: 136000, time: 74.629 days, Δt: 47.480 seconds, wall time: 15.097 minutes\nIteration: 136500, time: 74.903 days, Δt: 47.480 seconds, wall time: 15.150 minutes\nIteration: 137000, time: 75.178 days, Δt: 47.480 seconds, wall time: 15.205 minutes\nIteration: 137500, time: 75.453 days, Δt: 47.480 seconds, wall time: 15.259 minutes\nIteration: 138000, time: 75.728 days, Δt: 47.480 seconds, wall time: 15.313 minutes\nIteration: 138500, time: 76.002 days, Δt: 47.480 seconds, wall time: 15.367 minutes\nIteration: 139000, time: 76.277 days, Δt: 47.480 seconds, wall time: 15.420 minutes\nIteration: 139500, time: 76.552 days, Δt: 47.480 seconds, wall time: 15.474 minutes\nIteration: 140000, time: 76.827 days, Δt: 47.480 seconds, wall time: 15.528 minutes\nIteration: 140500, time: 77.101 days, Δt: 47.480 seconds, wall time: 15.582 minutes\nIteration: 141000, time: 77.376 days, Δt: 47.480 seconds, wall time: 15.636 minutes\nIteration: 141500, time: 77.651 days, Δt: 47.480 seconds, wall time: 15.690 minutes\nIteration: 142000, time: 77.925 days, Δt: 47.480 seconds, wall time: 15.743 minutes\nIteration: 142500, time: 78.200 days, Δt: 47.480 seconds, wall time: 15.798 minutes\nIteration: 143000, time: 78.475 days, Δt: 47.480 seconds, wall time: 15.852 minutes\nIteration: 143500, time: 78.750 days, Δt: 47.480 seconds, wall time: 15.905 minutes\nIteration: 144000, time: 79.024 days, Δt: 47.480 seconds, wall time: 15.960 minutes\nIteration: 144500, time: 79.299 days, Δt: 47.480 seconds, wall time: 16.013 minutes\nIteration: 145000, time: 79.574 days, Δt: 47.480 seconds, wall time: 16.067 minutes\nIteration: 145500, time: 79.848 days, Δt: 47.480 seconds, wall time: 16.120 minutes\nIteration: 146000, time: 80.123 days, Δt: 47.480 seconds, wall time: 16.174 minutes\nIteration: 146500, time: 80.398 days, Δt: 47.480 seconds, wall time: 16.228 minutes\nIteration: 147000, time: 80.673 days, Δt: 47.480 seconds, wall time: 16.281 minutes\nIteration: 147500, time: 80.947 days, Δt: 47.480 seconds, wall time: 16.335 minutes\nIteration: 148000, time: 81.222 days, Δt: 47.480 seconds, wall time: 16.389 minutes\nIteration: 148500, time: 81.497 days, Δt: 47.480 seconds, wall time: 16.443 minutes\nIteration: 149000, time: 81.772 days, Δt: 47.480 seconds, wall time: 16.497 minutes\nIteration: 149500, time: 82.046 days, Δt: 47.480 seconds, wall time: 16.551 minutes\nIteration: 150000, time: 82.321 days, Δt: 47.480 seconds, wall time: 16.605 minutes\nIteration: 150500, time: 82.596 days, Δt: 47.480 seconds, wall time: 16.659 minutes\nIteration: 151000, time: 82.870 days, Δt: 47.480 seconds, wall time: 16.711 minutes\nIteration: 151500, time: 83.145 days, Δt: 47.480 seconds, wall time: 16.765 minutes\nIteration: 152000, time: 83.420 days, Δt: 47.480 seconds, wall time: 16.819 minutes\nIteration: 152500, time: 83.695 days, Δt: 47.480 seconds, wall time: 16.873 minutes\nIteration: 153000, time: 83.969 days, Δt: 47.480 seconds, wall time: 16.927 minutes\nIteration: 153500, time: 84.244 days, Δt: 47.480 seconds, wall time: 16.981 minutes\nIteration: 154000, time: 84.519 days, Δt: 47.480 seconds, wall time: 17.035 minutes\nIteration: 154500, time: 84.794 days, Δt: 47.480 seconds, wall time: 17.089 minutes\nIteration: 155000, time: 85.068 days, Δt: 47.479 seconds, wall time: 17.143 minutes\nIteration: 155500, time: 85.343 days, Δt: 47.477 seconds, wall time: 17.196 minutes\nIteration: 156000, time: 85.618 days, Δt: 47.475 seconds, wall time: 17.250 minutes\nIteration: 156500, time: 85.892 days, Δt: 47.473 seconds, wall time: 17.303 minutes\nIteration: 157000, time: 86.167 days, Δt: 47.321 seconds, wall time: 17.358 minutes\nIteration: 157500, time: 86.441 days, Δt: 47.321 seconds, wall time: 17.411 minutes\nIteration: 158000, time: 86.715 days, Δt: 47.392 seconds, wall time: 17.464 minutes\nIteration: 158500, time: 86.989 days, Δt: 47.355 seconds, wall time: 17.517 minutes\nIteration: 159000, time: 87.263 days, Δt: 47.459 seconds, wall time: 17.572 minutes\nIteration: 159500, time: 87.538 days, Δt: 47.489 seconds, wall time: 17.625 minutes\nIteration: 160000, time: 87.812 days, Δt: 47.528 seconds, wall time: 17.680 minutes\nIteration: 160500, time: 88.085 days, Δt: 47.325 seconds, wall time: 17.734 minutes\nIteration: 161000, time: 88.359 days, Δt: 47.316 seconds, wall time: 17.787 minutes\nIteration: 161500, time: 88.633 days, Δt: 47.312 seconds, wall time: 17.841 minutes\nIteration: 162000, time: 88.907 days, Δt: 47.313 seconds, wall time: 17.894 minutes\nIteration: 162500, time: 89.180 days, Δt: 47.346 seconds, wall time: 17.948 minutes\nIteration: 163000, time: 89.455 days, Δt: 47.465 seconds, wall time: 18.001 minutes\nIteration: 163500, time: 89.729 days, Δt: 47.448 seconds, wall time: 18.055 minutes\nIteration: 164000, time: 90.003 days, Δt: 47.340 seconds, wall time: 18.109 minutes\nIteration: 164500, time: 90.277 days, Δt: 47.339 seconds, wall time: 18.162 minutes\nIteration: 165000, time: 90.551 days, Δt: 47.338 seconds, wall time: 18.216 minutes\nIteration: 165500, time: 90.825 days, Δt: 47.338 seconds, wall time: 18.270 minutes\nIteration: 166000, time: 91.098 days, Δt: 47.337 seconds, wall time: 18.324 minutes\nIteration: 166500, time: 91.372 days, Δt: 47.337 seconds, wall time: 18.379 minutes\nIteration: 167000, time: 91.646 days, Δt: 47.338 seconds, wall time: 18.433 minutes\nIteration: 167500, time: 91.920 days, Δt: 47.338 seconds, wall time: 18.488 minutes\nIteration: 168000, time: 92.193 days, Δt: 47.312 seconds, wall time: 18.545 minutes\nIteration: 168500, time: 92.467 days, Δt: 47.363 seconds, wall time: 18.600 minutes\nIteration: 169000, time: 92.742 days, Δt: 47.527 seconds, wall time: 18.653 minutes\nIteration: 169500, time: 93.016 days, Δt: 47.352 seconds, wall time: 18.709 minutes\nIteration: 170000, time: 93.290 days, Δt: 47.333 seconds, wall time: 18.763 minutes\nIteration: 170500, time: 93.564 days, Δt: 47.319 seconds, wall time: 18.817 minutes\nIteration: 171000, time: 93.838 days, Δt: 47.400 seconds, wall time: 18.874 minutes\nIteration: 171500, time: 94.112 days, Δt: 47.404 seconds, wall time: 18.929 minutes\nIteration: 172000, time: 94.386 days, Δt: 47.383 seconds, wall time: 18.984 minutes\nIteration: 172500, time: 94.660 days, Δt: 47.376 seconds, wall time: 19.039 minutes\nIteration: 173000, time: 94.934 days, Δt: 47.830 seconds, wall time: 19.093 minutes\nIteration: 173500, time: 95.210 days, Δt: 47.431 seconds, wall time: 19.148 minutes\nIteration: 174000, time: 95.484 days, Δt: 47.442 seconds, wall time: 19.203 minutes\nIteration: 174500, time: 95.758 days, Δt: 47.337 seconds, wall time: 19.261 minutes\nIteration: 175000, time: 96.032 days, Δt: 47.312 seconds, wall time: 19.317 minutes\nIteration: 175500, time: 96.306 days, Δt: 47.348 seconds, wall time: 19.372 minutes\nIteration: 176000, time: 96.580 days, Δt: 47.354 seconds, wall time: 19.426 minutes\nIteration: 176500, time: 96.854 days, Δt: 47.323 seconds, wall time: 19.482 minutes\nIteration: 177000, time: 97.129 days, Δt: 47.430 seconds, wall time: 19.539 minutes\nIteration: 177500, time: 97.403 days, Δt: 47.352 seconds, wall time: 19.594 minutes\nIteration: 178000, time: 97.677 days, Δt: 47.316 seconds, wall time: 19.649 minutes\nIteration: 178500, time: 97.950 days, Δt: 47.316 seconds, wall time: 19.704 minutes\nIteration: 179000, time: 98.223 days, Δt: 47.312 seconds, wall time: 19.763 minutes\nIteration: 179500, time: 98.497 days, Δt: 47.320 seconds, wall time: 19.819 minutes\nIteration: 180000, time: 98.771 days, Δt: 47.351 seconds, wall time: 19.873 minutes\nIteration: 180500, time: 99.045 days, Δt: 47.497 seconds, wall time: 19.929 minutes\nIteration: 181000, time: 99.319 days, Δt: 47.312 seconds, wall time: 19.987 minutes\nIteration: 181500, time: 99.593 days, Δt: 47.311 seconds, wall time: 20.043 minutes\nIteration: 182000, time: 99.868 days, Δt: 47.369 seconds, wall time: 20.098 minutes\n[ Info: Simulation is stopping after running for 20.125 minutes.\n[ Info: Simulation time 100.000 days equals or exceeds stop time 100 days.\n","category":"page"},{"location":"generated/data_forced/#Load-output-and-plot","page":"Data forced column model","title":"Load output and plot","text":"","category":"section"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbitrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (n, t) in enumerate(times)\n    clock.time = t\n\n    air_sea_CO₂_flux[n] = CO₂_flux.condition.func(1, 1, grid, clock, (; DIC = DIC[n], Alk = Alk[n], T, S))\n\n    carbon_export[n] = (sPOM[n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:sPOM)).w[1, 1, grid.Nz-20] +\n                        bPOM[n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:bPOM)).w[1, 1, grid.Nz-20]) * redfield(Val(:sPOM), model.biogeochemistry)\nend","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"using CairoMakie\n\nfig = Figure(size = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap=:batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, cumsum(air_sea_CO₂_flux) /1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, cumsum(carbon_export) /1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"(Image: )","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"","category":"page"},{"location":"generated/data_forced/","page":"Data forced column model","title":"Data forced column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/column/#OneD_column","page":"Simple column model","title":"One-dimensional column example","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"In this example we setup a simple 1D column with the LOBSTER biogeochemical model and observe its evolution. The example demonstrates:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"How to setup OceanBioME's biogeochemical models\nHow to visualise results","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first.","category":"page"},{"location":"generated/column/#Install-dependencies","page":"Simple column model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using Pkg\npkg\"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/column/#Model-setup","page":"Simple column model","title":"Model setup","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We load the packages and choose the default LOBSTER parameter set","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Fields: FunctionField, ConstantField\nusing Oceananigans.Units\n\nconst year = years = 365days","category":"page"},{"location":"generated/column/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Simple column model","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t)) / 10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50days) + 10","category":"page"},{"location":"generated/column/#Grid","page":"Simple column model","title":"Grid","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Define the grid.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"grid = RectilinearGrid(size = (1, 1, 50), extent = (20meters, 20meters, 200meters))","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 1×1×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/column/#Model","page":"Simple column model","title":"Model","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"First we define the biogeochemical model including carbonate chemistry (for which we also define temperature (T) and salinity (S) fields) and scaling of negative tracers(see discussion in the positivity preservation) and then setup the Oceananigans model with the boundary condition for the DIC based on the air-sea CO₂ flux.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            scale_negatives = true)\n\nCO₂_flux = CarbonDioxideGasExchangeBoundaryCondition()\n\nclock = Clock(; time = 0.0)\nT = FunctionField{Center, Center, Center}(temp, grid; clock)\nS = ConstantField(35.0)\n\nmodel = NonhydrostaticModel(; grid,\n                              clock,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              boundary_conditions = (DIC = FieldBoundaryConditions(top = CO₂_flux), ),\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/column/#Simulation","page":"Simple column model","title":"Simulation","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Next we setup a simulation and add some callbacks that:","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Show the progress of the simulation\nStore the model and particles output","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"simulation = Simulation(model, Δt = 3minutes, stop_time = 100days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"column\"\nsimulation.output_writers[:profiles] = JLD2Writer(model, model.tracers,\n                                                  filename = \"$filename.jld2\",\n                                                  schedule = TimeInterval(1day),\n                                                  overwrite_existing = true)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"┌ Warning: Attempting to store typeof(Main.var\"##226\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n","category":"page"},{"location":"generated/column/#Run!","page":"Simple column model","title":"Run!","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We are ready to run the simulation","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"run!(simulation)","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 3 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (16.422 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (12.402 seconds).\nIteration: 4800, time: 10 days, Δt: 3 minutes, wall time: 41.313 seconds\nIteration: 9600, time: 20 days, Δt: 3 minutes, wall time: 53.702 seconds\nIteration: 14400, time: 30 days, Δt: 3 minutes, wall time: 1.111 minutes\nIteration: 19200, time: 40 days, Δt: 3 minutes, wall time: 1.326 minutes\nIteration: 24000, time: 50 days, Δt: 3 minutes, wall time: 1.534 minutes\nIteration: 28800, time: 60 days, Δt: 3 minutes, wall time: 1.752 minutes\nIteration: 33600, time: 70 days, Δt: 3 minutes, wall time: 1.953 minutes\nIteration: 38400, time: 80 days, Δt: 3 minutes, wall time: 2.146 minutes\nIteration: 43200, time: 90 days, Δt: 3 minutes, wall time: 2.343 minutes\n[ Info: Simulation is stopping after running for 2.547 minutes.\n[ Info: Simulation time 100 days equals or exceeds stop time 100 days.\nIteration: 48000, time: 100 days, Δt: 3 minutes, wall time: 2.547 minutes\n","category":"page"},{"location":"generated/column/#Load-saved-output","page":"Simple column model","title":"Load saved output","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Now we can load the results and do some post processing to diagnose the air-sea CO₂ flux. Hopefully, this looks different to the example without kelp!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"   P = FieldTimeSeries(\"$filename.jld2\", \"P\")\n NO₃ = FieldTimeSeries(\"$filename.jld2\", \"NO₃\")\n   Z = FieldTimeSeries(\"$filename.jld2\", \"Z\")\nsPOM = FieldTimeSeries(\"$filename.jld2\", \"sPOM\")\nbPOM = FieldTimeSeries(\"$filename.jld2\", \"bPOM\")\n DIC = FieldTimeSeries(\"$filename.jld2\", \"DIC\")\n Alk = FieldTimeSeries(\"$filename.jld2\", \"Alk\")\n\nx, y, z = nodes(P)\ntimes = P.times","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (n, t) in enumerate(times)\n    clock.time = t\n\n    air_sea_CO₂_flux[n] = CO₂_flux.condition.func(1, 1, grid, clock, (; DIC = DIC[n], Alk = Alk[n], T, S))\n    carbon_export[n] = (sPOM[n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:sPOM)).w[1, 1, grid.Nz-20] +\n                        bPOM[n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(model.biogeochemistry, Val(:bPOM)).w[1, 1, grid.Nz-20]) * redfield(Val(:sPOM), model.biogeochemistry)\nend","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/column/#Plot","page":"Simple column model","title":"Plot","text":"","category":"section"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"Finally, we plot!","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"using CairoMakie\n\nfig = Figure(size = (1000, 1500), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-150meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(P, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N / m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(NO₃, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxZ = Axis(fig[3, 1]; title = \"Zooplankton concentration (mmol N / m³)\", axis_kwargs...)\nhmZ = heatmap!(times / days, z, interior(Z, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmZ)\n\naxD = Axis(fig[4, 1]; title = \"Detritus concentration (mmol N / m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(sPOM, 1, 1, :, :)' .+ interior(bPOM, 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[4, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[5, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[5, 2], axfDIC, framevisible = false)\n\nfig","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"(Image: )","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"","category":"page"},{"location":"generated/column/","page":"Simple column model","title":"Simple column model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#LOBSTER","page":"LOBSTER","title":"The Lodyc-DAMTP Ocean Biogeochemical Simulation Tools for Ecosystem and Resources (LOBSTER) model","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"LOBSTER is a medium complexity BGC model with seven core prognostic variables: phytoplankton, zooplankton, small and large detritus, nitrates, ammonia, and dissolved organic matter. LOBSTER was originally proposed by Lévy et al. (2005) and subsequently added to by Lévy et al. (2001), Resplandy et al. (2009), Karleskind et al. (2011), and Resplandy et al. (2012).","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"(Image: Diagram of LOBSTER formulation)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, this implementation of LOBSTER optionally models simple carbonate chemistry (DIC and Alkalinity), Oxygen, and variable redfield ratios for the now dissolved and particulate organic groups (which then allows carbon to be conserved). These are activated in the model setup, for example:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"julia> using OceanBioME, Oceananigans\n\njulia> grid = RectilinearGrid(size=(3, 3, 30), extent=(10, 10, 200));\n\njulia> bgc_model = LOBSTER(; grid, carbonates = true)\nLOBSTER{Float64} with carbonates ✅, oxygen ❌, variable Redfield ratio ❌ and (:sPOM, :bPOM) sinking \n Light attenuation: Two-band light attenuation model (Float64)\n Sediment: Nothing\n Particles: Nothing\n Modifiers: Nothing","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Model-equations","page":"LOBSTER","title":"Model equations","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/#Core-components","page":"LOBSTER","title":"Core components","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When no additional components are activated the tracers NO_3, NH_4, P, Z, sPOM, bPOM, and DOM evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Ppartial t = (1-gamma)mu_P L_PARleft(L_NO_3 + L_NH_4right)P - G_P - m_PP^2","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Zpartial t = a_zleft(G_P + G_sPOMright) - m_ZZ^2 - mu_ZZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial NO_3partial t = -mu_PL_PARL_NO_3 + mu_nNH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial NH_4partial t = -mu_PL_PARL_NH_4 - mu_nNH_4 \n     + alpha_Pgammamu_P L_PARleft(L_NO_3 + L_NH_4right)P\n     + alpha_Zmu_ZZ + alpha_dmu_sPOMsPOM + alpha_dmu_bPOMbPOM\n     + mu_DOMDOM","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial sPOMpartial t = f_sleft(1-a_Z)left(G_P + G_sPOMright) + m_PP^2 + m_ZZ^2right - G_sPOM - mu_sPOMsPOM - fracpartialpartial z(sPOM w_s)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial bPOMpartial t = (1-f_s)left(1-a_Z)left(G_P + G_sPOMright) + m_PP^2 + m_ZZ^2right - mu_bPOMbPOM - fracpartialpartial z(bPOM w_b)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DOMpartial t = (1-alpha_P)gammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + (1-alpha_Z)mu_ZR_ZZ + (1-alpha_D)mu_sPOMsPOM + (1-alpha_D)mu_bPOMbPOM - mu_DOMDOM","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Where:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_PAR = 1 - e^-PARk_PAR","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_NO_3 = fracNO_3NO_3 + k_NO_3e^-psi NH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"L_NH_4 = fracNH_4NH_4 + k_NH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"G_P = g_zfractildepPk_z + tildepP + (1-tildep)sPOMZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"G_sPOM = g_zfrac(1-tildep)sPOMk_z + tildepP + (1-tildep)sPOMZ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, the sPOM and bPOM detritus components sink with constant sinking speed.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Carbonate-chemistry","page":"LOBSTER","title":"Carbonate chemistry","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the carbonate chemistry is activated additional tracers DIC and Alk evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DICpartial t = alpha_Pgammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + alpha_Zmu_ZZR_Z + alpha_Dmu_sPOMR_OsPOM\n+ alpha_Dmu_bPOMR_ObPOM + mu_DOMR_ODOM - mu_P L_PARleft(L_NO_3 + L_NH_4right) R_P (1 + rho_CaCO_3(1 - gamma))P\n+ G_Peta R_Prho_CaCO_3","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial Alkpartial t = mu_P L_PARL_NO_3P - 2rho_CaCO_3mu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Oxygen-chemistry","page":"LOBSTER","title":"Oxygen chemistry","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the oxygen chemistry is activated, additional tracer O_2 evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial O_2partial t = mu_P L_PARleft(L_NO_3 + L_NH_4right)R_O_2P - (R_O_2 - R_nit)fracpartial NH_4partial t - R_O_2mu_nNH_4","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Variable-Redfield","page":"LOBSTER","title":"Variable Redfield","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the variable Redfield modification is activated the organic components are modified to evolve their nitrogen and carbon content separately. This means that the waste from non-Redfield models (e.g. loss from the kelp) can be accounted for.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"In this case the organic components are split into nitrogen and carbon compartments, so the tracers sPOM, bPOM, and DOM are replaced with sPON, sPOC, bPON, bPOC, DON, and DOC. The nitrogen compartments evolve as per the organic matter equations above (i.e. replacing each XOM with XON), while the carbon compartments evolve like:","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial sPOCpartial t = f_sleft(1-a_Z)left(G_P + G_sPOMright)R_Z + m_PP^2 + m_ZR_ZZ^2right - G_sPONR_Z - mu_sPOMsPOC - fracpartialpartial z(sPOC w_s)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial bPOCpartial t = (1-f_s)left(1-a_Z)left(G_P + G_sPOMright)R_Z + m_PR_PP^2 + m_ZR_ZZ^2right + (G_P(1 - eta) + m_PP^2)R_Prho_CaCO_3 - mu_bPOMbPOC - fracpartialpartial z(bPOC w_b)","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"fracpartial DOCpartial t = (1-alpha_P)gammamu_P L_PARleft(L_NO_3 + L_NH_4right)R_PP + (1-alpha_Z)mu_ZR_ZZ + (1-alpha_D)mu_sPOMsPOC + (1-alpha_D)mu_bPOMbPOC - mu_DOMDOC","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Additionally, the DIC and Alk equations are modified to replace each XOM cdot R_O with the corresponding XOC.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Parameter-variable-names","page":"LOBSTER","title":"Parameter variable names","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Symbol Variable name Units\ntildep phytoplankton_preference -\ng_z maximum_grazing_rate 1 / s\nk_z grazing_half_saturation mmol N / m³\nk_PAR light_half_saturation W / m²\npsi nitrate_ammonia_inhibition -\nk_NO_3 nitrate_half_saturation mmol N / m³\nk_NH_4 ammonia_half_saturation mmol N / m³\nmu_P maximum_phytoplankton_growthrate 1 / s\na_z zooplankton_assimilation_fraction -\nm_Z zooplankton_mortality 1 / s / mmol N/m³\nmu_z zooplankton_excretion_rate 1 / s\nm_P phytoplankton_mortality 1 / s\nmu_sPOM small_detritus_remineralisation_rate 1 / s\nmu_bPOM large_detritus_remineralisation_rate 1 / s\ngamma phytoplankton_exudation_fraction -\nmu_n nitrification_rate 1 / 2\nalpha_P ammonia_fraction_of_exudate -\nalpha_Z ammonia_fraction_of_excriment -\nalpha_d ammonia_fraction_of_detritus -\nR_P phytoplankton_redfield mmol C / mmol N\nR_O organic_redfield mmol C / mmol N\nR_ChlN phytoplankton_chlorophyll_ratio mg Chl / mmol N\nrho_CaCO_3 organic_carbon_calcate_ratio mmol CaCO₃/ mmol C\nR_O_2 respiration_oxygen_nitrogen_ratio mmol O / mmol N\nR_nit nitrification_oxygen_nitrogen_ratio mmol O / mmol N\nf_s slow_sinking_mortality_fraction -\nmu_DOM dissolved_organic_breakdown_rate 1 / s\neta zooplankton_calcite_dissolution -","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"All default parameter values are given in Parameters; and a more thorough explanation of new terms will be included in a publication that is in prep.","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/#Model-conservations","page":"LOBSTER","title":"Model conservations","text":"","category":"section"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"In the core configuration nitrogen is conserved in the evolution of the equations (excluding external sources and sinking), i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"partial_t NO_3 + partial_t NH_4 + partial_t P + partial_t Z + partial_t sPOM + partial_t bPOM + partial_t DOM = 0 ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"When the carbonate chemistry component is activated carbon is also conserved, i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"R(partial_t P + partial_t Z + partial_t sPOM + partial_t bPOM + partial_t DOM) + partial_t DIC = 0 ","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"Trivially, this is also the case when the variable Redfield component is also activated, i.e.,","category":"page"},{"location":"model_components/biogeochemical/LOBSTER/","page":"LOBSTER","title":"LOBSTER","text":"R(partial_t P + partial_t Z) + partial_t sPOC + partial_t bPOC + partial_t DOC + partial_t DIC = 0","category":"page"},{"location":"generated/kelp/#Simple-active-particle-example","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simple active particle example","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Here, we setup a simple 1D column example with the LOBSTER biogeochemical model and active particles modelling the growth of sugar kelp. This example demonstrates:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"How to setup OceanBioME's biogeochemical models\nHow to add biologically active particles which interact with the biodeochemical model\nHow to visualise results","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This is forced by idealised mixing layer depth and surface photosynthetically available radiation (PAR) which are setup first.","category":"page"},{"location":"generated/kelp/#Install-dependencies","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Install dependencies","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie, JLD2\"","category":"page"},{"location":"generated/kelp/#Model-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"First load the required packages","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Fields: FunctionField, ConstantField\nusing Oceananigans.Units\nusing Oceananigans.Architectures: on_architecture\n\nconst year = years = 365days # just for these idealised cases","category":"page"},{"location":"generated/kelp/#Surface-PAR-and-turbulent-vertical-diffusivity-based-on-idealised-mixed-layer-depth","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Surface PAR and turbulent vertical diffusivity based on idealised mixed layer depth","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Setting up idealised functions for PAR and diffusivity (details here can be ignored but these are typical of the North Atlantic).","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@inline PAR⁰(x, y, t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\n@inline H(t, t₀, t₁) = ifelse(t₀ < t < t₁, 1.0, 0.0)\n\n@inline fmld1(t) = H(t, 50days, year) * (1 / (1 + exp(-(t - 100days) / 5days))) * (1 / (1 + exp((t - 330days) / 25days)))\n\n@inline MLD(t) = - (10 + 340 * (1 - fmld1(year - eps(year)) * exp(-mod(t, year) / 25days) - fmld1(mod(t, year))))\n\n@inline κₜ(x, y, z, t) = 1e-2 * (1 + tanh((z - MLD(t))/10)) / 2 + 1e-4\n\n@inline temp(x, y, z, t) = 2.4 * cos(t * 2π / year + 50day) + 10\n\narchitecture = CPU()","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Oceananigans.Architectures.CPU()","category":"page"},{"location":"generated/kelp/#Grid-and-PAR-field","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Grid and PAR field","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Define the grid and an extra Oceananigans' field that the PAR will be stored in","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Lx, Ly = 20meters, 20meters\ngrid = RectilinearGrid(architecture, size=(1, 1, 50), extent=(Lx, Ly, 200))","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"1×1×50 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 1×1×3 halo\n├── Periodic x ∈ [0.0, 20.0)   regularly spaced with Δx=20.0\n├── Periodic y ∈ [0.0, 20.0)   regularly spaced with Δy=20.0\n└── Bounded  z ∈ [-200.0, 0.0] regularly spaced with Δz=4.0","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Specify the boundary conditions for DIC and O₂ based on the air-sea CO₂ and O₂ flux","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CO₂_flux = CarbonDioxideGasExchangeBoundaryCondition()\n\nclock = Clock(; time = 0.0)\nT = FunctionField{Center, Center, Center}(temp, grid; clock)\nS = ConstantField(35.0)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"ConstantField(35.0)","category":"page"},{"location":"generated/kelp/#Kelp-Particle-setup","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Kelp Particle setup","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"@info \"Setting up kelp particles\"\n\nn = 5 # number of kelp bundles\nz₀ = [-21:5:-1;] * 1.0 # depth of kelp fronds\n\nparticles = SugarKelpParticles(n; grid,\n                               advection = nothing, # we don't want them to move around\n                               scalefactors = fill(2000, n)) # and we want them to look like there are 500 in each bundle\n\nset!(particles, A = 10, N = 0.01, C = 0.1, z = z₀, x = Lx / 2, y = Ly / 2)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"[ Info: Setting up kelp particles\n","category":"page"},{"location":"generated/kelp/#Setup-BGC-model","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Setup BGC model","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"biogeochemistry = LOBSTER(; grid,\n                            surface_photosynthetically_active_radiation = PAR⁰,\n                            carbonates = true,\n                            variable_redfield = true,\n                            oxygen = true,\n                            scale_negatives = true,\n                            particles)\n\nmodel = NonhydrostaticModel(; grid,\n                              clock,\n                              closure = ScalarDiffusivity(ν = κₜ, κ = κₜ),\n                              biogeochemistry,\n                              auxiliary_fields = (; T, S))\n\nset!(model, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2239.8, Alk = 2409.0)","category":"page"},{"location":"generated/kelp/#Simulation","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Simulation","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Next we setup the simulation along with some callbacks that:","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Show the progress of the simulation\nStore the model and particles output\nPrevent the tracers from going negative from numerical error (see discussion of this in the positivity preservation implementation page)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"simulation = Simulation(model, Δt = 4minutes, stop_time = 150days)\n\nprogress_message(sim) = @printf(\"Iteration: %04d, time: %s, Δt: %s, wall time: %s\\n\",\n                                iteration(sim),\n                                prettytime(sim),\n                                prettytime(sim.Δt),\n                                prettytime(sim.run_wall_time))\n\nsimulation.callbacks[:progress] = Callback(progress_message, TimeInterval(10days))\n\nfilename = \"kelp\"\nsimulation.output_writers[:profiles] = JLD2Writer(model, model.tracers,\n                                                  filename = \"$filename.jld2\",\n                                                  schedule = TimeInterval(1day),\n                                                  overwrite_existing = true)\n\nsimulation.output_writers[:particles] = JLD2Writer(model, (; particles),\n                                                   filename = \"$(filename)_particles.jld2\",\n                                                   schedule = TimeInterval(1day),\n                                                   overwrite_existing = true)\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n┌ Warning: Attempting to store typeof(Main.var\"##235\".κₜ).\n│ JLD2 only stores functions by name.\n│  This may not be useful for anonymous functions.\n└ @ JLD2 ~/.julia/packages/JLD2/SgtOb/src/data/writing_datatypes.jl:447\n","category":"page"},{"location":"generated/kelp/#Run!","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Run!","text":"","category":"section"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Finally we run the simulation","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"run!(simulation)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"[ Info: Initializing simulation...\nIteration: 0000, time: 0 seconds, Δt: 4 minutes, wall time: 0 seconds\n[ Info:     ... simulation initialization complete (47.566 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (15.647 seconds).\nIteration: 3600, time: 10 days, Δt: 4 minutes, wall time: 1.296 minutes\nIteration: 7200, time: 20 days, Δt: 4 minutes, wall time: 1.533 minutes\nIteration: 10800, time: 30 days, Δt: 4 minutes, wall time: 1.776 minutes\nIteration: 14400, time: 40 days, Δt: 4 minutes, wall time: 2.016 minutes\nIteration: 18000, time: 50 days, Δt: 4 minutes, wall time: 2.251 minutes\nIteration: 21600, time: 60 days, Δt: 4 minutes, wall time: 2.486 minutes\nIteration: 25200, time: 70 days, Δt: 4 minutes, wall time: 2.718 minutes\nIteration: 28800, time: 80 days, Δt: 4 minutes, wall time: 2.952 minutes\nIteration: 32400, time: 90 days, Δt: 4 minutes, wall time: 3.187 minutes\nIteration: 36000, time: 100 days, Δt: 4 minutes, wall time: 3.426 minutes\nIteration: 39600, time: 110 days, Δt: 4 minutes, wall time: 3.673 minutes\nIteration: 43200, time: 120 days, Δt: 4 minutes, wall time: 3.918 minutes\nIteration: 46800, time: 130 days, Δt: 4 minutes, wall time: 4.162 minutes\nIteration: 50400, time: 140 days, Δt: 4 minutes, wall time: 4.398 minutes\n[ Info: Simulation is stopping after running for 4.634 minutes.\n[ Info: Simulation time 150 days equals or exceeds stop time 150 days.\nIteration: 54000, time: 150 days, Δt: 4 minutes, wall time: 4.634 minutes\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Now we can visualise the results with some post processing to diagnose the air-sea CO₂ flux - hopefully this looks different to the example without kelp!","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"tracers = FieldDataset(\"$filename.jld2\")\n\nx, y, z = nodes(tracers[\"P\"])\ntimes = tracers[\"P\"].times","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We compute the  air-sea CO₂ flux at the surface (corresponding to vertical index k = grid.Nz) and the carbon export by computing how much carbon sinks below some arbirtrary depth; here we use depth that corresponds to k = grid.Nz - 20.","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"air_sea_CO₂_flux = zeros(length(times))\ncarbon_export = zeros(length(times))\n\nusing Oceananigans.Biogeochemistry: biogeochemical_drift_velocity\n\nfor (n, t) in enumerate(times)\n    clock.time = t\n\n    air_sea_CO₂_flux[n] = CO₂_flux.condition.func(1, 1, grid, clock, (; DIC = tracers[\"DIC\"][n], Alk = tracers[\"Alk\"][n], T, S))\n\n    carbon_export[n] = tracers[\"sPOC\"][n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(biogeochemistry, Val(:sPOC)).w[1, 1, grid.Nz-20] +\n                       tracers[\"bPOC\"][n][1, 1, grid.Nz-20] * biogeochemical_drift_velocity(biogeochemistry, Val(:bPOC)).w[1, 1, grid.Nz-20]\nend","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"Both air_sea_CO₂_flux and carbon_export are in units mmol CO₂ / (m² s).","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using CairoMakie\n\nfig = Figure(size = (1000, 900), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", ylabel = \"z (m)\", limits = ((0, times[end] / days), (-85meters, 0)))\n\naxP = Axis(fig[1, 1]; title = \"Phytoplankton concentration (mmol N/m³)\", axis_kwargs...)\nhmP = heatmap!(times / days, z, interior(tracers[\"P\"], 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[1, 2], hmP)\n\naxNO₃ = Axis(fig[2, 1]; title = \"Nitrate concentration (mmol N/m³)\", axis_kwargs...)\nhmNO₃ = heatmap!(times / days, z, interior(tracers[\"NO₃\"], 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[2, 2], hmNO₃)\n\naxD = Axis(fig[3, 1]; title = \"Detritus concentration (mmol C/m³)\", axis_kwargs...)\nhmD = heatmap!(times / days, z, interior(tracers[\"sPOC\"], 1, 1, :, :)' .+ interior(tracers[\"bPOC\"], 1, 1, :, :)', colormap = :batlow)\nColorbar(fig[3, 2], hmD)\n\nCO₂_molar_mass = (12 + 2 * 16) * 1e-3 # kg / mol\n\naxfDIC = Axis(fig[4, 1], xlabel = \"Time (days)\", ylabel = \"Flux (kgCO₂/m²/year)\",\n                         title = \"Air-sea CO₂ flux and Sinking\", limits = ((0, times[end] / days), nothing))\nlines!(axfDIC, times / days, air_sea_CO₂_flux / 1e3 * CO₂_molar_mass * year, linewidth = 3, label = \"Air-sea flux\")\nlines!(axfDIC, times / days, carbon_export / 1e3    * CO₂_molar_mass * year, linewidth = 3, label = \"Sinking export\")\nLegend(fig[4, 2], axfDIC, framevisible = false)\n\nsave(\"kelp.png\", fig)","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"CairoMakie.Screen{IMAGE}\n","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"We can also have a look at how the kelp particles evolve","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"using JLD2\n\nfile = jldopen(\"$(filename)_particles.jld2\")\n\niterations = keys(file[\"timeseries/t\"])\n\nA, N, C = ntuple(n -> zeros(5, length(iterations)), 3)\n\ntimes = zeros(length(iterations))\n\nfor (i, iter) in enumerate(iterations)\n    particles_values = file[\"timeseries/particles/$iter\"]\n    A[:, i] = particles_values.A\n    N[:, i] = particles_values.N\n    C[:, i] = particles_values.C\n\n    times[i] = file[\"timeseries/t/$iter\"]\nend\n\nNₛ = particles.biogeochemistry.structural_nitrogen\nCₛ = particles.biogeochemistry.structural_carbon\nkₐ = particles.biogeochemistry.structural_dry_weight_per_area\nsf = particles.scalefactors[1]\n\nfig = Figure(size = (1000, 800), fontsize = 20)\n\naxis_kwargs = (xlabel = \"Time (days)\", limits = ((0, times[end] / days), nothing))\n\nax1 = Axis(fig[1, 1]; ylabel = \"Frond area (dm²)\", axis_kwargs...)\n[lines!(ax1, times / day, A[n, :], linewidth = 3) for n in 1:5]\n\nax2 = Axis(fig[2, 1]; ylabel = \"Total Nitrogen (gN)\", axis_kwargs...)\n[lines!(ax2, times / day, (@. A * (N + Nₛ) * kₐ * sf)[n, :], linewidth = 3) for n in 1:5]\n\nax3 = Axis(fig[3, 1]; ylabel = \"Total Carbon (kgCO₂(eq))\", axis_kwargs...)\n[lines!(ax3, times / day, (@. A * (C + Cₛ) * kₐ * sf)[n, :] / 1000 * 44 / 12, linewidth = 3) for n in 1:5]\n\nfig","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"(Image: )","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"","category":"page"},{"location":"generated/kelp/","page":"Model with particles (kelp) interacting with the biogeochemistry","title":"Model with particles (kelp) interacting with the biogeochemistry","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/CarbonChemistry_parameters/#CarbonChemistry-default-parameters","page":"CarbonChemistry","title":"CarbonChemistry default parameters","text":"","category":"section"},{"location":"generated/CarbonChemistry_parameters/","page":"CarbonChemistry","title":"CarbonChemistry","text":"Name Value\nionic_strength Ionic strength\nIs = 19.924 S/(1000.0 + -1.005 S) \nsolubility Solubility constant\nln(k₀/k°) = -60.2409 + 9345.17 / T + 23.3585 (log(T) - log(100)) + 0.0 T² + (0.023517 + -0.00023656 T + 4.7036e-7 T²)S \ncarbonic_acid (K1 = First carbon dioxide dissociation constant","category":"page"},{"location":"generated/CarbonChemistry_parameters/","page":"CarbonChemistry","title":"CarbonChemistry","text":"log₁₀(k₁/k°) = 61.2172 + -3633.86 / T + -9.6777 log(T) + 0.011555 S + -0.0001152 S², K2 = Second carbon dioxide dissociation constant\nlog₁₀(k₂/k°) = -25.929 + -471.78 / T + 3.16967 log(T) + 0.01781 S + -0.0001122 S²)|","category":"page"},{"location":"generated/CarbonChemistry_parameters/","page":"CarbonChemistry","title":"CarbonChemistry","text":"|boric_acid|Boric acid dissociation constant     ln(kᵇ/k°) = 148.0248 + (-8966.9 + -2890.53 √S + -77.942 S + 1.728 √S³ + -0.0996 S²) / T                 + 137.1942 * √S                 + 1.62142 * S                 + (-24.4344 + -25.085 √S + -0.2474 S ) * log(T)                 + 0.053105 * √S * T| |water|Water dissociation constant     ln(kʷ/k°) = 148.9652                 + -13847.26 / T                 + -23.6521 log(T)                 + (-5.977 + 118.67 / T + 1.0495 log(T)) √S                 + -0.01615 * S| |sulfate|Bisulfate dissociation constant     ln(kˢ/k°) = 141.328                 + -4276.1 / T                 + -23.093 log(T)                 + (324.57 + -13856.0 / T + -47.986 log(T)) √Is                 + (-771.54 + 35474.0 / T + 114.723 log(T)) Is                 + -2698.0 √Is³ / T                 + 1776.0 Is² / T                 + log(1 + -0.001005 S)| |fluoride|Hydrogen fluoride dissociation constant     ln(kᶠ/k°) = -9.68                 + 874.0 / T                 + 0.111 √S                 + log(1 + 0.0 S)                 + log(1 + 0.0 S / Kˢ)| |phosphoric_acid|(KP1 = Phosphate dissociation constant     ln(kᵖⁿ/k°) = 115.525                 + -4576.752 / T                 + -18.453 log(T)                 + (0.69171 + -106.736 / T) √S                 + (-0.01844 + -0.65643 / T) S, KP2 = Phosphate dissociation constant     ln(kᵖⁿ/k°) = 172.0883                 + -8814.715 / T                 + -27.927 log(T)                 + (1.3566 + -160.34 / T) √S                 + (-0.05778 + 0.37335 / T) S, KP3 = Phosphate dissociation constant     ln(kᵖⁿ/k°) = -18.141                 + -3070.75 / T                 + 0.0 log(T)                 + (2.81197 + 17.27039 / T) √S                 + (-0.09984 + -44.99486 / T) S)| |silicic_acid|Silicic acid constant     ln(kˢⁱ/k°) = 117.385                 + -8904.2 / T                 + -19.334 log(T)                 + (3.5913 + -458.79 / T) √Is                 + (-1.5998 + 188.74 / T) Is                 + (0.07871 + -12.1652 / T) Is²                 + log(1 + -0.001005 S)| |calcite_solubility|Calcite solubility     ln(kₛₚ) = -171.9065 + -0.077993 T + 2839.319 / T + 71.595 log(T)     ln(kₛₚˢ) = ln(kₛₚ) + (-0.77712 + 0.0028426 T + 178.34 / T) √S                 + -0.07711 S + 0.0041249 √S³| |density_function|teos10polynomialapproximation|","category":"page"},{"location":"numerical_implementation/positivity-preservation/#pos-preservation","page":"Positivity preservation","title":"Positivity Preservation","text":"","category":"section"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"It is common in BGC models to behave badly if any tracers go bellow zero, analytically this is fine because they (usually) can not get below zero, and it is unphysical for the concentration of something to be negative. Issues arise when the inaccuracy in numerical integration making some tracer become negative, usually leading to explosions (e.g. exp(-C) to inf), or bounds errors (e.g. log(C)). Essentially this occurs when the local error in the numerical scheme is sufficiently large that more than the available amount of tracer is consumed.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"There exists a set of numerical schemes which overcome this and guarantee positivity (provided a positivity preserving advection scheme and well-behaved diffusion scheme are used) but are complex to implement. Although we may do this in the future we have not yet done so in the meantime have provided some utilities which maintain positivity. The simplest option is to reset any negative tracers to zero, but this causes the model to gain mass. A slightly more complex version is to increase negative tracers to zero and remove the difference from other tracers with in the same conserved system.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"We have found this to be a satisfactory solution (when balanced against using much smaller time steps), as it tends to cause only a small and local transient change to the solution.","category":"page"},{"location":"numerical_implementation/positivity-preservation/","page":"Positivity preservation","title":"Positivity preservation","text":"See model components page for usage.","category":"page"},{"location":"generated/box/#box_example","page":"Box model","title":"Box model","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"In this example we setup a LOBSTER biogeochemical model in a single box configuration. This example demonstrates:","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"How to setup OceanBioME's biogeochemical models as a stand-alone box model","category":"page"},{"location":"generated/box/#Install-dependencies","page":"Box model","title":"Install dependencies","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"First we check we have the dependencies installed","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using Pkg\npkg\"add OceanBioME\"","category":"page"},{"location":"generated/box/#Model-setup","page":"Box model","title":"Model setup","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Load the packages and setup the initial and forcing conditions","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using OceanBioME, Oceananigans, Oceananigans.Units\nusing Oceananigans.Fields: FunctionField\n\nconst year = years = 365day\n\ngrid = BoxModelGrid()\nclock = Clock(time = zero(grid))\n","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This is forced by a prescribed time-dependent photosynthetically available radiation (PAR)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"PAR⁰(t) = 60 * (1 - cos((t + 15days) * 2π / year)) * (1 / (1 + 0.2 * exp(-((mod(t, year) - 200days) / 50days)^2))) + 2\n\nconst z = -10 # specify the nominal depth of the box for the PAR profile\nPAR_func(t) = PAR⁰(t) * exp(0.2z) # Modify the PAR based on the nominal depth and exponential decay\n\nPAR = FunctionField{Center, Center, Center}(PAR_func, grid; clock)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Set up the model. Here, first specify the biogeochemical model, followed by initial conditions and the start and end times","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"model = BoxModel(; biogeochemistry = LOBSTER(; grid, light_attenuation_model = PrescribedPhotosyntheticallyActiveRadiation(PAR)),\n                   clock)\n\nset!(model, NO₃ = 10.0, NH₄ = 0.1, P = 0.1, Z = 0.01)\n\nsimulation = Simulation(model; Δt = 5minutes, stop_time = 5years)\n\nsimulation.output_writers[:fields] = JLD2Writer(model, model.fields; filename = \"box.jld2\", schedule = TimeInterval(10days), overwrite_existing = true)\n\nprog(sim) = @info \"$(prettytime(time(sim))) in $(prettytime(simulation.run_wall_time))\"\n\nsimulation.callbacks[:progress] = Callback(prog, IterationInterval(1000000))","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"Callback of prog on IterationInterval(1000000)","category":"page"},{"location":"generated/box/#Run-the-model-(should-only-take-a-few-seconds)","page":"Box model","title":"Run the model (should only take a few seconds)","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"@info \"Running the model...\"\nrun!(simulation)","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"[ Info: Running the model...\n[ Info: Initializing simulation...\n[ Info: 0 seconds in 0 seconds\n[ Info:     ... simulation initialization complete (1.254 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (492.762 ms).\n[ Info: Simulation is stopping after running for 13.971 seconds.\n[ Info: Simulation time 1825 days equals or exceeds stop time 1825 days.\n","category":"page"},{"location":"generated/box/#Load-the-output","page":"Box model","title":"Load the output","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"times = FieldTimeSeries(\"box.jld2\", \"P\").times\n\ntimeseries = NamedTuple{keys(model.fields)}(FieldTimeSeries(\"box.jld2\", \"$field\")[1, 1, 1, :] for field in keys(model.fields))","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(NO₃ = [10.0, 10.014827728271484, 9.95897388458252, 9.803510665893555, 9.442779541015625, 8.662609100341797, 7.509425640106201, 6.28082275390625, 4.7296462059021, 2.6037657260894775, 0.49699243903160095, 0.02149912528693676, 0.0014896010980010033, 0.0005181109299883246, 0.0004041373322252184, 0.00037882782635279, 0.00038870100979693234, 0.0004274704842828214, 0.0004989264998584986, 0.000614366726949811, 0.000799674482550472, 0.0011245888890698552, 0.001842557336203754, 0.004405509680509567, 0.019116252660751343, 0.09178268164396286, 0.32754045724868774, 0.8143759965896606, 1.5426056385040283, 2.446213483810425, 3.442251205444336, 4.453429222106934, 5.4193501472473145, 6.299293041229248, 7.070689678192139, 7.725664138793945, 8.266854286193848, 8.703203201293945, 9.045788764953613, 9.301924705505371, 9.45376205444336, 9.216421127319336, 7.959939002990723, 5.998084545135498, 4.28953218460083, 2.4428603649139404, 0.5708245635032654, 0.030698133632540703, 0.002071954309940338, 0.0006018210551701486, 0.0004324908077251166, 0.0003859775315504521, 0.0003806492895819247, 0.000404708698624745, 0.0004587739531416446, 0.0005501210107468069, 0.0006956583238206804, 0.000936620868742466, 0.0013998926151543856, 0.002654946641996503, 0.008666991256177425, 0.04288213700056076, 0.1816270649433136, 0.5381699800491333, 1.151710033416748, 1.9775946140289307, 2.9378275871276855, 3.950180768966675, 4.945048809051514, 5.871870517730713, 6.6993489265441895, 7.412761211395264, 8.01002311706543, 8.497440338134766, 8.885568618774414, 9.18465805053711, 9.3948392868042, 9.444413185119629, 8.720569610595703, 6.983459949493408, 5.122056007385254, 3.4110658168792725, 1.42829430103302, 0.14268764853477478, 0.007129342760890722, 0.0009154630824923515, 0.0004874455335084349, 0.0004022857756353915, 0.00037936310400255024, 0.00038913197931833565, 0.00042769438005052507, 0.0004990406450815499, 0.0006144299986772239, 0.0007997139473445714, 0.0011246178764849901, 0.001842585508711636, 0.00440555764362216, 0.019116384908556938, 0.09178299456834793, 0.3275409936904907, 0.8143766522407532, 1.5426063537597656, 2.446214199066162, 3.4422519207000732, 4.453429698944092, 5.419350624084473, 6.299293518066406, 7.070690155029297, 7.725664138793945, 8.266855239868164, 8.703203201293945, 9.045788764953613, 9.301924705505371, 9.45376205444336, 9.216421127319336, 7.959939002990723, 5.998084545135498, 4.28953218460083, 2.4428603649139404, 0.5708246231079102, 0.030698135495185852, 0.002071954309940338, 0.0006018210551701486, 0.0004324908077251166, 0.0003859775315504521, 0.0003806492895819247, 0.000404708698624745, 0.0004587739531416446, 0.0005501210107468069, 0.0006956583238206804, 0.000936620868742466, 0.0013998926151543856, 0.002654946641996503, 0.008666991256177425, 0.04288213700056076, 0.1816270649433136, 0.5381699800491333, 1.151710033416748, 1.9775946140289307, 2.9378275871276855, 3.950180768966675, 4.945048809051514, 5.871870517730713, 6.6993489265441895, 7.412761211395264, 8.01002311706543, 8.497440338134766, 8.885568618774414, 9.18465805053711, 9.3948392868042, 9.444413185119629, 8.720569610595703, 6.983459949493408, 5.122056007385254, 3.4110658168792725, 1.42829430103302, 0.14268764853477478, 0.007129342760890722, 0.0009154630824923515, 0.0004874455335084349, 0.0004022857756353915, 0.00037936310400255024, 0.00038913197931833565, 0.00042769438005052507, 0.0004990406450815499, 0.0006144299986772239, 0.0007997139473445714, 0.0011246178764849901, 0.001842585508711636, 0.00440555764362216, 0.019116384908556938, 0.09178299456834793, 0.3275409936904907, 0.8143766522407532, 1.5426063537597656, 2.446214199066162, 3.4422519207000732, 4.453429698944092, 5.419350624084473, 6.299293518066406, 7.070690155029297, 7.725664138793945, 8.266855239868164], NH₄ = [0.10000000149011612, 0.04295828938484192, 0.00011986427125521004, 0.000110588975076098, 0.00011421810631873086, 0.00016773933020886034, 0.0003909073129761964, 0.0006881710141897202, 0.0007237876998260617, 0.0007002828060649335, 0.0009715622873045504, 0.0037522525526583195, 0.0044226860627532005, 0.0034332985524088144, 0.003073380095884204, 0.003004128346219659, 0.003119824919849634, 0.0034144080709666014, 0.003921955358237028, 0.0047225854359567165, 0.006003470625728369, 0.008297214284539223, 0.013672569766640663, 0.034302063286304474, 0.12991629540920258, 0.37993282079696655, 0.7782343029975891, 1.247438669204712, 1.659198522567749, 1.9245091676712036, 2.026623010635376, 1.9898605346679688, 1.852348804473877, 1.6526621580123901, 1.423944354057312, 1.1914905309677124, 0.9722262024879456, 0.7752810120582581, 0.6026427745819092, 0.44728726148605347, 0.27661237120628357, 0.00016003442578949034, 0.0001333428081125021, 0.0003633669693954289, 0.0008385949768126011, 0.0009364128927700222, 0.001168465823866427, 0.004090860020369291, 0.00512328976765275, 0.003748397808521986, 0.0032042916864156723, 0.003022753866389394, 0.003046091180294752, 0.003246117616072297, 0.0036392435431480408, 0.004278411157429218, 0.005283518694341183, 0.006960444618016481, 0.01030957791954279, 0.02012486569583416, 0.06635681539773941, 0.23405666649341583, 0.5636929869651794, 1.011699914932251, 1.4679362773895264, 1.812601923942566, 1.9950060844421387, 2.023333787918091, 1.9312058687210083, 1.7580385208129883, 1.5401538610458374, 1.3069335222244263, 1.0794669389724731, 0.8706732988357544, 0.6860883235931396, 0.523810625076294, 0.36835777759552, 0.14620672166347504, 0.00012419659469742328, 0.0001989951852010563, 0.0006177780451253057, 0.0009296899661421776, 0.0009630321874283254, 0.0020232186652719975, 0.0056090643629431725, 0.004302455112338066, 0.003410106524825096, 0.003083109622821212, 0.0030120103619992733, 0.003123758127912879, 0.0034162369556725025, 0.003922843374311924, 0.004723055753856897, 0.006003750022500753, 0.008297410793602467, 0.013672759756445885, 0.03430239111185074, 0.12991690635681152, 0.3799334168434143, 0.7782347202301025, 1.2474387884140015, 1.659198522567749, 1.924509048461914, 2.026622772216797, 1.9898604154586792, 1.8523485660552979, 1.6526620388031006, 1.423944115638733, 1.1914904117584229, 0.9722261428833008, 0.7752809524536133, 0.6026427149772644, 0.4472872018814087, 0.2766123414039612, 0.00016003442578949034, 0.0001333428081125021, 0.00036336699849925935, 0.000838595035020262, 0.0009364128927700222, 0.001168465823866427, 0.004090860020369291, 0.00512328976765275, 0.003748397808521986, 0.0032042916864156723, 0.003022753866389394, 0.003046091180294752, 0.003246117616072297, 0.0036392435431480408, 0.004278411157429218, 0.005283518694341183, 0.006960444618016481, 0.01030957791954279, 0.02012486569583416, 0.06635681539773941, 0.23405666649341583, 0.5636929869651794, 1.011699914932251, 1.4679362773895264, 1.812601923942566, 1.9950060844421387, 2.023333787918091, 1.9312058687210083, 1.7580385208129883, 1.5401538610458374, 1.3069335222244263, 1.0794669389724731, 0.8706732988357544, 0.6860883235931396, 0.523810625076294, 0.36835777759552, 0.14620672166347504, 0.00012419659469742328, 0.0001989951852010563, 0.0006177780451253057, 0.0009296899661421776, 0.0009630321874283254, 0.0020232186652719975, 0.0056090643629431725, 0.004302455112338066, 0.003410106524825096, 0.003083109622821212, 0.0030120103619992733, 0.003123758127912879, 0.0034162369556725025, 0.003922843374311924, 0.004723055753856897, 0.006003750022500753, 0.008297410793602467, 0.013672759756445885, 0.03430239111185074, 0.12991690635681152, 0.3799334168434143, 0.7782347202301025, 1.2474387884140015, 1.659198522567749, 1.924509048461914, 2.026622772216797, 1.9898604154586792, 1.8523485660552979, 1.6526620388031006, 1.423944115638733, 1.1914904117584229, 0.9722261428833008], P = [0.10000000149011612, 0.130426824092865, 0.20609140396118164, 0.3110711872577667, 0.5239167213439941, 0.781402051448822, 0.7339014410972595, 0.693625271320343, 0.8497739434242249, 1.075597882270813, 1.0472710132598877, 0.693520188331604, 0.6849914789199829, 0.7183013558387756, 0.7318313121795654, 0.7358121275901794, 0.7369656562805176, 0.7373128533363342, 0.7373827695846558, 0.7373169660568237, 0.7371252179145813, 0.7366747260093689, 0.7352574467658997, 0.7279763221740723, 0.6939691305160522, 0.6204712986946106, 0.5107722282409668, 0.38963356614112854, 0.2927771508693695, 0.22251692414283752, 0.16985300183296204, 0.12899188697338104, 0.0973038524389267, 0.0734545961022377, 0.056447770446538925, 0.045394010841846466, 0.03971261903643608, 0.039762094616889954, 0.04856622964143753, 0.07819723337888718, 0.18235249817371368, 0.6523274779319763, 1.2134788036346436, 1.0639389753341675, 0.8541514277458191, 0.9869958758354187, 1.0134963989257812, 0.7099952697753906, 0.6876881122589111, 0.7183602452278137, 0.7317607998847961, 0.7358072996139526, 0.7369864583015442, 0.7373450994491577, 0.737428605556488, 0.7373872399330139, 0.7372494339942932, 0.7369549870491028, 0.736195981502533, 0.7331582307815552, 0.7159920334815979, 0.6618388295173645, 0.5696972012519836, 0.448682963848114, 0.3374009132385254, 0.2549114227294922, 0.19444705545902252, 0.148159921169281, 0.11209917813539505, 0.08446429669857025, 0.06415459513664246, 0.05022508278489113, 0.04189293086528778, 0.038929592818021774, 0.04267220199108124, 0.059214942157268524, 0.11320219188928604, 0.3357701301574707, 0.9427752494812012, 1.2635836601257324, 0.8955761194229126, 0.9006602764129639, 1.0542821884155273, 0.8389922976493835, 0.6779425740242004, 0.7048365473747253, 0.7269001007080078, 0.7343969345092773, 0.7365683317184448, 0.7372186183929443, 0.7374076247215271, 0.7374199628829956, 0.7373315691947937, 0.7371309399604797, 0.7366769313812256, 0.7352582812309265, 0.7279765605926514, 0.6939691305160522, 0.6204712390899658, 0.5107722282409668, 0.38963356614112854, 0.2927771508693695, 0.22251692414283752, 0.16985300183296204, 0.12899190187454224, 0.0973038524389267, 0.0734545961022377, 0.056447770446538925, 0.045394010841846466, 0.03971261903643608, 0.039762094616889954, 0.04856622964143753, 0.07819723337888718, 0.18235251307487488, 0.6523274779319763, 1.2134788036346436, 1.0639389753341675, 0.8541514277458191, 0.9869958758354187, 1.0134963989257812, 0.7099952697753906, 0.6876881122589111, 0.7183602452278137, 0.7317607998847961, 0.7358072996139526, 0.7369864583015442, 0.7373450994491577, 0.737428605556488, 0.7373872399330139, 0.7372494339942932, 0.7369549870491028, 0.736195981502533, 0.7331582307815552, 0.7159920334815979, 0.6618388295173645, 0.5696972012519836, 0.448682963848114, 0.3374009132385254, 0.2549114227294922, 0.19444705545902252, 0.148159921169281, 0.11209917813539505, 0.08446429669857025, 0.06415459513664246, 0.05022508278489113, 0.04189293086528778, 0.038929592818021774, 0.04267220199108124, 0.059214942157268524, 0.11320219188928604, 0.3357701301574707, 0.9427752494812012, 1.2635836601257324, 0.8955761194229126, 0.9006602764129639, 1.0542821884155273, 0.8389922976493835, 0.6779425740242004, 0.7048365473747253, 0.7269001007080078, 0.7343969345092773, 0.7365683317184448, 0.7372186183929443, 0.7374076247215271, 0.7374199628829956, 0.7373315691947937, 0.7371309399604797, 0.7366769313812256, 0.7352582812309265, 0.7279765605926514, 0.6939691305160522, 0.6204712390899658, 0.5107722282409668, 0.38963356614112854, 0.2927771508693695, 0.22251692414283752, 0.16985300183296204, 0.12899190187454224, 0.0973038524389267, 0.0734545961022377, 0.056447770446538925, 0.045394010841846466, 0.03971261903643608], Z = [0.009999999776482582, 0.01036160159856081, 0.013349762186408043, 0.022914478555321693, 0.05925460532307625, 0.2215864509344101, 0.5632218718528748, 0.7326152324676514, 0.8514434695243835, 1.0254400968551636, 1.1385185718536377, 0.9785510897636414, 0.8516144752502441, 0.8390449285507202, 0.8513263463973999, 0.8599944114685059, 0.8638564944267273, 0.8653374910354614, 0.8658534288406372, 0.8659818768501282, 0.8659201860427856, 0.8656766414642334, 0.8649802803993225, 0.8620098829269409, 0.8465665578842163, 0.8009541630744934, 0.7169097661972046, 0.5979580283164978, 0.47117912769317627, 0.3594959080219269, 0.26838579773902893, 0.1961282193660736, 0.14010721445083618, 0.09793174266815186, 0.06724778562784195, 0.04567970708012581, 0.030999064445495605, 0.021328672766685486, 0.015278157778084278, 0.012102610431611538, 0.01261300127953291, 0.030619146302342415, 0.19939349591732025, 0.7825743556022644, 0.9584974646568298, 1.0127965211868286, 1.096345067024231, 0.9769718050956726, 0.8566009998321533, 0.8410231471061707, 0.8518320322036743, 0.8601090312004089, 0.8638952374458313, 0.8653673529624939, 0.8658894896507263, 0.8660331964492798, 0.8660032153129578, 0.8658403158187866, 0.8654317855834961, 0.8640806674957275, 0.8570666909217834, 0.8282279372215271, 0.7640365362167358, 0.6604833602905273, 0.5336382985115051, 0.41280949115753174, 0.31141963601112366, 0.23006920516490936, 0.16624127328395844, 0.11743456870317459, 0.08130263537168503, 0.05546963959932327, 0.03760595992207527, 0.025637075304985046, 0.017915893346071243, 0.013341499492526054, 0.01169651746749878, 0.01655091531574726, 0.0739053338766098, 0.47598394751548767, 0.9260565638542175, 0.9752743244171143, 1.064494013786316, 1.0633857250213623, 0.8993756175041199, 0.8415043950080872, 0.8460263609886169, 0.8566446304321289, 0.8624204397201538, 0.8648105263710022, 0.8656989336013794, 0.8659906983375549, 0.8660345673561096, 0.8659405708312988, 0.8656845092773438, 0.864983320236206, 0.8620110750198364, 0.846566915512085, 0.800954282283783, 0.7169097661972046, 0.597957968711853, 0.47117912769317627, 0.3594959080219269, 0.26838579773902893, 0.1961282193660736, 0.14010721445083618, 0.09793174266815186, 0.06724778562784195, 0.04567970708012581, 0.030999064445495605, 0.021328672766685486, 0.015278157778084278, 0.012102610431611538, 0.01261300127953291, 0.030619148164987564, 0.19939351081848145, 0.7825743556022644, 0.9584974050521851, 1.0127965211868286, 1.096345067024231, 0.9769718050956726, 0.8566009998321533, 0.8410231471061707, 0.8518320322036743, 0.8601090312004089, 0.8638952374458313, 0.8653673529624939, 0.8658894896507263, 0.8660331964492798, 0.8660032153129578, 0.8658403158187866, 0.8654317855834961, 0.8640806674957275, 0.8570666909217834, 0.8282279372215271, 0.7640365362167358, 0.6604833602905273, 0.5336382985115051, 0.41280949115753174, 0.31141963601112366, 0.23006920516490936, 0.16624127328395844, 0.11743456870317459, 0.08130263537168503, 0.05546963959932327, 0.03760595992207527, 0.025637075304985046, 0.017915893346071243, 0.013341499492526054, 0.01169651746749878, 0.01655091531574726, 0.0739053338766098, 0.47598394751548767, 0.9260565638542175, 0.9752743244171143, 1.064494013786316, 1.0633857250213623, 0.8993756175041199, 0.8415043950080872, 0.8460263609886169, 0.8566446304321289, 0.8624204397201538, 0.8648105263710022, 0.8656989336013794, 0.8659906983375549, 0.8660345673561096, 0.8659405708312988, 0.8656845092773438, 0.864983320236206, 0.8620110750198364, 0.846566915512085, 0.800954282283783, 0.7169097661972046, 0.597957968711853, 0.47117912769317627, 0.3594959080219269, 0.26838579773902893, 0.1961282193660736, 0.14010721445083618, 0.09793174266815186, 0.06724778562784195, 0.04567970708012581, 0.030999064445495605], sPOM = [0.0, 0.003573118709027767, 0.009635274298489094, 0.022307224571704865, 0.0590001717209816, 0.17683856189250946, 0.3791361153125763, 0.46619272232055664, 0.5694960951805115, 0.7631527781486511, 0.8850253820419312, 0.6406363844871521, 0.5343838930130005, 0.5363081693649292, 0.5497902035713196, 0.5571796298027039, 0.5601804256439209, 0.5612833499908447, 0.5616522431373596, 0.5617240071296692, 0.5616370439529419, 0.5613707304000854, 0.5606057643890381, 0.5572201609611511, 0.539900541305542, 0.4932370185852051, 0.41649436950683594, 0.32241830229759216, 0.23768512904644012, 0.17293454706668854, 0.1250392198562622, 0.08941566199064255, 0.06296256184577942, 0.04362374171614647, 0.029821671545505524, 0.020225632935762405, 0.013720390386879444, 0.00943384412676096, 0.006775324232876301, 0.005605016835033894, 0.007789107505232096, 0.0443393774330616, 0.25883346796035767, 0.6455707550048828, 0.6709123849868774, 0.7297868132591248, 0.8283772468566895, 0.6453545093536377, 0.5391706228256226, 0.5377135276794434, 0.5500903725624084, 0.5572451949119568, 0.5602094531059265, 0.5613113045692444, 0.5616881251335144, 0.5617759823799133, 0.5617226958274841, 0.5615440607070923, 0.5611026287078857, 0.5595915913581848, 0.5515667200088501, 0.520501971244812, 0.4583677649497986, 0.3698858916759491, 0.27768900990486145, 0.20288483798503876, 0.1471981555223465, 0.10592062771320343, 0.07518742978572845, 0.05250953882932663, 0.036118652671575546, 0.02457292005419731, 0.016647232696413994, 0.011343947611749172, 0.007924888283014297, 0.005979523994028568, 0.005911155138164759, 0.01479307934641838, 0.11755424737930298, 0.4696583151817322, 0.6847730875015259, 0.6813927292823792, 0.7964075207710266, 0.7614238858222961, 0.5696017742156982, 0.5334881544113159, 0.544272780418396, 0.5543724894523621, 0.5590761303901672, 0.5608985424041748, 0.5615530610084534, 0.5617549419403076, 0.5617635250091553, 0.5616523623466492, 0.5613766312599182, 0.5606080293655396, 0.557220995426178, 0.5399007797241211, 0.49323707818984985, 0.41649436950683594, 0.32241830229759216, 0.23768512904644012, 0.17293454706668854, 0.1250392198562622, 0.08941566199064255, 0.06296256184577942, 0.04362374171614647, 0.029821671545505524, 0.020225632935762405, 0.013720391318202019, 0.00943384412676096, 0.006775324232876301, 0.005605016835033894, 0.007789107970893383, 0.0443393811583519, 0.25883346796035767, 0.6455707550048828, 0.6709123849868774, 0.7297868132591248, 0.8283772468566895, 0.6453545093536377, 0.5391706228256226, 0.5377135276794434, 0.5500903725624084, 0.5572451949119568, 0.5602094531059265, 0.5613113045692444, 0.5616881251335144, 0.5617759823799133, 0.5617226958274841, 0.5615440607070923, 0.5611026287078857, 0.5595915913581848, 0.5515667200088501, 0.520501971244812, 0.4583677649497986, 0.3698858916759491, 0.27768900990486145, 0.20288483798503876, 0.1471981555223465, 0.10592062771320343, 0.07518742978572845, 0.05250953882932663, 0.036118652671575546, 0.02457292005419731, 0.016647232696413994, 0.011343947611749172, 0.007924888283014297, 0.005979523994028568, 0.005911155138164759, 0.01479307934641838, 0.11755424737930298, 0.4696583151817322, 0.6847730875015259, 0.6813927292823792, 0.7964075207710266, 0.7614238858222961, 0.5696017742156982, 0.5334881544113159, 0.544272780418396, 0.5543724894523621, 0.5590761303901672, 0.5608985424041748, 0.5615530610084534, 0.5617549419403076, 0.5617635250091553, 0.5616523623466492, 0.5613766312599182, 0.5606080293655396, 0.557220995426178, 0.5399007797241211, 0.49323707818984985, 0.41649436950683594, 0.32241830229759216, 0.23768512904644012, 0.17293454706668854, 0.1250392198562622, 0.08941566199064255, 0.06296256184577942, 0.04362374171614647, 0.029821671545505524, 0.020225632935762405, 0.013720391318202019], bPOM = [0.0, 0.0035753059200942516, 0.009651800617575645, 0.02240138314664364, 0.05967976897954941, 0.1868450790643692, 0.5215983986854553, 0.9961959719657898, 1.5059599876403809, 2.199458122253418, 3.03590726852417, 3.302908420562744, 3.0315897464752197, 2.7793807983398438, 2.64855694770813, 2.593064308166504, 2.5712506771087646, 2.5627691745758057, 2.5593466758728027, 2.5577850341796875, 2.5568127632141113, 2.5557966232299805, 2.5539662837982178, 2.5481679439544678, 2.5203633308410645, 2.4235126972198486, 2.2144429683685303, 1.8863080739974976, 1.4941529035568237, 1.1155263185501099, 0.7964250445365906, 0.5490739941596985, 0.36788925528526306, 0.2407766580581665, 0.1546810269355774, 0.09802621603012085, 0.0616043284535408, 0.03864206746220589, 0.024484122171998024, 0.016304107382893562, 0.014247194863855839, 0.04831695184111595, 0.26861441135406494, 0.9157042503356934, 1.7538809776306152, 2.388204574584961, 3.0202836990356445, 3.2533481121063232, 3.0133094787597656, 2.7746217250823975, 2.647498607635498, 2.592849016189575, 2.5712389945983887, 2.562832832336426, 2.5594630241394043, 2.55796217918396, 2.557086706161499, 2.5562732219696045, 2.555040121078491, 2.552039384841919, 2.539437770843506, 2.4838435649871826, 2.334660291671753, 2.0632476806640625, 1.6930092573165894, 1.2993121147155762, 0.947170615196228, 0.6638798117637634, 0.4508998990058899, 0.2984060049057007, 0.1933756023645401, 0.12330809235572815, 0.07776378840208054, 0.04877663403749466, 0.030681297183036804, 0.019748268648982048, 0.014222678728401661, 0.019820282235741615, 0.12140855193138123, 0.5275421142578125, 1.3604999780654907, 2.08145809173584, 2.7087461948394775, 3.225050926208496, 3.154960870742798, 2.8800647258758545, 2.6988143920898438, 2.6140851974487305, 2.579535484313965, 2.5660696029663086, 2.5607845783233643, 2.558582067489624, 2.5574891567230225, 2.5566980838775635, 2.5557522773742676, 2.5539491176605225, 2.548161268234253, 2.5203604698181152, 2.423511266708374, 2.214442253112793, 1.8863075971603394, 1.4941526651382446, 1.1155260801315308, 0.796424925327301, 0.5490739345550537, 0.3678892254829407, 0.2407766431570053, 0.1546810120344162, 0.09802620857954025, 0.061604324728250504, 0.03864206373691559, 0.024484120309352875, 0.016304107382893562, 0.014247193932533264, 0.04831695556640625, 0.26861441135406494, 0.9157042503356934, 1.7538809776306152, 2.388204574584961, 3.0202834606170654, 3.2533481121063232, 3.0133094787597656, 2.7746217250823975, 2.647498607635498, 2.592849016189575, 2.5712389945983887, 2.562832832336426, 2.5594630241394043, 2.55796217918396, 2.557086706161499, 2.5562732219696045, 2.555040121078491, 2.552039384841919, 2.539437770843506, 2.4838435649871826, 2.334660291671753, 2.0632476806640625, 1.6930092573165894, 1.2993121147155762, 0.947170615196228, 0.6638798117637634, 0.4508998990058899, 0.2984060049057007, 0.1933756023645401, 0.12330809235572815, 0.07776378840208054, 0.04877663403749466, 0.030681297183036804, 0.019748268648982048, 0.014222678728401661, 0.019820282235741615, 0.12140855193138123, 0.5275421142578125, 1.3604999780654907, 2.08145809173584, 2.7087461948394775, 3.225050926208496, 3.154960870742798, 2.8800647258758545, 2.6988143920898438, 2.6140851974487305, 2.579535484313965, 2.5660696029663086, 2.5607845783233643, 2.558582067489624, 2.5574891567230225, 2.5566980838775635, 2.5557522773742676, 2.5539491176605225, 2.548161268234253, 2.5203604698181152, 2.423511266708374, 2.214442253112793, 1.8863075971603394, 1.4941526651382446, 1.1155260801315308, 0.796424925327301, 0.5490739345550537, 0.3678892254829407, 0.2407766431570053, 0.1546810120344162, 0.09802620857954025, 0.061604324728250504], DOM = [0.0, 0.004277539439499378, 0.012178177945315838, 0.0276845321059227, 0.06525460630655289, 0.1805507391691208, 0.5023255348205566, 1.039859652519226, 1.7029566764831543, 2.5418851375579834, 3.605313777923584, 4.569132328033447, 5.101508140563965, 5.333013534545898, 5.425017833709717, 5.460566520690918, 5.474238395690918, 5.47945499420166, 5.481344223022461, 5.481855392456055, 5.481701374053955, 5.481059551239014, 5.47967529296875, 5.475917816162109, 5.46016788482666, 5.40010929107666, 5.245605945587158, 4.951867580413818, 4.512401580810547, 3.968803644180298, 3.381422519683838, 2.8031005859375, 2.270038366317749, 1.802258014678955, 1.4071675539016724, 1.0835199356079102, 0.8248827457427979, 0.6223490834236145, 0.4664646089076996, 0.3485792875289917, 0.2626233696937561, 0.21781547367572784, 0.30960729718208313, 0.803763747215271, 1.6821871995925903, 2.6484193801879883, 3.679504871368408, 4.589541435241699, 5.106035232543945, 5.333930969238281, 5.4251813888549805, 5.460580825805664, 5.4742431640625, 5.479492664337158, 5.481432914733887, 5.482012748718262, 5.481958866119385, 5.481490135192871, 5.480520248413086, 5.4783501625061035, 5.470912933349609, 5.438648700714111, 5.337918281555176, 5.117830276489258, 4.7486162185668945, 4.249885559082031, 3.6769309043884277, 3.08845591545105, 2.5293173789978027, 2.0272767543792725, 1.5955455303192139, 1.2367295026779175, 0.9465998411178589, 0.7171987295150757, 0.5391490459442139, 0.40324699878692627, 0.30177024006843567, 0.23244522511959076, 0.23366287350654602, 0.489573210477829, 1.2204203605651855, 2.1592190265655518, 3.1568126678466797, 4.176436424255371, 4.89538049697876, 5.2448883056640625, 5.39008903503418, 5.447015285491943, 5.469008445739746, 5.477489948272705, 5.480711936950684, 5.481830596923828, 5.482043743133545, 5.48177433013916, 5.481087684631348, 5.4796857833862305, 5.475922107696533, 5.460169315338135, 5.400109767913818, 5.24560546875, 4.95186710357666, 4.512401103973389, 3.9688031673431396, 3.381422281265259, 2.803100347518921, 2.27003812789917, 1.8022578954696655, 1.4071674346923828, 1.0835198163986206, 0.8248826861381531, 0.6223490834236145, 0.4664645791053772, 0.3485792577266693, 0.2626233696937561, 0.21781545877456665, 0.30960729718208313, 0.803763747215271, 1.6821870803833008, 2.6484193801879883, 3.679504632949829, 4.589541435241699, 5.106035232543945, 5.333930969238281, 5.4251813888549805, 5.460580825805664, 5.4742431640625, 5.479492664337158, 5.481432914733887, 5.482012748718262, 5.481958866119385, 5.481490135192871, 5.480520248413086, 5.4783501625061035, 5.470912933349609, 5.438648700714111, 5.337918281555176, 5.117830276489258, 4.7486162185668945, 4.249885559082031, 3.6769309043884277, 3.08845591545105, 2.5293173789978027, 2.0272767543792725, 1.5955455303192139, 1.2367295026779175, 0.9465998411178589, 0.7171987295150757, 0.5391490459442139, 0.40324699878692627, 0.30177024006843567, 0.23244522511959076, 0.23366287350654602, 0.489573210477829, 1.2204203605651855, 2.1592190265655518, 3.1568126678466797, 4.176436424255371, 4.89538049697876, 5.2448883056640625, 5.39008903503418, 5.447015285491943, 5.469008445739746, 5.477489948272705, 5.480711936950684, 5.481830596923828, 5.482043743133545, 5.48177433013916, 5.481087684631348, 5.4796857833862305, 5.475922107696533, 5.460169315338135, 5.400109767913818, 5.24560546875, 4.95186710357666, 4.512401103973389, 3.9688031673431396, 3.381422281265259, 2.803100347518921, 2.27003812789917, 1.8022578954696655, 1.4071674346923828, 1.0835198163986206, 0.8248826861381531])","category":"page"},{"location":"generated/box/#And-plot","page":"Box model","title":"And plot","text":"","category":"section"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"using CairoMakie\n\nfig = Figure(size = (1200, 1200), fontsize = 24)\n\naxs = []\nfor (name, tracer) in pairs(timeseries)\n    idx = (length(axs))\n    push!(axs, Axis(fig[floor(Int, idx/2), Int(idx%2)], ylabel = \"$name\", xlabel = \"Year\", xticks=(0:10)))\n    lines!(axs[end], times / year, tracer, linewidth = 3)\nend\n\nfig","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"(Image: )","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"","category":"page"},{"location":"generated/box/","page":"Box model","title":"Box model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#*Ocean*-*Bio*geochemical-*M*odelling-*E*nvironment-OceanBioME","page":"Home","title":"Ocean Biogeochemical Modelling Environment - OceanBioME","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is a fast and flexible ocean biogeochemical modelling environment. It is highly modular and is designed to make it easy to implement and use a variety of biogeochemical and physical models. OceanBioME is built to be coupled with physics models from Oceananigans.jl allowing simulations across a wide range of spatial scales ranging from a global hydrostatic free surface model to non-hydrostatic large-eddy simulations. OceanBioME was designed specifically for ocean carbon dioxide removal applications. Notably, it includes active particles which allow individual-based models to be seamlessly coupled with the flow physics, ecosystem models, and carbonate chemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl currently provides a core of several biogeochemical models Nutrient–Phytoplankton–Zooplankton–Detritus (NPZD), LOBSTER, a medium complexity model, and an early implementation of PISCES, a complex model. It also provides essential utilities like air-sea gas exchange models to provide appropriate top boundary conditions, a carbon chemistry model for computing the pCO₂, and sediment models to for the benthic boundary. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl includes a framework for integrating the growth of biological/active particles which move around and can interact with the (Eulerian) tracer fields - for example, consuming nutrients and carbon dioxide while releasing dissolved organic material. A growth model for sugar kelp is currently implemented using active particles, and this model can be used in a variety of dynamical scenarios including free-floating or bottom-attached particles.","category":"page"},{"location":"#Quick-install","page":"Home","title":"Quick install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME is a registered Julia package. So to install it,","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download Julia.\nLaunch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"OceanBioME\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"compat: Julia 1.10\nOceanBioME.jl requires Julia version 1.10 or later.","category":"page"},{"location":"#Running-your-first-model","page":"Home","title":"Running your first model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As a simple example lets run a Nutrient-Phytoplankton-Zooplankton-Detritus (NPZD) model in a two-dimensional simulation of a buoyancy front. This example requires Oceananigans, so we install that first via:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"Oceananigans\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OceanBioME, Oceananigans\nusing Oceananigans.Units\n\ngrid = RectilinearGrid(CPU(), size = (160, 32), extent = (10000meters, 500meters), topology = (Bounded, Flat, Bounded))\n\nbiogeochemistry = NutrientPhytoplanktonZooplanktonDetritus(; grid) \n\nmodel = NonhydrostaticModel(; grid, biogeochemistry,\n                              advection = WENO(),\n\t\t\t      closure = AnisotropicMinimumDissipation(),\n                              buoyancy = SeawaterBuoyancy(constant_salinity = true))\n\n@inline front(x, z, μ, δ) = μ + δ * tanh((x - 7000 + 4 * z) / 500)\n\nPᵢ(x, z) = ifelse(z > -50, 0.03, 0.01)\nNᵢ(x, z) = front(x, z, 2.5, -2)\nTᵢ(x, z) = front(x, z, 9, 0.05)\n\nset!(model, N = Nᵢ, P = Pᵢ, Z = Pᵢ, T = Tᵢ)\n\nsimulation = Simulation(model; Δt = 50, stop_time = 4days)\n\nsimulation.output_writers[:tracers] = JLD2Writer(model, model.tracers,\n                                                 filename = \"buoyancy_front.jld2\",\n                                                 schedule = TimeInterval(24minute),\n                                                 overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can then load the saved output and visualize it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T = FieldTimeSeries(\"buoyancy_front.jld2\", \"T\")\nN = FieldTimeSeries(\"buoyancy_front.jld2\", \"N\")\nP = FieldTimeSeries(\"buoyancy_front.jld2\", \"P\")\n\nxc, yc, zc = nodes(T)\n\ntimes = T.times\n\nusing CairoMakie\n\nn = Observable(1)\n\nT_lims = (8.94, 9.06)\nN_lims = (0, 4.5)\nP_lims = (0.007, 0.02)\n\nTₙ = @lift interior(T[$n], :, 1, :)\nNₙ = @lift interior(N[$n], :, 1, :)\nPₙ = @lift interior(P[$n], :, 1, :)\n\nfig = Figure(size = (1000, 520), fontsize = 20)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title)\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"z (m)\", width = 770, yticks = [-400, -200, 0])\nax1 = Axis(fig[1, 1]; title = \"Temperature (°C)\", axis_kwargs...)\nax2 = Axis(fig[2, 1]; title = \"Nutrients concentration (mmol N / m³)\",axis_kwargs...)\nax3 = Axis(fig[3, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\n\nhm1 = heatmap!(ax1, xc, zc, Tₙ, colorrange = T_lims, colormap = Reverse(:lajolla), interpolate = true)\nhm2 = heatmap!(ax2, xc, zc, Nₙ, colorrange = N_lims, colormap = Reverse(:bamako), interpolate = true)\nhm3 = heatmap!(ax3, xc, zc, Pₙ, colorrange = P_lims, colormap = Reverse(:bamako), interpolate = true)\n\nColorbar(fig[1, 2], hm1, ticks = [8.95, 9.0, 9.05])\nColorbar(fig[2, 2], hm2, ticks = [0, 2, 4])\nColorbar(fig[3, 2], hm3, ticks = [0.01, 0.02, 0.03])\n\nrowgap!(fig.layout, 0)\n\nrecord(fig, \"buoyancy_front.mp4\", 1:length(times)) do i\n    n[] = i\nend\n\nnothing #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: buoyancy_front)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the example above, OceanBioME.jl provides the biogeochemistry and everything else is taken care of by Oceananigans.jl. For comprehensive documentation of the physics modelling see Oceananigans' Documentation; for biogeochemistry and other features we provide read below.","category":"page"},{"location":"#Places-to-find-OceanBioME-information","page":"Home","title":"Places to find OceanBioME information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation, which provides\ndocumented examples (browse them starting, e.g., from the single-column model),\nexplanations of model implementation methods,\ndetails of currently implemented models, and\na library documenting all user-facing objects and functions.\nDiscussions on the OceanBioME github\nIf you've got a question or something to talk about, don't hesitate to start a new discussion!\nIssues and pull requests also contain lots of information about problems we've found, solutions we're trying to implement, and ideas for the future.","category":"page"},{"location":"#Getting-in-touch","page":"Home","title":"Getting in touch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Whether you need help getting started with OceanBioME, found a bug, want OceanBioME to be more expanded, or just want to chat about our project, you can:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a discussion. \nOpen an issue. Issues are best if you think the OceanBioME source code needs attention: a bug, a sign error, an important missing feature, or a typo in the documentation.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OceanBioME as part of your research, teaching, or other activities, we would be grateful if you could cite our work below and mention OceanBioME by name, as well as citing and acknowledging Oceananigans as without them this package would not be possible.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{OceanBioMEJOSS,\n  doi = {10.21105/joss.05669},\n  url = {https://doi.org/10.21105/joss.05669},\n  year = {2023},\n  publisher = {The Open Journal},\n  volume = {8},\n  number = {90},\n  pages = {5669},\n  author = {Jago Strong-Wright and Si Chen and Navid C. Constantinou and Simone Silvestri and Gregory LeClaire Wagner and John R. Taylor},\n  title = {{OceanBioME.jl: A flexible environment for modelling the coupled interactions between ocean biogeochemistry and physics}},\n  journal = {Journal of Open Source Software}\n}","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OceanBioME.jl is supported through grants from the Center for Climate Repair at Cambridge and the Gordon and Betty Moore Foundation.","category":"page"},{"location":"generated/eady/#Biogeochemistry-in-submesoscale-eddies-in-the-Eady-model","page":"Baroclinic instability","title":"Biogeochemistry in submesoscale eddies in the Eady model","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"In this example we setup a 3D model with a constant background buoyancy gradient with associated thermal wind (the Eady model) with the LOBSTER biogeochemical model. This example demonstrates how to use biogeochemistry in a more complicated physical model. The parameters in this example correspond roughly to those used by Taylor (2016) and result to the generation of a single submesoscale eddy.","category":"page"},{"location":"generated/eady/#Install-dependencies","page":"Baroclinic instability","title":"Install dependencies","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"First we ensure we have the required dependencies installed","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using Pkg\npkg \"add OceanBioME, Oceananigans, CairoMakie\"","category":"page"},{"location":"generated/eady/#Model-setup","page":"Baroclinic instability","title":"Model setup","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"We load the required packages. Although not required, we also set the random seed to ensure reproducibility of the results.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using OceanBioME, Oceananigans, Printf\nusing Oceananigans.Units\n\nusing Random\nRandom.seed!(11)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Random.TaskLocalRNG()","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Construct a grid with uniform grid spacing.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"grid = RectilinearGrid(size = (32, 32, 8), extent = (1kilometer, 1kilometer, 100meters))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 1000.0) regularly spaced with Δx=31.25\n├── Periodic y ∈ [0.0, 1000.0) regularly spaced with Δy=31.25\n└── Bounded  z ∈ [-100.0, 0.0] regularly spaced with Δz=12.5","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Set the Coriolis and buoyancy models.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"coriolis = FPlane(f = 1e-4) # [s⁻¹]\nbuoyancy = SeawaterBuoyancy()","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"SeawaterBuoyancy{Float64}:\n├── gravitational_acceleration: 9.80665\n└── equation_of_state: LinearEquationOfState(thermal_expansion=0.000167, haline_contraction=0.00078)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify parameters that are used to construct the background state.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"background_state_parameters = (M = 1e-4,       # s⁻¹, geostrophic shear\n                               f = coriolis.f, # s⁻¹, Coriolis parameter\n                               N = 1e-4,       # s⁻¹, buoyancy frequency\n                               H = grid.Lz,\n                               g = buoyancy.gravitational_acceleration,\n                               α = buoyancy.equation_of_state.thermal_expansion)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(M = 0.0001, f = 0.0001, N = 0.0001, H = 100.0, g = 9.80665, α = 0.000167)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"We assume a background buoyancy B with a constant stratification and also a constant lateral gradient (in the zonal direction). The background velocity components U and V are prescribed so that the thermal wind relationship is satisfied, that is, f partial_z U = - partial_y B and f partial_z V = partial_x B.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"T(x, y, z, t, p) = (p.M^2 * x + p.N^2 * (z + p.H)) / (p.g * p.α)\nV(x, y, z, t, p) = p.M^2 / p.f * (z + p.H)\n\nV_field = BackgroundField(V, parameters = background_state_parameters)\nT_field = BackgroundField(T, parameters = background_state_parameters)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"BackgroundField{typeof(Main.var\"##227\".T), @NamedTuple{M::Float64, f::Float64, N::Float64, H::Float64, g::Float64, α::Float64}}\n├── func: T (generic function with 1 method)\n└── parameters: (M = 0.0001, f = 0.0001, N = 0.0001, H = 100.0, g = 9.80665, α = 0.000167)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Specify some horizontal and vertical viscosity and diffusivity.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"νᵥ = κᵥ = 1e-4 # [m² s⁻¹]\nvertical_diffusivity = VerticalScalarDiffusivity(ν = νᵥ, κ = κᵥ)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=0.0001)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Setup the biogeochemical model with optional carbonate chemistry turned on.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"biogeochemistry = LOBSTER(; grid,\n                            carbonates = true,\n                            open_bottom = true)\n\nDIC_bcs = FieldBoundaryConditions(top = CarbonDioxideGasExchangeBoundaryCondition())","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── top: FluxBoundaryCondition: DiscreteBoundaryFunction with (::GasExchange{Float64, OceanBioME.Models.GasExchangeModel.ScaledGasTransferVelocity.SchmidtScaledTransferVelocity{OceanBioME.Models.GasExchangeModel.PolynomialParameterisation{2, Tuple{Float64, Float64, Float64}}, OceanBioME.Models.GasExchangeModel.PolynomialParameterisation{4, NTuple{5, Float64}}}, OceanBioME.Models.GasExchangeModel.CarbonDioxideConcentration{CarbonChemistry{OceanBioME.Models.CarbonChemistryModel.K0{Float64}, @NamedTuple{K1::OceanBioME.Models.CarbonChemistryModel.K1{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, K2::OceanBioME.Models.CarbonChemistryModel.K2{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}}, OceanBioME.Models.CarbonChemistryModel.KB{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, OceanBioME.Models.CarbonChemistryModel.KS{OceanBioME.Models.CarbonChemistryModel.IonicStrength{Float64}, Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, OceanBioME.Models.CarbonChemistryModel.KF{OceanBioME.Models.CarbonChemistryModel.IonicStrength{Float64}, OceanBioME.Models.CarbonChemistryModel.KS{OceanBioME.Models.CarbonChemistryModel.IonicStrength{Float64}, Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, @NamedTuple{KP1::OceanBioME.Models.CarbonChemistryModel.KP{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, KP2::OceanBioME.Models.CarbonChemistryModel.KP{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, KP3::OceanBioME.Models.CarbonChemistryModel.KP{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}}, OceanBioME.Models.CarbonChemistryModel.KSi{OceanBioME.Models.CarbonChemistryModel.IonicStrength{Float64}, Float64}, OceanBioME.Models.CarbonChemistryModel.KW{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, OceanBioME.Models.CarbonChemistryModel.IonicStrength{Float64}, OceanBioME.Models.CarbonChemistryModel.KSP{Float64, OceanBioME.Models.CarbonChemistryModel.PressureCorrection{Float64}}, typeof(OceanBioME.Models.teos10_polynomial_approximation)}, OceanBioME.Models.GasExchangeModel.PolynomialVirialCoefficientForCarbonDioxide{Float64}, OceanBioME.Models.GasExchangeModel.CrossVirialCoefficientForCarbonDioxide{Float64}, Float64, Nothing}, Float64})\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Model instantiation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"model = NonhydrostaticModel(; grid,\n                              biogeochemistry,\n                              boundary_conditions = (DIC = DIC_bcs, ),\n                              advection = WENO(),\n                              timestepper = :RungeKutta3,\n                              coriolis,\n                              tracers = (:T, :S),\n                              buoyancy,\n                              background_fields = (T = T_field, v = V_field),\n                              closure = vertical_diffusivity)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── timestepper: RungeKutta3TimeStepper\n├── advection scheme: WENO{3, Float64, Float32}(order=5)\n├── tracers: (T, S, NO₃, NH₄, P, Z, sPOM, bPOM, DOM, DIC, Alk)\n├── closure: VerticalScalarDiffusivity{ExplicitTimeDiscretization}(ν=0.0001, κ=(T=0.0001, S=0.0001, NO₃=0.0001, NH₄=0.0001, P=0.0001, Z=0.0001, sPOM=0.0001, bPOM=0.0001, DOM=0.0001, DIC=0.0001, Alk=0.0001))\n├── buoyancy: SeawaterBuoyancy with g=9.80665 and LinearEquationOfState(thermal_expansion=0.000167, haline_contraction=0.00078) with ĝ = NegativeZDirection()\n└── coriolis: FPlane{Float64}(f=0.0001)","category":"page"},{"location":"generated/eady/#Initial-conditions","page":"Baroclinic instability","title":"Initial conditions","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Start with a bit of random noise added to the background thermal wind and an arbitary biogeochemical state.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Ξ(z) = randn() * z / grid.Lz * (z / grid.Lz + 1)\n\nŨ = 1e-3\nuᵢ(x, y, z) = Ũ * Ξ(z)\nvᵢ(x, y, z) = Ũ * Ξ(z)\n\nset!(model, u=uᵢ, v=vᵢ, P = 0.03, Z = 0.03, NO₃ = 4.0, NH₄ = 0.05, DIC = 2200.0, Alk = 2409.0, S = 35, T = 20)","category":"page"},{"location":"generated/eady/#Setup-the-simulation","page":"Baroclinic instability","title":"Setup the simulation","text":"","category":"section"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Choose an appropriate initial timestep for this resolution and set up the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Δx = minimum_xspacing(grid, Center(), Center(), Center())\nΔy = minimum_yspacing(grid, Center(), Center(), Center())\nΔz = minimum_zspacing(grid, Center(), Center(), Center())\n\nΔt₀ = 0.75 * min(Δx, Δy, Δz) / V(0, 0, 0, 0, background_state_parameters)\n\nsimulation = Simulation(model, Δt = Δt₀, stop_time = 10days)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Simulation of NonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── Next time step: 15.625 minutes\n├── Elapsed wall time: 0 seconds\n├── Wall time per iteration: NaN days\n├── Stop time: 10 days\n├── Stop iteration: Inf\n├── Wall time limit: Inf\n├── Minimum relative step: 0.0\n├── Callbacks: OrderedDict with 4 entries:\n│   ├── stop_time_exceeded => 4\n│   ├── stop_iteration_exceeded => -\n│   ├── wall_time_limit_exceeded => e\n│   └── nan_checker => }\n├── Output writers: OrderedDict with no entries\n└── Diagnostics: OrderedDict with no entries","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Adapt the time step while keeping the CFL number fixed.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"wizard = TimeStepWizard(cfl = 0.75, diffusive_cfl = 0.75, max_Δt = 30minutes)\nsimulation.callbacks[:wizard] = Callback(wizard, IterationInterval(5))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Create a progress message.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"progress(sim) = @printf(\"i: % 6d, sim time: % 10s, wall time: % 10s, Δt: % 10s, CFL: %.2e\\n\",\n                        sim.model.clock.iteration,\n                        prettytime(sim.model.clock.time),\n                        prettytime(sim.run_wall_time),\n                        prettytime(sim.Δt),\n                        AdvectiveCFL(sim.Δt)(sim.model))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(20))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Callback of progress on IterationInterval(20)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Here, we add some diagnostics to calculate and output.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"u, v, w = model.velocities # unpack velocity `Field`s","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"NamedTuple with 3 Fields on 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo:\n├── u: 32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Center, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n├── v: 32×32×8 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n└── w: 32×32×9 Field{Oceananigans.Grids.Center, Oceananigans.Grids.Center, Oceananigans.Grids.Face} on RectilinearGrid on Oceananigans.Architectures.CPU","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and also calculate the vertical vorticity.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"ζ = Field(∂x(v) - ∂y(u))","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"32×32×8 Field{Oceananigans.Grids.Face, Oceananigans.Grids.Face, Oceananigans.Grids.Center} on RectilinearGrid on Oceananigans.Architectures.CPU\n├── grid: 32×32×8 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── boundary conditions: FieldBoundaryConditions\n│   └── west: Periodic, east: Periodic, south: Periodic, north: Periodic, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux\n├── operand: BinaryOperation at (Face, Face, Center)\n├── status: time=0.0\n└── data: 38×38×14 OffsetArray(::Array{Float64, 3}, -2:35, -2:35, -2:11) with eltype Float64 with indices -2:35×-2:35×-2:11\n    └── max=5.35045e-5, min=-4.94356e-5, mean=-2.33679e-23","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Periodically save the velocities and vorticity to a file.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"simulation.output_writers[:fields] = JLD2Writer(model, merge(model.tracers, (; u, v, w, ζ));\n                                                schedule = TimeInterval(2hours),\n                                                filename = \"eady_turbulence_bgc\",\n                                                overwrite_existing = true)\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Run the simulation","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"run!(simulation)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"[ Info: Initializing simulation...\ni:      0, sim time:  0 seconds, wall time:  0 seconds, Δt: 17.188 minutes, CFL: 3.27e-01\n[ Info:     ... simulation initialization complete (25.949 seconds)\n[ Info: Executing initial time step...\n[ Info:     ... initial time step complete (12.404 seconds).\ni:     20, sim time:    6 hours, wall time: 39.436 seconds, Δt: 25.164 minutes, CFL: 4.74e-01\ni:     40, sim time:   15 hours, wall time: 40.259 seconds, Δt: 30 minutes, CFL: 5.77e-01\ni:     60, sim time: 1.042 days, wall time: 41.087 seconds, Δt: 30 minutes, CFL: 6.12e-01\ni:     80, sim time: 1.458 days, wall time: 41.915 seconds, Δt: 30 minutes, CFL: 6.33e-01\ni:    100, sim time: 1.875 days, wall time: 42.730 seconds, Δt: 30 minutes, CFL: 6.69e-01\ni:    120, sim time: 2.292 days, wall time: 43.544 seconds, Δt: 29.577 minutes, CFL: 7.50e-01\ni:    140, sim time: 2.621 days, wall time: 44.356 seconds, Δt: 26.294 minutes, CFL: 7.50e-01\ni:    160, sim time: 2.933 days, wall time: 45.162 seconds, Δt: 23.119 minutes, CFL: 7.50e-01\ni:    180, sim time: 3.196 days, wall time: 45.958 seconds, Δt: 20.903 minutes, CFL: 7.50e-01\ni:    200, sim time: 3.459 days, wall time: 46.763 seconds, Δt: 19.497 minutes, CFL: 7.50e-01\ni:    220, sim time: 3.692 days, wall time: 47.588 seconds, Δt: 17.453 minutes, CFL: 7.50e-01\ni:    240, sim time: 3.912 days, wall time: 48.393 seconds, Δt: 15.802 minutes, CFL: 7.50e-01\ni:    260, sim time: 4.103 days, wall time: 49.203 seconds, Δt: 13.633 minutes, CFL: 7.50e-01\ni:    280, sim time: 4.277 days, wall time: 50.011 seconds, Δt: 12.955 minutes, CFL: 7.50e-01\ni:    300, sim time: 4.444 days, wall time: 50.810 seconds, Δt: 12.758 minutes, CFL: 7.50e-01\ni:    320, sim time: 4.611 days, wall time: 51.608 seconds, Δt: 13.516 minutes, CFL: 7.50e-01\ni:    340, sim time: 4.796 days, wall time: 52.410 seconds, Δt: 13.001 minutes, CFL: 7.50e-01\ni:    360, sim time: 4.958 days, wall time: 53.209 seconds, Δt: 11.774 minutes, CFL: 7.50e-01\ni:    380, sim time: 5.107 days, wall time: 54.009 seconds, Δt: 11.085 minutes, CFL: 7.50e-01\ni:    400, sim time: 5.258 days, wall time: 54.821 seconds, Δt: 11.009 minutes, CFL: 7.50e-01\ni:    420, sim time: 5.411 days, wall time: 55.614 seconds, Δt: 11.242 minutes, CFL: 7.50e-01\ni:    440, sim time: 5.553 days, wall time: 56.404 seconds, Δt: 10.848 minutes, CFL: 7.50e-01\ni:    460, sim time: 5.689 days, wall time: 57.211 seconds, Δt: 10.594 minutes, CFL: 7.50e-01\ni:    480, sim time: 5.831 days, wall time: 58.014 seconds, Δt: 10.474 minutes, CFL: 7.50e-01\ni:    500, sim time: 5.967 days, wall time: 58.819 seconds, Δt: 10.327 minutes, CFL: 7.50e-01\ni:    520, sim time: 6.105 days, wall time: 59.627 seconds, Δt: 10.246 minutes, CFL: 7.50e-01\ni:    540, sim time: 6.244 days, wall time: 1.007 minutes, Δt: 10.159 minutes, CFL: 7.50e-01\ni:    560, sim time: 6.384 days, wall time: 1.020 minutes, Δt: 10.530 minutes, CFL: 7.50e-01\ni:    580, sim time: 6.522 days, wall time: 1.034 minutes, Δt: 10.866 minutes, CFL: 7.50e-01\ni:    600, sim time: 6.664 days, wall time: 1.047 minutes, Δt: 10.383 minutes, CFL: 7.50e-01\ni:    620, sim time: 6.794 days, wall time: 1.061 minutes, Δt: 10.531 minutes, CFL: 7.50e-01\ni:    640, sim time: 6.924 days, wall time: 1.074 minutes, Δt: 10.623 minutes, CFL: 7.50e-01\ni:    660, sim time: 7.067 days, wall time: 1.087 minutes, Δt: 10.612 minutes, CFL: 7.50e-01\ni:    680, sim time: 7.204 days, wall time: 1.101 minutes, Δt: 10.777 minutes, CFL: 7.50e-01\ni:    700, sim time: 7.341 days, wall time: 1.114 minutes, Δt: 10.789 minutes, CFL: 7.50e-01\ni:    720, sim time: 7.485 days, wall time: 1.127 minutes, Δt: 11.004 minutes, CFL: 7.50e-01\ni:    740, sim time: 7.626 days, wall time: 1.140 minutes, Δt: 9.836 minutes, CFL: 7.50e-01\ni:    760, sim time: 7.756 days, wall time: 1.154 minutes, Δt: 8.779 minutes, CFL: 7.50e-01\ni:    780, sim time: 7.876 days, wall time: 1.167 minutes, Δt: 8.625 minutes, CFL: 7.50e-01\ni:    800, sim time: 7.995 days, wall time: 1.180 minutes, Δt: 8.748 minutes, CFL: 7.50e-01\ni:    820, sim time: 8.115 days, wall time: 1.194 minutes, Δt: 9.076 minutes, CFL: 7.50e-01\ni:    840, sim time: 8.240 days, wall time: 1.207 minutes, Δt: 9.916 minutes, CFL: 7.50e-01\ni:    860, sim time: 8.379 days, wall time: 1.220 minutes, Δt: 10.973 minutes, CFL: 7.50e-01\ni:    880, sim time: 8.531 days, wall time: 1.234 minutes, Δt: 10.690 minutes, CFL: 7.50e-01\ni:    900, sim time: 8.667 days, wall time: 1.247 minutes, Δt: 9.917 minutes, CFL: 7.50e-01\ni:    920, sim time: 8.798 days, wall time: 1.261 minutes, Δt: 10.134 minutes, CFL: 7.50e-01\ni:    940, sim time: 8.931 days, wall time: 1.274 minutes, Δt: 9.879 minutes, CFL: 7.50e-01\ni:    960, sim time: 9.060 days, wall time: 1.287 minutes, Δt: 9.580 minutes, CFL: 7.50e-01\ni:    980, sim time: 9.187 days, wall time: 1.301 minutes, Δt: 9.717 minutes, CFL: 7.50e-01\ni:   1000, sim time: 9.321 days, wall time: 1.314 minutes, Δt: 10.580 minutes, CFL: 7.50e-01\ni:   1020, sim time: 9.460 days, wall time: 1.328 minutes, Δt: 10.306 minutes, CFL: 7.50e-01\ni:   1040, sim time: 9.597 days, wall time: 1.341 minutes, Δt: 10.076 minutes, CFL: 7.50e-01\ni:   1060, sim time: 9.736 days, wall time: 1.354 minutes, Δt: 9.980 minutes, CFL: 7.50e-01\ni:   1080, sim time: 9.861 days, wall time: 1.367 minutes, Δt: 9.886 minutes, CFL: 7.50e-01\ni:   1100, sim time: 9.992 days, wall time: 1.381 minutes, Δt: 9.821 minutes, CFL: 7.50e-01\n[ Info: Simulation is stopping after running for 1.382 minutes.\n[ Info: Simulation time 10 days equals or exceeds stop time 10 days.\n","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"Now load the saved output,","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"  ζ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"ζ\")\n  P = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"P\")\nNO₃ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NO₃\")\nNH₄ = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"NH₄\")\nDIC = FieldTimeSeries(\"eady_turbulence_bgc.jld2\", \"DIC\")\n\ntimes = ζ.times\n\nxζ, yζ, zζ = nodes(ζ)\nxc, yc, zc = nodes(P)","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"and plot.","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"using CairoMakie\n\nn = Observable(1)\n\n  ζₙ = @lift interior(  ζ[$n], :, :, grid.Nz)\n  Nₙ = @lift interior(NO₃[$n], :, :, grid.Nz) .+ interior(NH₄[$n], :, :, grid.Nz)\n  Pₙ = @lift interior(  P[$n], :, :, grid.Nz)\nDICₙ = @lift interior(DIC[$n], :, :, grid.Nz)\n\nfig = Figure(size = (1600, 1600), fontsize = 20)\n\nlims = [(minimum(T), maximum(T)) for T in (  ζ[:, :, grid.Nz, :],\n                                           NO₃[:, :, grid.Nz, :] .+ NH₄[:, :, grid.Nz, :],\n                                             P[:, :, grid.Nz, :],\n                                           DIC[:, :, grid.Nz, :])]\n\naxis_kwargs = (xlabel = \"x (m)\", ylabel = \"y (m)\", aspect = DataAspect())\n\nax1 = Axis(fig[1, 1]; title = \"Vertical vorticity (1 / s)\", axis_kwargs...)\nhm1 = heatmap!(ax1, xζ, yζ, ζₙ, colormap = :balance, colorrange = lims[1])\nColorbar(fig[1, 2], hm1)\n\nax2 = Axis(fig[1, 3]; title = \"Nutrient (NO₃ + NH₄) concentration (mmol N / m³)\", axis_kwargs...)\nhm2 = heatmap!(ax2, xc, yc, Nₙ, colormap = Reverse(:bamako), colorrange = lims[2])\nColorbar(fig[1, 4], hm2)\n\nax3 = Axis(fig[2, 1]; title = \"Phytoplankton concentration (mmol N / m³)\", axis_kwargs...)\nhm3 = heatmap!(ax3, xc, yc, Pₙ, colormap = Reverse(:batlow), colorrange = lims[3])\nColorbar(fig[2, 2], hm3)\n\nax4 = Axis(fig[2, 3]; title = \"Dissolved inorganic carbon (mmol C / m³)\", axis_kwargs...)\nhm4 = heatmap!(ax4, xc, yc, DICₙ, colormap = Reverse(:devon), colorrange = lims[4])\nColorbar(fig[2, 4], hm4)\n\ntitle = @lift \"t = $(prettytime(times[$n]))\"\nLabel(fig[0, :], title, fontsize = 30)\n\nrecord(fig, \"eady.mp4\", 1:length(times), framerate = 12) do i\n    n[] = i\nend","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"(Image: )","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"","category":"page"},{"location":"generated/eady/","page":"Baroclinic instability","title":"Baroclinic instability","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/OceanBioME.Models.SedimentModels.InstantRemineralisation_parameters/#OceanBioME.Models.SedimentModels.InstantRemineralisation-default-parameters","page":"OceanBioME.Models.SedimentModels.InstantRemineralisation","title":"OceanBioME.Models.SedimentModels.InstantRemineralisation default parameters","text":"","category":"section"},{"location":"generated/OceanBioME.Models.SedimentModels.InstantRemineralisation_parameters/","page":"OceanBioME.Models.SedimentModels.InstantRemineralisation","title":"OceanBioME.Models.SedimentModels.InstantRemineralisation","text":"Name Value\nburial_efficiency_constant1 0.013\nburial_efficiency_constant2 0.53\nburial_efficiency_half_saturation 1.0670731707317074\nsinking_tracers (:P, :D)\nremineralisation_reciever N","category":"page"}]
}
